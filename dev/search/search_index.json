{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#yaxarraysjl","title":"YAXArrays.jl","text":"<p>Yet another xarray-like Julia package</p> <p>A package for operating on out-of-core labeled arrays, based on stores like NetCDF, Zarr or GDAL.  </p> <p>Info</p> <ul> <li>Open datasets from a variety of sources (NetCDF, Zarr, ArchGDAL)</li> <li>Interoperability with other named axis packages through YAXArrayBase</li> <li>Efficient <code>mapslices(x)</code> operations on huge multiple arrays, optimized for high-latency data access (object storage, compressed datasets)</li> </ul> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add(\"YAXArrays\")\n</code></pre> <p>or </p> <pre><code>] add YAXArrays\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p> <p>You may check the installed version with:</p> <pre><code>] st YAXArrays\n</code></pre> <p>Start using the package:</p> <pre><code>using YAXArrays\n</code></pre> <p>The YAXArray tutorial provides a tutorial explaining how to get started using YAXArrays.</p> <p></p> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>using YAXArrays\nyax = YAXArray(rand(10,20,30))\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#public-api","title":"Public API","text":"<p># <code>YAXArrays.Cubes</code> \u2014 Module.</p> <p>The functions provided by YAXArrays are supposed to work on different types of cubes. This module defines the interface for all Data types that</p> <p># <code>YAXArrays.Cubes.YAXArray</code> \u2014 Type.</p> <pre><code>YAXArray{T,N}\n</code></pre> <p>An array labelled with named axes that have values associated with them. It can wrap normal arrays or, more typically DiskArrays.</p> <p>Fields</p> <ul> <li><code>axes</code>: <code>Vector{CubeAxis}</code> containing the Axes of the Cube</li> <li><code>data</code>: length(axes)-dimensional array which holds the data, this can be a lazy DiskArray</li> <li><code>properties</code>: Metadata properties describing the content of the data</li> <li><code>chunks</code>: Representation of the chunking of the data</li> <li><code>cleaner</code>: Cleaner objects to track which objects to tidy up when the YAXArray goes out of scope</li> </ul> <p># <code>YAXArrays.Cubes.caxes</code> \u2014 Function.</p> <p>Returns the axes of a Cube</p> <p># <code>YAXArrays.Cubes.concatenatecubes</code> \u2014 Method.</p> <pre><code>function concatenateCubes(cubelist, cataxis::CategoricalAxis)\n</code></pre> <p>Concatenates a vector of datacubes that have identical axes to a new single cube along the new axis <code>cataxis</code></p> <p># <code>YAXArrays.Cubes.readcubedata</code> \u2014 Method.</p> <pre><code>readcubedata(cube)\n</code></pre> <p>Given any array implementing the YAXArray interface it returns an in-memory <code>YAXArray</code> from it.</p> <p># <code>YAXArrays.Cubes.setchunks</code> \u2014 Method.</p> <pre><code>setchunks(c::YAXArray,chunks)\n</code></pre> <p>Resets the chunks of a YAXArray and returns a new YAXArray. Note that this will not change the chunking of the underlying data itself,  it will just make the data \"look\" like it had a different chunking. If you need a persistent on-disk representation of this chunking, use <code>savecube</code> on the resulting array. The <code>chunks</code> argument can take one of the following forms:</p> <ul> <li>a <code>DiskArrays.GridChunks</code> object</li> <li>a tuple specifying the chunk size along each dimension</li> <li>an AbstractDict or NamedTuple mapping one or more axis names to chunk sizes</li> </ul> <p># <code>YAXArrays.Cubes.subsetcube</code> \u2014 Function.</p> <p>This function calculates a subset of a cube's data</p> <p># <code>YAXArrays.Cubes.Axes</code> \u2014 Module.</p> <p>The <code>Axes</code> module handles the Axes of a data cube.  It provides the following exports:</p> <ul> <li><code>CategoricalAxis</code></li> <li><code>CubeAxis</code></li> <li><code>RangeAxis</code></li> <li><code>getAxis</code></li> </ul> <p># <code>YAXArrays.Cubes.Axes.CategoricalAxis</code> \u2014 Type.</p> <pre><code>struct CategoricalAxis{T,S,RT}\n</code></pre> <p>To represent axes that are categorical, where <code>T</code> is the element type. The type parameter <code>S</code> denotes the axis name (a symbol). The default constructor is:</p> <pre><code>CategoricalAxis(axname::String,values::Vector{T})\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.CubeAxis</code> \u2014 Type.</p> <pre><code>abstract type CubeAxis{T,S}\n</code></pre> <p>Supertype of all axes. Every <code>CubeAxis</code> is an 1D Cube itself and can be passed to mapCube operations. In detail CubeAxis is an <code>AbstractArray{Int, 1}</code></p> <p># <code>YAXArrays.Cubes.Axes.RangeAxis</code> \u2014 Type.</p> <pre><code>RangeAxis{T,S,R}\n</code></pre> <p>To represent axes that are numerical, where <code>T</code> is the element type. The type parameter <code>S</code> denotes the axis name (a symbol) and <code>R</code> the type of the range which is used to represent the axis values. The default constructor is:</p> <pre><code>RangeAxis(axname::String,values::Range{T})\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.getAxis</code> \u2014 Method.</p> <pre><code>getAxis(desc, c)\n</code></pre> <p>Given an Axis description and a cube, returns the corresponding axis of the cube. The Axis description can be:</p> <ul> <li>the name as a string or symbol.</li> <li>an Axis object</li> </ul> <p># <code>YAXArrays.DAT.InDims</code> \u2014 Type.</p> <pre><code>InDims(axisdesc...;...)\n</code></pre> <p>Creates a description of an Input Data Cube for cube operations. Takes a single   or multiple axis descriptions as first arguments. Alternatively a MovingWindow(@ref) struct can be passed to include   neighbour slices of one or more axes in the computation.    Axes can be specified by their   name (String), through an Axis type, or by passing a concrete axis.</p> <p>Keyword arguments</p> <ul> <li><code>artype</code> how shall the array be represented in the inner function. Defaults to <code>Array</code>, alternatives are <code>DataFrame</code> or <code>AsAxisArray</code></li> <li><code>filter</code> define some filter to skip the computation, e.g. when all values are missing. Defaults to   <code>AllMissing()</code>, possible values are <code>AnyMissing()</code>, <code>AnyOcean()</code>, <code>StdZero()</code>, <code>NValid(n)</code>   (for at least n non-missing elements). It is also possible to provide a custom one-argument function   that takes the array and returns <code>true</code> if the compuation shall be skipped and <code>false</code> otherwise.</li> <li><code>window_oob_value</code> if one of the input dimensions is a MowingWindow, this value will be used to fill out-of-bounds areas</li> </ul> <p># <code>YAXArrays.DAT.MovingWindow</code> \u2014 Type.</p> <pre><code>MovingWindow(desc, pre, after)\n</code></pre> <p>Constructs a <code>MovingWindow</code> object to be passed to an <code>InDims</code> constructor to define that the axis in <code>desc</code> shall participate in the inner function (i.e. shall be looped over), but inside the inner function <code>pre</code> values before and <code>after</code> values after the center value will be passed as well. </p> <p>For example passing <code>MovingWindow(\"Time\", 2, 0)</code> will loop over the time axis and  always pass the current time step plus the 2 previous steps. So in the inner function the array will have an additional dimension of size 3.    </p> <p># <code>YAXArrays.DAT.OutDims</code> \u2014 Method.</p> <pre><code>OutDims(axisdesc;...)\n</code></pre> <p>Creates a description of an Output Data Cube for cube operations. Takes a single   or a Vector/Tuple of axes as first argument. Axes can be specified by their   name (String), through an Axis type, or by passing a concrete axis.</p> <ul> <li><code>axisdesc</code>: List of input axis names</li> <li><code>backend</code> : specifies the dataset backend to write data to, must be either :auto or a key in <code>YAXArrayBase.backendlist</code></li> <li><code>update</code> : specifies wether the function operates inplace or if an output is returned</li> <li><code>artype</code> : specifies the Array type inside the inner function that is mapped over</li> <li><code>chunksize</code>: A Dict specifying the chunksizes for the output dimensions of the cube, or <code>:input</code> to copy chunksizes from input cube axes or <code>:max</code> to not chunk the inner dimensions</li> <li><code>outtype</code>: force the output type to a specific type, defaults to <code>Any</code> which means that the element type of the first input cube is used</li> </ul> <p># <code>YAXArrays.DAT.CubeTable</code> \u2014 Method.</p> <pre><code>CubeTable()\n</code></pre> <p>Function to turn a DataCube object into an iterable table. Takes a list of as arguments, specified as a <code>name=cube</code> expression. For example <code>CubeTable(data=cube1,country=cube2)</code> would generate a Table with the entries <code>data</code> and <code>country</code>, where <code>data</code> contains the values of <code>cube1</code> and <code>country</code> the values of <code>cube2</code>. The cubes are matched and broadcasted along their axes like in <code>mapCube</code>.</p> <p># <code>YAXArrays.DAT.cubefittable</code> \u2014 Method.</p> <pre><code>cubefittable(tab,o,fitsym;post=getpostfunction(o),kwargs...)\n</code></pre> <p>Executes <code>fittable</code> on the <code>CubeTable</code> <code>tab</code> with the (Weighted-)OnlineStat <code>o</code>, looping through the values specified by <code>fitsym</code>. Finally, writes the results from the <code>TableAggregator</code> to an output data cube.</p> <p># <code>YAXArrays.DAT.fittable</code> \u2014 Method.</p> <pre><code>fittable(tab,o,fitsym;by=(),weight=nothing)\n</code></pre> <p>Loops through an iterable table <code>tab</code> and thereby fitting an OnlineStat <code>o</code> with the values specified through <code>fitsym</code>. Optionally one can specify a field (or tuple) to group by. Any groupby specifier can either be a symbol denoting the entry to group by or an anynymous function calculating the group from a table row.</p> <p>For example the following would caluclate a weighted mean over a cube weighted by grid cell area and grouped by country and month:</p> <pre><code>fittable(iter,WeightedMean,:tair,weight=(i-&gt;abs(cosd(i.lat))),by=(i-&gt;month(i.time),:country))\n</code></pre> <p># <code>YAXArrays.DAT.mapCube</code> \u2014 Method.</p> <pre><code>mapCube(fun, cube, addargs...;kwargs...)\n\nMap a given function `fun` over slices of all cubes of the dataset `ds`. Use InDims to discribe the input dimensions and OutDims to describe the output dimensions of the function.\nFor Datasets, only one output cube can be specified.\nIn contrast to the mapCube function for cubes, additional arguments for the inner function should be set as keyword arguments.\n\nFor the specific keyword arguments see the docstring of the mapCube function for cubes.\n</code></pre> <p># <code>YAXArrays.DAT.mapCube</code> \u2014 Method.</p> <pre><code>mapCube(fun, cube, addargs...;kwargs...)\n</code></pre> <p>Map a given function <code>fun</code> over slices of the data cube <code>cube</code>.      The additional arguments <code>addargs</code> will be forwarded to the inner function <code>fun</code>.     Use InDims to discribe the input dimensions and OutDims to describe the output dimensions of the function.</p> <p>Keyword arguments</p> <ul> <li><code>max_cache=YAXDefaults.max_cache</code> maximum size of blocks that are read into memory, defaults to approx 10Mb</li> <li><code>indims::InDims</code> List of input cube descriptors of type <code>InDims</code> for each input data cube</li> <li><code>outdims::OutDims</code> List of output cube descriptors of type <code>OutDims</code> for each output cube</li> <li><code>inplace</code> does the function write to an output array inplace or return a single value&gt; defaults to <code>true</code></li> <li><code>ispar</code> boolean to determine if parallelisation should be applied, defaults to <code>true</code> if workers are available.</li> <li><code>showprog</code> boolean indicating if a ProgressMeter shall be shown</li> <li><code>include_loopvars</code> boolean to indicate if the varoables looped over should be added as function arguments</li> <li><code>nthreads</code> number of threads for the computation, defaults to Threads.nthreads for every worker.</li> <li><code>loopchunksize</code> determines the chunk sizes of variables which are looped over, a dict</li> <li><code>kwargs</code> additional keyword arguments are passed to the inner function</li> </ul> <p>The first argument is always the function to be applied, the second is the input cube or a tuple of input cubes if needed.</p> <p># <code>YAXArrays.Datasets.Dataset</code> \u2014 Type.</p> <pre><code>Dataset object which stores an `OrderedDict` of YAXArrays with Symbol keys. a dictionary of CubeAxes and a Dictionary of general properties. A dictionary can hold cubes with differing axes. But it will share the common axes between the subcubes.\n</code></pre> <p># <code>YAXArrays.Datasets.Dataset</code> \u2014 Method.</p> <p>Dataset(; properties = Dict{String,Any}, cubes...)</p> <p>Construct a YAXArray Dataset with global attributes <code>properties</code> a and a list of named YAXArrays cubes...</p> <p># <code>YAXArrays.Datasets.Cube</code> \u2014 Method.</p> <pre><code>Cube(ds::Dataset; joinname=\"Variable\")\n</code></pre> <p>Construct a single YAXArray from the dataset <code>ds</code>  by concatenating the cubes in the datset on the <code>joinname</code> dimension.</p> <p># <code>YAXArrays.Datasets.open_dataset</code> \u2014 Method.</p> <p>open_dataset(g; driver=:all)</p> <p>Open the dataset at <code>g</code> with the given <code>driver</code>. The default driver will search for available drivers and tries to detect the useable driver from the filename extension.</p> <p># <code>YAXArrays.Datasets.savecube</code> \u2014 Method.</p> <pre><code>savecube(cube,name::String)\n</code></pre> <p>Save a <code>YAXArray</code> to the <code>path</code>. </p> <p>Extended Help</p> <p>The keyword arguments are:</p> <ul> <li><code>name</code>:</li> <li><code>datasetaxis=\"Variable\"</code> special treatment of a categorical axis that gets written into separate zarr arrays</li> <li><code>max_cache</code>: The number of bits that are used as cache for the data handling.</li> <li><code>backend</code>: The backend, that is used to save the data. Falls back to searching the backend according to the extension of the path.</li> <li><code>driver</code>: The same setting as <code>backend</code>.</li> <li><code>overwrite::Bool=false</code> overwrite cube if it already exists</li> </ul> <p># <code>YAXArrays.Datasets.savedataset</code> \u2014 Method.</p> <p>savedataset(ds::Dataset; path = \"\", persist = nothing, overwrite = false, append = false, skeleton=false, backend = :all,     driver = backend, max_cache = 5e8, writefac=4.0)</p> <p>Saves a Dataset into a file at <code>path</code> with the format given by <code>driver</code>, i.e., driver=:netcdf or driver=:zarr.</p> <p>Warning</p> <p>overwrite = true, deletes ALL your data and it will create a new file.</p> <p># <code>YAXArrays.Datasets.to_dataset</code> \u2014 Method.</p> <p>to_dataset(c;datasetaxis = \"Variable\", name = \"layer\")  </p> <p>Convert a Data Cube into a Dataset. It is possible to treat one of  the Cube's axes as a \"DatasetAxis\" i.e. the cube will be split into  different parts that become variables in the Dataset. If no such  axis is specified or found, there will only be a single variable  in the dataset with the name <code>name</code></p> <p></p> <p></p>"},{"location":"api/#internal-api","title":"Internal API","text":"<p># <code>YAXArrays.YAXDefaults</code> \u2014 Constant.</p> <p>Default configuration for YAXArrays, has the following fields:</p> <ul> <li><code>workdir[]::String = \"./\"</code> The default location for temporary cubes.</li> <li><code>recal[]::Bool = false</code> set to true if you want <code>@loadOrGenerate</code> to always recalculate the results.</li> <li><code>chunksize[]::Any = :input</code> Set the default output chunksize.</li> <li><code>max_cache[]::Float64 = 1e8</code> The maximum cache used by mapCube.</li> <li><code>cubedir[]::\"\"</code> the default location for <code>Cube()</code> without an argument.</li> <li><code>subsetextensions::Array{Any} = []</code> List of registered functions, that convert subsetting input into dimension boundaries.</li> </ul> <p># <code>YAXArrays.Cubes.CleanMe</code> \u2014 Type.</p> <pre><code>mutable struct CleanMe\n</code></pre> <p>Struct which describes data paths and their persistency. Non-persistend paths/files are removed at finalize step</p> <p># <code>YAXArrays.Cubes.clean</code> \u2014 Method.</p> <pre><code>clean(c::CleanMe)\n</code></pre> <p>finalizer function for CleanMe struct. The main process removes all directories/files which are not persistent.</p> <p># <code>YAXArrays.Cubes.copydata</code> \u2014 Method.</p> <pre><code>copydata(outar, inar, copybuf)\n</code></pre> <p>Internal function which copies the data from the input <code>inar</code> into the output <code>outar</code> at the <code>copybuf</code> positions.</p> <p># <code>YAXArrays.Cubes.optifunc</code> \u2014 Method.</p> <pre><code>optifunc(s, maxbuf, incs, outcs, insize, outsize, writefac)\n</code></pre> <p>Internal</p> <p>This function is going to be minimized to detect the best possible chunk setting for the rechunking of the data.</p> <p># <code>YAXArrays.Cubes.Axes.abshalf</code> \u2014 Method.</p> <pre><code>abshalf\n</code></pre> <p>&lt;a id='YAXArrays.Cubes.Axes.axVal2Index-Tuple{RangeAxis{&lt;:Any, &lt;:Any, &lt;:AbstractRange}, Any}' href='#YAXArrays.Cubes.Axes.axVal2Index-Tuple{RangeAxis{&lt;:Any, &lt;:Any, &lt;:AbstractRange}, Any}'&gt;# <code>YAXArrays.Cubes.Axes.axVal2Index</code> \u2014 Method.</p> <pre><code>axVal2Index\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.axVal2Index_lb</code> \u2014 Method.</p> <pre><code>axVal2Index_lb\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.axVal2Index_ub</code> \u2014 Method.</p> <pre><code>axVal2Index_ub\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.axcopy</code> \u2014 Method.</p> <pre><code>axcopy(x,vals)\n</code></pre> <p>Makes a full copy of a <code>CubeAxis</code> with the values <code>vals</code></p> <p># <code>YAXArrays.Cubes.Axes.axisfrombb</code> \u2014 Method.</p> <pre><code>axisfrombb\n</code></pre> <p>&lt;a id='YAXArrays.Cubes.Axes.axname-Union{Tuple{Type{&lt;:CubeAxis{&lt;:Any, U}}}, Tuple{U}} where U' href='#YAXArrays.Cubes.Axes.axname-Union{Tuple{Type{&lt;:CubeAxis{&lt;:Any, U}}}, Tuple{U}} where U'&gt;# <code>YAXArrays.Cubes.Axes.axname</code> \u2014 Method.</p> <pre><code>axname\n</code></pre> <p>&lt;a id='YAXArrays.Cubes.Axes.axsym-Union{Tuple{CubeAxis{&lt;:Any, S}}, Tuple{S}} where S' href='#YAXArrays.Cubes.Axes.axsym-Union{Tuple{CubeAxis{&lt;:Any, S}}, Tuple{S}} where S'&gt;# <code>YAXArrays.Cubes.Axes.axsym</code> \u2014 Method.</p> <pre><code>axsym\n</code></pre> <p>&lt;a id='YAXArrays.Cubes.Axes.convert_time-Tuple{Type{&lt;:Dates.TimeType}, Dates.TimeType}' href='#YAXArrays.Cubes.Axes.convert_time-Tuple{Type{&lt;:Dates.TimeType}, Dates.TimeType}'&gt;# <code>YAXArrays.Cubes.Axes.convert_time</code> \u2014 Method.</p> <pre><code>convert_time\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.findAxis</code> \u2014 Method.</p> <pre><code>findAxis(desc, c)\n</code></pre> <p>Given an Axis description and a cube return the index of the Axis. The Axis description can be:</p> <ul> <li>the name as a string or symbol.</li> <li>an Axis object</li> </ul> <p># <code>YAXArrays.Cubes.Axes.getOutAxis</code> \u2014 Method.</p> <pre><code>getOutAxis\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.get_bb</code> \u2014 Method.</p> <pre><code>get_bb\n</code></pre> <p># <code>YAXArrays.Cubes.Axes.get_descriptor</code> \u2014 Method.</p> <pre><code>get_descriptor(a)\n</code></pre> <p>Get the descriptor of an Axis.  This is used to dispatch on the descriptor. </p> <p># <code>YAXArrays.Cubes.Axes.get_step</code> \u2014 Method.</p> <pre><code>get_step\n</code></pre> <p>returns stepwidth of the RangeAxis</p> <p># <code>YAXArrays.Cubes.Axes.match_axis</code> \u2014 Method.</p> <pre><code>match_axis\n</code></pre> <p>&lt;a id='YAXArrays.Cubes.Axes.renameaxis-Union{Tuple{V}, Tuple{T}, Tuple{RangeAxis{T, &lt;:Any, V}, Any}} where {T, V}' href='#YAXArrays.Cubes.Axes.renameaxis-Union{Tuple{V}, Tuple{T}, Tuple{RangeAxis{T, &lt;:Any, V}, Any}} where {T, V}'&gt;# <code>YAXArrays.Cubes.Axes.renameaxis</code> \u2014 Method.</p> <pre><code>renameaxis\n</code></pre> <p># <code>YAXArrays.Cubes.caxes</code> \u2014 Method.</p> <pre><code>caxes\n</code></pre> <p>Embeds  Cube inside a new Cube</p> <p># <code>YAXArrays.DAT.DATConfig</code> \u2014 Type.</p> <p>Configuration object of a DAT process. This holds all necessary information to perform the calculations. It contains the following fields:</p> <ul> <li><code>incubes::Tuple{Vararg{YAXArrays.DAT.InputCube, NIN}} where NIN</code>: The input data cubes</li> <li><code>outcubes::Tuple{Vararg{YAXArrays.DAT.OutputCube, NOUT}} where NOUT</code>: The output data cubes</li> <li><code>allInAxes::Vector</code>: List of all axes of the input cubes</li> <li><code>LoopAxes::Vector</code>: List of axes that are looped through</li> <li><code>ispar::Bool</code>: Flag whether the computation is parallelized</li> <li><code>loopcachesize::Vector{Int64}</code>:</li> <li><code>allow_irregular_chunks::Bool</code>:</li> <li><code>max_cache::Any</code>: Maximal size of the in memory cache</li> <li><code>fu::Any</code>: Inner function which is computed</li> <li><code>inplace::Bool</code>: Flag whether the computation happens in place</li> <li><code>include_loopvars::Bool</code>:</li> <li><code>ntr::Any</code>:</li> <li><code>addargs::Any</code>: Additional arguments for the inner function</li> <li><code>kwargs::Any</code>: Additional keyword arguments for the inner function</li> </ul> <p># <code>YAXArrays.DAT.InputCube</code> \u2014 Type.</p> <p>Internal representation of an input cube for DAT operations</p> <ul> <li><code>cube</code>: The input data</li> <li><code>desc</code>: The input description given by the user/registration</li> <li><code>axesSmall</code>: List of axes that were actually selected through the description</li> <li><code>icolon</code></li> <li><code>colonperm</code></li> <li><code>loopinds</code>: Indices of loop axes that this cube does not contain, i.e. broadcasts</li> <li><code>cachesize</code>: Number of elements to keep in cache along each axis</li> <li><code>window</code></li> <li><code>iwindow</code></li> <li><code>windowloopinds</code></li> <li><code>iall</code></li> </ul> <p># <code>YAXArrays.DAT.OutputCube</code> \u2014 Type.</p> <p>Internal representation of an output cube for DAT operations</p> <p>Fields</p> <ul> <li><code>cube</code>: The actual outcube cube, once it is generated</li> <li><code>cube_unpermuted</code>: The unpermuted output cube</li> <li><code>desc</code>: The description of the output axes as given by users or registration</li> <li><code>axesSmall</code>: The list of output axes determined through the description</li> <li><code>allAxes</code>: List of all the axes of the cube</li> <li><code>loopinds</code>: Index of the loop axes that are broadcasted for this output cube</li> <li><code>innerchunks</code></li> <li><code>outtype</code>: Elementtype of the outputcube</li> </ul> <p># <code>YAXArrays.DAT.YAXColumn</code> \u2014 Type.</p> <pre><code>YAXColumn\n</code></pre> <p>A struct representing a single column of a YAXArray partitioned Table     # Fields </p> <ul> <li><code>inarBC</code></li> <li><code>inds</code></li> </ul> <p># <code>YAXArrays.DAT.cmpcachmisses</code> \u2014 Method.</p> <p>Function that compares two cache miss specifiers by their importance</p> <p># <code>YAXArrays.DAT.getFrontPerm</code> \u2014 Method.</p> <p>Calculate an axis permutation that brings the wanted dimensions to the front</p> <p># <code>YAXArrays.DAT.getLoopCacheSize</code> \u2014 Method.</p> <p>Calculate optimal Cache size to DAT operation</p> <p># <code>YAXArrays.DAT.getOuttype</code> \u2014 Method.</p> <pre><code>getOuttype(outtype, cdata)\n</code></pre> <p>Internal function</p> <p>Get the element type for the output cube</p> <p># <code>YAXArrays.DAT.getloopchunks</code> \u2014 Method.</p> <pre><code>getloopchunks(dc::DATConfig)\n</code></pre> <p>Internal function</p> <pre><code>Returns the chunks that can be looped over toghether for all dimensions.\nThis computation of the size of the chunks is handled by [`DiskArrays.approx_chunksize`](@ref)\n</code></pre> <p># <code>YAXArrays.DAT.permuteloopaxes</code> \u2014 Method.</p> <pre><code>permuteloopaxes(dc)\n</code></pre> <p>Internal function</p> <p>Permute the dimensions of the cube, so that the axes that are looped through are in the first positions. This is necessary for a faster looping through the data.</p> <p># <code>YAXArrays.Cubes.setchunks</code> \u2014 Method.</p> <pre><code>setchunks(c::Dataset,chunks)\n</code></pre> <p>Resets the chunks of all or a subset YAXArrays in the dataset and returns a new Dataset. Note that this will not change the chunking of the underlying data itself,  it will just make the data \"look\" like it had a different chunking. If you need a persistent on-disk representation of this chunking, use <code>savedataset</code> on the resulting array. The <code>chunks</code> argument can take one of the following forms:</p> <ul> <li>a NamedTuple or AbstractDict mapping from variable name to a description of the desired variable chunks</li> <li>a NamedTuple or AbstractDict mapping from dimension name to a description of the desired variable chunks</li> <li>a description of the desired variable chunks applied to all members of the Dataset</li> </ul> <p>where a description of the desired variable chunks can take one of the following forms:</p> <ul> <li>a <code>DiskArrays.GridChunks</code> object</li> <li>a tuple specifying the chunk size along each dimension</li> <li>an AbstractDict or NamedTuple mapping one or more axis names to chunk sizes</li> </ul> <p># <code>YAXArrays.Datasets.collectfromhandle</code> \u2014 Method.</p> <p>Extracts a YAXArray from a dataset handle that was just created from a arrayinfo</p> <p># <code>YAXArrays.Datasets.createdataset</code> \u2014 Method.</p> <p>function createdataset(DS::Type,axlist; kwargs...)</p> <p>Creates a new dataset with axes specified in <code>axlist</code>. Each axis must be a subtype   of <code>CubeAxis</code>. A new empty Zarr array will be created and can serve as a sink for   <code>mapCube</code> operations.</p> <p>Keyword arguments</p> <ul> <li><code>path=\"\"</code> location where the new cube is stored</li> <li><code>T=Union{Float32,Missing}</code> data type of the target cube</li> <li><code>chunksize = ntuple(i-&gt;length(axlist[i]),length(axlist))</code> chunk sizes of the array</li> <li><code>chunkoffset = ntuple(i-&gt;0,length(axlist))</code> offsets of the chunks</li> <li><code>persist::Bool=true</code> shall the disk data be garbage-collected when the cube goes out of scope?</li> <li><code>overwrite::Bool=false</code> overwrite cube if it already exists</li> <li><code>properties=Dict{String,Any}()</code> additional cube properties</li> <li><code>fillvalue= T&gt;:Missing ? defaultfillval(Base.nonmissingtype(T)) : nothing</code> fill value</li> <li><code>datasetaxis=\"Variable\"</code> special treatment of a categorical axis that gets written into separate zarr arrays</li> </ul> <pre><code>\n</code></pre> <p># <code>YAXArrays.Datasets.getarrayinfo</code> \u2014 Method.</p> <p>Extract necessary information to create a YAXArrayBase dataset from a name and YAXArray pair </p> <p># <code>YAXArrays.Datasets.testrange</code> \u2014 Method.</p> <p>Test if data in x can be approximated by a step range</p>"},{"location":"examples/generated/Gallery/simplemaps/","title":"Simple maps","text":"<pre><code>using Zarr, YAXArrays, Dates\nusing GLMakie, GeoMakie\nusing GLMakie.GeometryBasics\n\nstore =\"gs://cmip6/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/3hr/tas/gn/v20190710/\"\ng = open_dataset(zopen(store, consolidated=true))\nc = g[\"tas\"]\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 384 Elements from 0.0 to 359.0625\nlat                 Axis with 192 Elements from -89.28422753251364 to 89.28422753251364\ntime                Axis with 251288 Elements from 2015-01-01T03:00:00 to 2101-01-01T00:00:00\nunits: K\nname: tas\nTotal size: 69.02 GB\n</code></pre> <p>Subset, first time step</p> <pre><code>ct1 = c[time = Date(\"2015-01-01\")]\nlon = ct1.lon\nlat = ct1.lat\ndata = ct1.data[:,:];\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/Gallery/simplemaps/#heatmap-plot","title":"Heatmap plot","text":"<pre><code>GLMakie.activate!()\nfig = Figure(resolution = (1200,600))\nax = Axis(fig[1,1]; aspect = DataAspect())\nheatmap!(ax, lon, lat, data; colormap = :seaborn_icefire_gradient)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#add-coastlines-via-the-geoaxis-wintri-projection","title":"Add Coastlines via the GeoAxis, wintri Projection","text":"<pre><code>\u03b4lon = (lon[2]-lon[1])/2\nnlon = lon .- 180 .+ \u03b4lon\nndata = circshift(data, (192,1))\n\n\nfig = Figure(resolution = (1200,600))\nax = GeoAxis(fig[1,1])\nsurface!(ax, nlon, lat, ndata; colormap = :seaborn_icefire_gradient, shading=false)\ncl=lines!(ax, GeoMakie.coastlines(), color = :white, linewidth=0.85)\ntranslate!(cl, 0, 0, 1000)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#moll-projection","title":"Moll projection","text":"<pre><code>fig = Figure(resolution = (1200,600))\nax = GeoAxis(fig[1,1]; dest = \"+proj=moll\")\nsurface!(ax, nlon, lat, ndata; colormap = :seaborn_icefire_gradient, shading=false)\ncl=lines!(ax, GeoMakie.coastlines(), color = :white, linewidth=0.85)\ntranslate!(cl, 0, 0, 1000)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#3d-sphere-plot","title":"3D sphere plot","text":"<pre><code>#using JSServe, WGLMakie\n#WGLMakie.activate!()\n#Page(exportable=true, offline=true)\n\nds = replace(ndata, missing =&gt;NaN)\nsphere = uv_normal_mesh(Tesselation(Sphere(Point3f(0), 1), 128))\n\nfig = Figure()\nax = LScene(fig[1,1], show_axis=false)\nmesh!(ax, sphere; color = ds'[end:-1:1,:],\ncolormap = :seaborn_icefire_gradient)\nzoom!(ax.scene, cameracontrols(ax.scene), 0.65)\nrotate!(ax.scene, 2.5)\nfig\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/HowdoI/howdoi/","title":"How do I ...","text":"<p>The purpose of this section is to do a collection of small convinient pieces of code on how to do simple things.</p> <p>Question</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#extract-the-axes-names-from-a-cube","title":"Extract the axes names from a Cube","text":"<pre><code>using YAXArrays\nc = YAXArray(rand(10,10,5))\n\ncaxes(c)\n</code></pre> <pre><code>3-element Vector{RangeAxis{Int64, _A, Base.OneTo{Int64}} where _A}:\n Dim_1               Axis with 10 Elements from 1 to 10\n Dim_2               Axis with 10 Elements from 1 to 10\n Dim_3               Axis with 5 Elements from 1 to 5\n</code></pre> <p>Question</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#obtain-values-from-axes-and-data-from-the-cube","title":"Obtain values from axes and data from the cube","text":"<p>There are two options to collect values from axes. In this examples the axis ranges from 1 to 10. Later we will see that axes can be <code>RangeAxis</code> such as latitude and longitude values, or <code>CategoricalAxis</code> which are strings such as variable names.</p> <pre><code># this two examples bring the same result\ncollect(getAxis(\"Dim_1\", c).values)\ncollect(c.axes[1].values)\n\n# to collect data from a cube works exactly the same as doing it from an array\nc[:,:,1]\n</code></pre> <pre><code>10\u00d710 Matrix{Float64}:\n 0.0634663  0.396789  0.7373    0.566706  \u2026  0.631449   0.590723  0.40275\n 0.773576   0.441902  0.726673  0.318699     0.269043   0.577087  0.946558\n 0.214168   0.402321  0.158864  0.996368     0.52295    0.832788  0.823097\n 0.662708   0.719463  0.456991  0.809577     0.201562   0.667184  0.368775\n 0.049579   0.109157  0.15252   0.869511     0.603542   0.344464  0.619922\n 0.345016   0.522787  0.286934  0.635472  \u2026  0.0260072  0.292739  0.0684495\n 0.475693   0.523942  0.251787  0.386671     0.956956   0.121949  0.965881\n 0.887283   0.967919  0.71351   0.602405     0.305558   0.994223  0.535201\n 0.634806   0.266007  0.906264  0.565973     0.39845    0.171709  0.848829\n 0.305821   0.925353  0.904689  0.269021     0.0605914  0.436627  0.58968\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#concatenate-cubes","title":"Concatenate cubes","text":"<p>It is possible to concatenate several cubes that shared the same dimensions using the [<code>concatenatecubes</code>]@ref function.</p> <p>let's create two dummy cubes</p> <pre><code>using YAXArrays\n\naxlist = [\nRangeAxis(\"time\", range(1, 20, length=20)),\nRangeAxis(\"lon\", range(1, 10, length=10)),\nRangeAxis(\"lat\", range(1, 5, length=15))]\n\ndata1 = rand(20, 10, 15)\nds1 = YAXArray(axlist, data1)\n\ndata2 = rand(20, 10, 15)\nds2 = YAXArray(axlist, data2)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 20 Elements from 1.0 to 20.0\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 23.44 KB\n</code></pre> <p>Now we can concatenate <code>ds1</code> and <code>ds2</code> cubes:</p> <pre><code>dsfinal = concatenatecubes([ds1, ds2],\nCategoricalAxis(\"Variables\", [\"var1\", \"var2\"]))\n\ndsfinal\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 20 Elements from 1.0 to 20.0\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nVariables           Axis with 2 elements: var1 var2 \nTotal size: 46.88 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#subsetting-a-cube","title":"Subsetting a Cube","text":"<p>Let's start by creating a dummy cube</p> <pre><code># define the time span of the cube\nusing Dates\nt =  Date(\"2020-01-01\"):Month(1):Date(\"2022-12-31\")\n\n# create cube axes\naxes = [RangeAxis(\"Lon\", 1:10), RangeAxis(\"Lat\", 1:10), RangeAxis(\"Time\", t)]\n\n# assign values to a cube\nc = YAXArray(axes, reshape(1:3600, (10,10,36)))\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 10 Elements from 1 to 10\nLat                 Axis with 10 Elements from 1 to 10\nTime                Axis with 36 Elements from 2020-01-01 to 2022-12-01\nTotal size: 28.12 KB\n</code></pre> <p>Now we subset the cube by any dimension</p> <pre><code># subset cube by years\nctime = c[Time=2021:2022]\n\n# subset cube by a specific date and date range\nctime2 = c[Time=Date(2021-01-05)]\nctime3 = c[Time=Date(2021-01-05)..Date(2021-01-12)]\n\n# subset cube by longitude and latitude\nclonlat = c[Lon=1..5, Lat=5..10] # check even numbers range, it is ommiting them\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 5 Elements from 1 to 5\nLat                 Axis with 5 Elements from 5 to 9\nTime                Axis with 36 Elements from 2020-01-01 to 2022-12-01\nTotal size: 7.03 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#applying-map-algebra","title":"Applying map algebra","text":"<p>Our next step is map algebra computations. This can be done effectively using the 'map' function. For example:</p> <pre><code># cubes with only spatio-temporal dimensions\nmap((x,y)-&gt;x*y, ds1, ds2)\n\n# cubes with more than 3 dimensions\nmap((x,y)-&gt;x*y, dsfinal[Variables=\"Var1\"], dsfinal[Variables=\"Var2\"])\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 20 Elements from 1.0 to 20.0\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 23.44 KB\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/applyfunctions/","title":"Apply functions on YAXArrays","text":"<p>How to apply functions on YAXArrays</p> <p>To apply user defined functions on a YAXArray data type we can use the <code>map</code> function, <code>mapslices</code> function or the <code>mapCube</code> function.  Which of these functions should be used depends on the layout of the data,  that the user defined function should be applied on.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#apply-a-function-on-every-element-of-a-datacube","title":"Apply a function on every element of a datacube","text":"<p>The <code>map</code> function can be used to apply a function on every entry of a YAXArray without taking the dimensions into account. This will lazily register the mapped function which is applied when the YAXArray is either accessed or when more involved computations are made.</p> <pre><code>#If we set up a dummy data cube which has all numbers between 1 and 10000.\n\nusing YAXArrays\naxes = [RangeAxis(\"Lon\", 1:10), RangeAxis(\"Lat\", 1:10), RangeAxis(\"Time\", 1:100)]\noriginal = YAXArray(axes, reshape(1:10000, (10,10,100)))\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 10 Elements from 1 to 10\nLat                 Axis with 10 Elements from 1 to 10\nTime                Axis with 100 Elements from 1 to 100\nTotal size: 78.12 KB\n</code></pre> <p>with one at the first position:</p> <pre><code>original[1,:,1]\n</code></pre> <pre><code>10-element Vector{Int64}:\n  1\n 11\n 21\n 31\n 41\n 51\n 61\n 71\n 81\n 91\n</code></pre> <p>now we can substract <code>1</code> from all elements of this cube</p> <pre><code>substracted = map(x-&gt; x-1, original)\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 10 Elements from 1 to 10\nLat                 Axis with 10 Elements from 1 to 10\nTime                Axis with 100 Elements from 1 to 100\nTotal size: 78.12 KB\n</code></pre> <p><code>substracted</code> is a cube of the same size as <code>original</code>, and the applied function is registered, so that it is applied as soon as the elements of <code>substracted</code> are either accessed or further used in other computations.</p> <pre><code>substracted[1,:,1]\n</code></pre> <pre><code>10-element Vector{Int64}:\n  0\n 10\n 20\n 30\n 40\n 50\n 60\n 70\n 80\n 90\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#apply-a-function-along-dimensions-of-a-single-cube","title":"Apply a function along dimensions of a single cube","text":"<p>If an function should work along a certain dimension of the data you can use the 'mapslices' function to easily apply this function. This doesn't give you the flexibility of the <code>mapCube</code> function but it is easier to use for simple functions.</p> <p>If we set up a dummy data cube which has all numbers between 1 and 10000.</p> <pre><code>axes = [RangeAxis(\"Lon\", 1:10), RangeAxis(\"Lat\", 1:10), RangeAxis(\"Time\", 1:100)]\noriginal = YAXArray(axes, reshape(1:10000, (10,10,100)))\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 10 Elements from 1 to 10\nLat                 Axis with 10 Elements from 1 to 10\nTime                Axis with 100 Elements from 1 to 100\nTotal size: 78.12 KB\n</code></pre> <p>and then we would like to compute the sum over the Time dimension:</p> <pre><code>timesum = mapslices(sum, original, dims=\"Time\")\n</code></pre> <pre><code>YAXArray with the following dimensions\nLon                 Axis with 10 Elements from 1 to 10\nLat                 Axis with 10 Elements from 1 to 10\nTotal size: 800.0 bytes\n</code></pre> <p>this reduces over the time dimension and gives us the following values</p> <pre><code>timesum[:,:]\n</code></pre> <pre><code>10\u00d710 Matrix{Union{Missing, Int64}}:\n 495100  496100  497100  498100  499100  \u2026  501100  502100  503100  504100\n 495200  496200  497200  498200  499200     501200  502200  503200  504200\n 495300  496300  497300  498300  499300     501300  502300  503300  504300\n 495400  496400  497400  498400  499400     501400  502400  503400  504400\n 495500  496500  497500  498500  499500     501500  502500  503500  504500\n 495600  496600  497600  498600  499600  \u2026  501600  502600  503600  504600\n 495700  496700  497700  498700  499700     501700  502700  503700  504700\n 495800  496800  497800  498800  499800     501800  502800  503800  504800\n 495900  496900  497900  498900  499900     501900  502900  503900  504900\n 496000  497000  498000  499000  500000     502000  503000  504000  505000\n</code></pre> <p>You can also apply a function along multiple dimensions of the same data cube.</p> <pre><code>lonlatsum = mapslices(sum, original, dims=(\"Lon\", \"Lat\"))\n</code></pre> <pre><code>YAXArray with the following dimensions\nTime                Axis with 100 Elements from 1 to 100\nTotal size: 800.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#how-to-combine-multiple-cubes-in-one-computation","title":"How to combine multiple cubes in one computation","text":""},{"location":"examples/generated/UserGuide/applyfunctions/#compute-the-mean-seasonal-cycle-for-one-sigle-pixel","title":"Compute the Mean Seasonal Cycle for one sigle pixel","text":"<pre><code>using CairoMakie\nCairoMakie.activate!()\nusing Dates\nusing Statistics\n</code></pre> <p>We define the data span. For simplicity, three non-leap years were selected.</p> <pre><code>t =  Date(\"2021-01-01\"):Day(1):Date(\"2023-12-31\")\nNpY = 3\n# create some seasonal dummy data\nx = repeat(range(0, 2\u03c0, length=365), NpY)\nvar = @. sin(x) + 0.1 * randn()\n\nlines(1:length(t), var; color = :purple, linewidth=1.25,\naxis=(; xlabel=\"Time\", ylabel=\"Variable\"),\nfigure = (; resolution = (600,400))\n)\n</code></pre> <p></p> <p>Currently makie doesn't support time axis natively, but the following function can do the work for now.</p> <pre><code>function time_ticks(dates; frac=8)\ntempo = string.(dates)\nlentime = length(tempo)\nslice_dates = range(1, lentime, step=lentime \u00f7 frac)\nreturn slice_dates, tempo[slice_dates]\nend\n\nxpos, ticks = time_ticks(t; frac=8)\n</code></pre> <pre><code>(1:136:1089, [\"2021-01-01\", \"2021-05-17\", \"2021-09-30\", \"2022-02-13\", \"2022-06-29\", \"2022-11-12\", \"2023-03-28\", \"2023-08-11\", \"2023-12-25\"])\n</code></pre> <p>In order to apply the previous output, we split the plotting function into his 3 components, <code>figure</code>, <code>axis</code> and <code>plotted object</code>, namely</p> <pre><code>fig, ax, obj = lines(1:length(t), var; color = :purple, linewidth=1.25,\naxis=(; xlabel=\"Time\", ylabel=\"Variable\"),\nfigure = (; resolution = (600,400))\n)\nax.xticks = (xpos, ticks)\nax.xticklabelrotation = \u03c0 / 4\nax.xticklabelalign = (:right, :center)\nfig\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#define-the-cube","title":"Define the cube","text":"<pre><code>axes = [RangeAxis(\"Time\", t)]\nc = YAXArray(axes, var)\n</code></pre> <pre><code>YAXArray with the following dimensions\nTime                Axis with 1095 Elements from 2021-01-01 to 2023-12-31\nTotal size: 8.55 KB\n</code></pre> <p>Let's calculate the mean seasonal cycle of our dummy variable 'var'</p> <pre><code>function mean_seasonal_cycle(c; ndays = 365)\n# filterig by month-day\nmonthday = map(x-&gt;Dates.format(x, \"u-d\"), collect(c.Time))\ndatesid = unique(monthday)\n# number of years\nNpY = Int(size(monthday,1)/ndays)\nidx = Int.(zeros(ndays, NpY))\n# get the day-month indices for data subsetting\nfor i in 1:ndays\nidx[i,:] = Int.(findall(x-&gt; x == datesid[i], monthday))\nend\n# compute the mean seasonal cycle\nmscarray = map(x-&gt;var[x], idx)\nmsc = mapslices(mean, mscarray, dims=2)\nreturn msc\nend\n\nmsc = mean_seasonal_cycle(c);\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#plot-results-mean-seasonal-cycle","title":"Plot results: mean seasonal cycle","text":"<pre><code>xpos, ticks = time_ticks(t[1:365]; frac=8)\n\nfig, ax, obj = lines(1:365, var[1:365]; label=\"2021\", color=:black,\nlinewidth=2.0, linestyle=:dot,\naxis = (;  xlabel=\"Time\", ylabel=\"Variable\"),\nfigure=(; resolution = (600,400))\n)\nlines!(1:365, var[366:730], label=\"2022\", color=:brown,\nlinewidth=1.5, linestyle=:dash\n)\nlines!(1:365, msc[:,1]; label=\"MSC\", color=:dodgerblue, lw=2.5)\naxislegend()\nax.xticks = (xpos, ticks)\nax.xticklabelrotation = \u03c0 / 4\nax.xticklabelalign = (:right, :center)\nfig\ncurrent_figure()\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/create_from_func/","title":"Generate a cube from function","text":"<pre><code>using YAXArrays, Zarr\nusing Dates\n</code></pre> <p>Define function in space and time</p> <pre><code>f(lo, la, t) = (lo + la + Dates.dayofyear(t))\n</code></pre> <pre><code>f (generic function with 1 method)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/create_from_func/#wrap-function-for-mapcube-output","title":"Wrap function for mapCube output","text":"<pre><code>function g(xout,lo,la,t)\nxout .= f.(lo,la,t)\nend\n</code></pre> <pre><code>g (generic function with 1 method)\n</code></pre> <p>Note the applied <code>.</code> after <code>f</code>, this is because we will slice across time, hence the application is broadcasted along this dimension.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/create_from_func/#create-cubes-axes","title":"Create Cube's Axes","text":"<p>We do this via <code>RangeAxis</code> for every dimension</p> <pre><code>lon = YAXArray(RangeAxis(\"lon\", range(1, 15)))\nlat = YAXArray(RangeAxis(\"lat\", range(1, 10)))\n</code></pre> <pre><code>YAXArray with the following dimensions\nlat                 Axis with 10 Elements from 1 to 10\nTotal size: 80.0 bytes\n</code></pre> <p>And a time Cube's Axes</p> <pre><code>tspan =  Date(\"2022-01-01\"):Day(1):Date(\"2022-01-30\")\ntime = YAXArray(RangeAxis(\"time\", tspan))\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nTotal size: 240.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/create_from_func/#generate-cube-from-function","title":"Generate Cube from function","text":"<p>The following generates a new <code>cube</code> using <code>mapCube</code> and saving the output directly to disk.</p> <pre><code>gen_cube = mapCube(g, (lon, lat, time);\nindims = (InDims(), InDims(), InDims(\"time\")),\noutdims = OutDims(\"time\", overwrite=true,\npath = \"my_gen_cube.zarr\", backend=:zarr, outtype=Float32),\n#max_cache=1e9\n)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nlon                 Axis with 15 Elements from 1 to 15\nlat                 Axis with 10 Elements from 1 to 10\nTotal size: 17.58 KB\n</code></pre> <p>time axis is first</p> <p>Note that currently the <code>time</code> axis in the output cube goes first.</p> <p>Check that it is working</p> <pre><code>gen_cube.data[1,:,:]\n</code></pre> <pre><code>15\u00d710 reshape(::Array{Union{Missing, Float32}, 3}, 15, 10) with eltype Union{Missing, Float32}:\n  3.0   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0\n  4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0\n  5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0\n  6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0\n  7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0\n  8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0\n  9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0\n 10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0\n 11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0\n 12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0\n 13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0\n 14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0\n 15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0\n 16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0\n 17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0  26.0\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/create_from_func/#generate-cube-change-output-order","title":"Generate Cube: change output order","text":"<p>The following generates a new <code>cube</code> using <code>mapCube</code> and saving the output directly to disk.</p> <pre><code>gen_cube = mapCube(g, (lon, lat, time);\nindims = (InDims(\"lon\"), InDims(), InDims()),\noutdims = OutDims(\"lon\", overwrite=true,\npath = \"my_gen_cube.zarr\", backend=:zarr, outtype=Float32),\n#max_cache=1e9\n)\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 15 Elements from 1 to 15\nlat                 Axis with 10 Elements from 1 to 10\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nTotal size: 17.58 KB\n</code></pre> <p>slicing dim</p> <p>Note that now the broadcasted dimension is <code>lon</code>.</p> <pre><code>gen_cube.data[:, :, 1]\n</code></pre> <pre><code>15\u00d710 reshape(::Array{Union{Missing, Float32}, 3}, 15, 10) with eltype Union{Missing, Float32}:\n  3.0   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0\n  4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0\n  5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0\n  6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0\n  7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0\n  8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0\n  9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0\n 10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0\n 11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0\n 12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0\n 13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0\n 14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0\n 15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0\n 16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0\n 17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0  26.0\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/creating/","title":"Creating YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/creating/#creating-yaxarrays-and-datasets","title":"Creating YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/creating/#creating-a-yaxarray","title":"Creating a YAXArray","text":"<pre><code>using YAXArrays\na = YAXArray(rand(10, 20, 5))\n</code></pre> <pre><code>YAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nDim_3               Axis with 5 Elements from 1 to 5\nTotal size: 7.81 KB\n</code></pre> <p>if not names are defined then default ones will be used, i.e. <code>Dim_1</code>, <code>Dim_2</code>. Get data from each Dimension with</p> <pre><code>a.Dim_1\n</code></pre> <pre><code>10-element RangeAxis{Int64, :Dim_1, Base.OneTo{Int64}}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n</code></pre> <p>or with</p> <pre><code>getproperty(a, :Dim_1)\n</code></pre> <pre><code>10-element RangeAxis{Int64, :Dim_1, Base.OneTo{Int64}}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#creating-a-yaxarray-with-named-axis","title":"Creating a YAXArray with named axis","text":"<p>The two most used axis are <code>RangeAxis</code> and <code>CategoricalAxis</code>. Here, we use a combination of them to create a <code>time</code>, <code>lon</code> and <code>lat</code> axis and a Categorical Axis for two variables.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#axis-definitions","title":"Axis definitions","text":"<pre><code>using Dates\naxlist = [\nRangeAxis(\"time\", Date(\"2022-01-01\"):Day(1):Date(\"2022-01-30\")),\nRangeAxis(\"lon\", range(1, 10, length=10)),\nRangeAxis(\"lat\", range(1, 5, length=15)),\nCategoricalAxis(\"Variable\", [\"var1\", \"var2\"])\n]\n</code></pre> <pre><code>4-element Vector{CubeAxis}:\n time                Axis with 30 Elements from 2022-01-01 to 2022-01-30\n lon                 Axis with 10 Elements from 1.0 to 10.0\n lat                 Axis with 15 Elements from 1.0 to 5.0\n Variable            Axis with 2 elements: var1 var2 \n</code></pre> <p>And the corresponding data</p> <pre><code>data = rand(30, 10, 15, 2)\nds = YAXArray(axlist, data)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nVariable            Axis with 2 elements: var1 var2 \nTotal size: 70.31 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#select-variables","title":"Select variables","text":"<pre><code>ds[Variable = \"var1\", lon = (1,2.1)]\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nlon                 Axis with 2 Elements from 1.0 to 2.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 7.03 KB\n</code></pre>"},{"location":"examples/generated/UserGuide/creating/#indexing-and-subsetting","title":"Indexing and subsetting","text":"<p>As for most array types, YAXArray also provides special indexing behavior   when using the square brackets for indexing.  Assuming that <code>c</code> is a YAXArray,   there are 3 different semantics to use the square brackets with, depending on   the types of the arguments provided to getindex.</p> <ol> <li>Ranges and Integers only as for example <code>c[1,4:8,:]</code> will access the underlying data according to the provided index in index space and read the</li> </ol> <p>data into memory as a plain Julia Array. It is equivalent to <code>c.data[1,4:8,:]</code>.</p> <ol> <li>Keyword arguments with values or Intervals as for example <code>c[longitude = 30..50, time=Date(2005,6,1), variable=\"air_temperature\"]</code>.</li> </ol> <p>This always creates a view into the specified subset of the data and   return a new YAXArray with new axes without reading the data. Intervals and   values are always interpreted in the units as provided by the axis values.</p> <ol> <li>A Tables.jl-compatible object for irregular extraction of a list of points or sub-arrays and random locations.</li> </ol> <p>For example calling <code>c[[(lon=30,lat=42),(lon=-50,lat=2.5)]]</code> will extract data at the specified coordinates and along all additional axes into memory.   It returns a new YAXArray with a new Multi-Index axis along the selected   longitudes and latitudes.</p> <p>Info</p> <p>Overall, selecting elements in YAXArrays is brittle.   Hence using DimensionalData.jl and YAXArrayBase.jl is recomended.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#select-variables-with-dimensionaldatajl","title":"Select variables with DimensionalData.jl","text":"<pre><code>using DimensionalData, YAXArrayBase\n</code></pre> <p>First we wrap the yaxarray into a DimArray via</p> <pre><code>dim = yaxconvert(DimArray, ds)\n</code></pre> <pre><code>30\u00d710\u00d715\u00d72 DimArray{Float64,4} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:Variable} Categorical{String} String[\"var1\", \"var2\"] ForwardOrdered\n[:, :, 1, 1]\n                      1.0        \u2026  8.0          9.0       10.0\n  2022-01-01  0.983168      0.000412203  0.887738   0.0499707\n  2022-01-02  0.682249      0.619416     0.212247   0.736721\n  2022-01-03  0.609211      0.340381     0.427748   0.604847\n \u22ee                               \u22f1                          \u22ee\n  2022-01-27  0.356538   \u2026  0.209179     0.264471   0.692029\n  2022-01-28  0.158023      0.157526     0.715724   0.840579\n  2022-01-29  0.513868      0.678145     0.771949   0.409703\n  2022-01-30  0.0508045     0.820546     0.284301   0.732006\n[and 29 more slices...]\n</code></pre> <p>Now, the syntax from DimensionalData.jl just works</p> <pre><code>subset = dim[\ntime = Between( Date(\"2022-01-01\"),  Date(\"2022-01-10\")),\nlon=Between(1,2),\nVariable = At(\"var2\")\n]\n</code></pre> <pre><code>10\u00d72\u00d715 DimArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-10\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:2.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nand reference dimensions: \n  Dim{:Variable} Categorical{String} String[\"var2\"] ForwardOrdered\n[:, :, 1]\n                      1.0       2.0\n  2022-01-01  0.166316  0.296807\n  2022-01-02  0.173826  0.46596\n \u22ee                              \n  2022-01-09  0.061522  0.223284\n  2022-01-10  0.275341  0.436815\n[and 14 more slices...]\n</code></pre> <p>And going back to our YAXArray view is done with</p> <pre><code>yax = yaxconvert(YAXArray, subset)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 10 Elements from 2022-01-01 to 2022-01-10\nlon                 Axis with 2 Elements from 1.0 to 2.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 2.34 KB\n</code></pre> <p>This will be supported by default in the next release.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#properties-attributes","title":"Properties / Attributes","text":"<p>You might also want to add additional properties to your YAXArray. This can be done via a Dictionary, namely</p> <pre><code>props = Dict(\n\"time\" =&gt; \"days\",\n\"lon\" =&gt; \"longitude\",\n\"lat\" =&gt; \"latitude\",\n\"var1\" =&gt; \"first variable\",\n\"var2\" =&gt; \"second variable\",\n)\n</code></pre> <pre><code>Dict{String, String} with 5 entries:\n  \"lat\"  =&gt; \"latitude\"\n  \"var1\" =&gt; \"first variable\"\n  \"time\" =&gt; \"days\"\n  \"var2\" =&gt; \"second variable\"\n  \"lon\"  =&gt; \"longitude\"\n</code></pre> <p>Then the <code>yaxarray</code> with properties is assemble with</p> <pre><code>ds = YAXArray(axlist, data, props)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 30 Elements from 2022-01-01 to 2022-01-30\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nVariable            Axis with 2 elements: var1 var2 \nTotal size: 70.31 KB\n</code></pre> <p>Access these properties with</p> <pre><code>ds.properties\n</code></pre> <pre><code>Dict{String, String} with 5 entries:\n  \"lat\"  =&gt; \"latitude\"\n  \"var1\" =&gt; \"first variable\"\n  \"time\" =&gt; \"days\"\n  \"var2\" =&gt; \"second variable\"\n  \"lon\"  =&gt; \"longitude\"\n</code></pre> <p>Note that this properties are shared for both variables <code>var1</code> and <code>var2</code>. Namely, this are global properties for your yaxarray. However, in most cases you will want to pass properties for each variable, here we will do this via Datasets.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#creating-a-dataset","title":"Creating a Dataset","text":"<p>Let's define first some range axis</p> <pre><code>axs = [\nRangeAxis(\"lon\", range(0,1, length=10)),\nRangeAxis(\"lat\", range(0,1, length=5)),\n]\n</code></pre> <pre><code>2-element Vector{RangeAxis{Float64, S, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}} where S}:\n lon                 Axis with 10 Elements from 0.0 to 1.0\n lat                 Axis with 5 Elements from 0.0 to 1.0\n</code></pre> <p>And two toy random <code>YAXArrays</code> to assemble our dataset</p> <pre><code>t2m = YAXArray(axs, rand(10,5), Dict(\"units\" =&gt; \"K\", \"reference\" =&gt; \"your references\"))\nprec = YAXArray(axs, rand(10,5), Dict(\"units\" =&gt; \"mm\", \"reference\" =&gt; \"your references\"))\n\nds = Dataset(t2m=t2m, prec= prec, num = YAXArray(rand(10)),\nproperties = Dict(\"space\"=&gt;\"lon/lat\", \"reference\" =&gt; \"your global references\"))\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nVariables: \nt2m\n \u2514\u2500\u2500 lon                 Axis with 10 Elements from 0.0 to 1.0\n \u2514\u2500\u2500 lat                 Axis with 5 Elements from 0.0 to 1.0\nprec\n \u2514\u2500\u2500 lon                 Axis with 10 Elements from 0.0 to 1.0\n \u2514\u2500\u2500 lat                 Axis with 5 Elements from 0.0 to 1.0\nnum\n \u2514\u2500\u2500 Dim_1               Axis with 10 Elements from 1 to 10\n\nProperties: reference =&gt; your global references space =&gt; lon/lat \n</code></pre> <p>Note that the YAXArrays used not necessarily shared the same dimensions. Hence, using a Dataset if more versatile than a plain YAXArray.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#selected-variables-into-a-data-cube","title":"Selected Variables into a Data Cube","text":"<p>Being able to collect variables that share dimensions into a data cube is possible with</p> <pre><code>c = Cube(ds[[\"t2m\", \"prec\"]])\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 10 Elements from 0.0 to 1.0\nlat                 Axis with 5 Elements from 0.0 to 1.0\nVariable            Axis with 2 elements: t2m prec \nunits: mm\nTotal size: 800.0 bytes\n</code></pre> <p>or simply the one that does not share all dimensions</p> <pre><code>Cube(ds[[\"num\"]])\n</code></pre> <pre><code>YAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nTotal size: 80.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#variable-properties","title":"Variable properties","text":"<pre><code># Access to variables properties is done via\nCube(ds[[\"t2m\"]]).properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"units\"     =&gt; \"K\"\n  \"reference\" =&gt; \"your references\"\n</code></pre> <p>and</p> <pre><code>Cube(ds[[\"prec\"]]).properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"units\"     =&gt; \"mm\"\n  \"reference\" =&gt; \"your references\"\n</code></pre> <p>Note also that the global properties for the Dataset are accessed with</p> <pre><code>ds.properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"reference\" =&gt; \"your global references\"\n  \"space\"     =&gt; \"lon/lat\"\n</code></pre> <p>Saving and different chunking modes are discussed in here.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/distributed/","title":"Distributed processes","text":""},{"location":"examples/generated/UserGuide/distributed/#how-to-calculate-a-time-mean","title":"How to calculate a time mean","text":"<pre><code>using YAXArrays, Statistics, Zarr\nusing Dates\naxlist = [\nRangeAxis(\"time\", Date(\"2022-01-01\"):Day(1):Date(\"2022-01-30\")),\nRangeAxis(\"lon\", range(1, 10, length=10)),\nRangeAxis(\"lat\", range(1, 5, length=15)),\nCategoricalAxis(\"Variable\", [\"var1\", \"var2\"])\n]\n</code></pre> <pre><code>4-element Vector{CubeAxis}:\n time                Axis with 30 Elements from 2022-01-01 to 2022-01-30\n lon                 Axis with 10 Elements from 1.0 to 10.0\n lat                 Axis with 15 Elements from 1.0 to 5.0\n Variable            Axis with 2 elements: var1 var2 \n</code></pre> <p>And the corresponding data</p> <pre><code>data = rand(30, 10, 15, 2)\nds = YAXArray(axlist, data)\n\nc = ds[Variable = \"var1\"] # see OpenNetCDF to get the file\nmapslices(mean \u2218 skipmissing, c, dims=\"Time\")\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 1.17 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/distributed/#distributed-calculations","title":"Distributed calculations","text":"<p>It is possible to distribute the calculations over multiple process. The following code does a time mean over all grid points using multiple CPU over a local machine.</p> <pre><code>#using Distributed\n#addprocs(2)\n#@everywhere using Pkg\n#@everywhere Pkg.activate(\".\")\n#@everywhere begin\n</code></pre> <p>using NetCDF   using YAXArrays   using Statistics   using Zarr</p> <pre><code>#end\n#@everywhere function mymean(output, pixel)\n</code></pre> <p>@show \"doing a mean\"      output[:] .= mean(pixel)</p> <pre><code>#end\n#indims = InDims(\"time\")\n#outdims = OutDims()\n#resultcube = mapCube(mymean, c, indims=indims, outdims=outdims)\n</code></pre> <p>In the last example, <code>mapCube</code> was used to map the <code>mymean</code> function. <code>mapslices</code> is a convenient function that can replace <code>mapCube</code>, where you can omit defining an extra function with the output argument as an input (e.g. <code>mymean</code>). It is possible to simply use <code>mapslice</code></p> <pre><code>resultcube = mapslices(mean \u2218 skipmissing, c, dims=\"time\")\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 10 Elements from 1.0 to 10.0\nlat                 Axis with 15 Elements from 1.0 to 5.0\nTotal size: 1.17 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/distributed/#slurm-cluster","title":"SLURM cluster","text":"<p>It is also possible to distribute easily the workload on a cluster, with little modification to the code. The following code does a time mean over all grid points using multiple CPU over a SLURM cluster. To do so, we use the <code>ClusterManagers</code> package.</p> <pre><code>#using Distributed\n#using ClusterManagers\n#addprocs(SlurmManager(10))\n#@everywhere using Pkg\n#@everywhere Pkg.activate(\".\")\n#@everywhere using ESDL\n#@everywhere using Statistics\n#inpath=\"zg1000_AERday_CanESM5_esm-hist_r6i1p1f1_gn_18500101-20141231.nc\"\n#c = Cube(inpath, \"zg1000\")\n#resultcube = mapslices(mean \u2218 skipmissing, c, dims=\"time\")\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/","title":"Examples from ESDL study 1","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/#examples-from-the-esdl-paper","title":"Examples from the ESDL paper","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/#earth-syst-dynam-11-201234-2020-doi","title":"Earth Syst. Dynam., 11, 201\u2013234, 2020 doi","text":"<p>NOTE: This section is based on the case studies from the paper \"Earth system data cubes unravel global multivariate dynamics\" by Mahecha, Gans et al. (2019). Original scripts are available at https://github.com/esa-esdl/ESDLPaperCode.jl.</p> <ul> <li>We have slightly adjusted the scripts. A few differences are that these new scripts are updated to Julia 1.9, and the YAXArrays.jl package is used.</li> <li>The dataset has been updated but it has less available variables. Therefore the results might differ.</li> <li>The calculations are performed with a very coarse spatial (2.5\u00b0) and temporal resolution (monthly).</li> <li>These are examples for illustrative purposes of the packages and do not intend any deeper scientific interpretation. For scientific analysis use the higher spatio-temporal resolution datasets.</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/#case-study-1-seasonal-dynamics-on-the-land-surface","title":"Case study 1: Seasonal dynamics on the land surface","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/#based-on-simple-seasonal-statistics","title":"Based on simple seasonal statistics","text":"<ul> <li>The code is written based on Julia 1.9</li> <li>Normal text are explanations referring to notation and equations in the paper</li> <li><code># comments in the code are itended explain specific aspects of the coding</code></li> <li>New steps in workflows are introduced with bold headers</li> </ul> <p>Load requiered packages</p> <pre><code>using Pkg\n\n# for plotting later on (need to be loaded first, to avoid conflicts)\nusing PyCall, PyPlot, PlotUtils\n\n# for operating data cubes\nusing Zarr, YAXArrays\nusing EarthDataLab\n\n# for data analysis\nusing Statistics, Dates, SkipNan\n</code></pre> <p>Next we get a handle to the Earth System Data Cube we want to use, which provides a description of the cube:</p> <pre><code>cube_handle = esdc(res=\"tiny\")\n\n# if we want the names of the variables:\nprintln(getAxis(\"Var\", cube_handle).values)\n</code></pre> <pre><code>[\"sensible_heat\", \"potential_evaporation\", \"evaporation\", \"root_moisture\", \"radiation_era5\", \"sif_rtsif\", \"open_water_evaporation\", \"nbar_swir1\", \"latent_energy\", \"max_air_temperature_2m\", \"nbar_blue\", \"cth\", \"nirv\", \"aerosol_optical_thickness_550\", \"ctt\", \"air_temperature_2m\", \"nbar_swir3\", \"nbar_red\", \"evaporative_stress\", \"precipitation_era5\", \"nbar_green\", \"terrestrial_ecosystem_respiration\", \"gross_primary_productivity\", \"ndvi\", \"bare_soil_evaporation\", \"nbar_swir2\", \"sif_gosif\", \"sif_gome2_jj\", \"net_radiation\", \"cot\", \"kndvi\", \"sif_gome2_pk\", \"evaporation_era5\", \"transpiration\", \"surface_moisture\", \"nbar_nir\", \"interception_loss\", \"min_air_temperature_2m\", \"sm\", \"burnt_area\", \"net_ecosystem_exchange\", \"snow_sublimation\"]\n</code></pre> <p>We decide which variables to plot:</p> <pre><code>vars = [\"gross_primary_productivity\", \"air_temperature_2m\", \"surface_moisture\"]\n\n# time based on data span availability\ntime_overlap = Date(\"2001-01-01\")..Date(\"2020-12-31\")\n</code></pre> <pre><code>2001-01-01..2020-12-31\n</code></pre> <p>So we \"virtually get\" the cube data virtually:</p> <pre><code>cube_subset = subsetcube(cube_handle, variable=vars, time=time_overlap)\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\ntime                Axis with 460 Elements from 2001-01-09T00:00:00 to 2020-12-26T00:00:00\nVariable            Axis with 3 elements: gross_primary_productivity air_temperature_2m surface_moisture \nunits: mm d^-1\nTotal size: 54.58 MB\n</code></pre> <p>The next function estimates the median seasonal cycle. This changes the dimension of the cube, as the time domain is replaced by day of year (doy); Eq. 9 in the manuscript: :$     f_{{time}}^{{doy}} : \\mathcal{C}({lat, lon, time, var}) \\rightarrow \\mathcal{C}({lat, lon, doy, var}) :$</p> <p>median seasonal cycle built-in function</p> <pre><code>cube_msc = getMedSC(cube_subset)\n</code></pre> <pre><code>YAXArray with the following dimensions\nMSC                 Axis with 23 Elements from 1900-01-01T00:00:00 to 1900-12-19T00:00:00\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 3 elements: gross_primary_productivity air_temperature_2m surface_moisture \nTotal size: 2.73 MB\n</code></pre> <p>The resulting cube <code>cube_msc</code> has is of the form \\(\\mathcal{C}(\\{lat, lon, doy, var\\})\\). On this cube we want to apply function <code>nan_med</code> (see below) to estimate latitudinal averages for all variables. The atomic function (Eq. 10) needs to have the form, i.e. expecting a longitude and returning a scalar: :$     f_{{lon}}^{{}} : \\mathcal{C}({lat, lon, doy, var}) \\rightarrow \\mathcal{C}({lat, doy, var}) :$</p> <pre><code>import Statistics.median\ncube_msc_lat = mapslices(median \u2218 skipmissing, cube_msc, dims = \"Lon\")\n</code></pre> <pre><code>YAXArray with the following dimensions\nMSC                 Axis with 23 Elements from 1900-01-01T00:00:00 to 1900-12-19T00:00:00\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 3 elements: gross_primary_productivity air_temperature_2m surface_moisture \nTotal size: 19.41 KB\n</code></pre> <p>The result of each operation on a data cube is a data cube. Here the resulting cube has the form \\(\\mathcal{C}(\\{doy, lat, var\\})\\) as expected but in different order, which is, irrelevant as axes have no natural order.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_1/#visualization","title":"Visualization","text":"<p>At this point we leave the <code>Earth Data Lab</code> and and go for visualizations. Using PyPlot we can generate fig. 3 of the paper, the data can be exatracted from the resutls cube via array-access <code>A[:, :]</code>.</p> <pre><code># Create a plot and make it a polar plot\nfunction zonal_polar_plot(d_msc_lat, sbp, it, vari, lab)\n\nax = subplot(sbp, polar = \"true\")\nourcmap = ColorMap(get_cmap(\"Spectral_r\", 72))\n\n# set polar ticks and labels\nmonth_ang = 0:11\nmonth_ang = month_ang .* (360/12)\nmonth_lab = [\"Jan\"; \"Feb\"; \"Mar\"; \"Apr\"; \"May\"; \"Jun\"; \"Jul\"; \"Aug\"; \"Sep\"; \"Oct\"; \"Nov\"; \"Dec\"]\n\n# tuning\nax.set_yticklabels([])\nax.set_thetagrids(angles = month_ang,\nlabels = month_lab,\n#rotation = month_ang\n)\n\n# set Jan to the top of the plot\nax.set_theta_zero_location(\"N\")\n\n# switch to clockwise\nax.set_theta_direction(-1)\n\n# color setup\nif isequal(vari, \"gross_primary_productivity\")\nN_min = 0\nN_max = 8\nN_var = 8\nelseif isequal(vari, \"air_temperature_2m\")\nN_min = -35\nN_max = 35\nN_var = 15\nelseif isequal(vari, \"surface_moisture\")\nN_min = 0\nN_max = 50\nN_var = 10\nend\n\n# background setup\n\n# define time (all could be done more elegantly in julia I guess... )\ntime_ang = range(0, stop = 12, step = 0.25)\nN_time   = length(time_ang)\ntime_ang = time_ang .* (360/12)\ntime_rad = time_ang .* (pi / 180)\n\n# create a continous var for the background\nN_div  = N_time*10\ny      = range(N_min, stop = N_max, length = N_div)\n\n# grid to fill the polar plot\nxgrid  = repeat(time_rad', N_div, 1)\nygrid  = repeat(y, 1, N_time)\n\n# a grid of NaNs to make an extra colorbar later\nnangrid  = zeros(size(ygrid)).*NaN\nlevels   = range(-90, stop = 90, step = 10)\nticks    = range(-80, stop = 80, step = 20)\n\naxsurf2 = ax.contourf(xgrid, ygrid, ygrid.*NaN, N_max,\ncmap = ourcmap,\nlevels = levels,\nticks = ticks)\n\n# background to the range of values\nif isequal(vari, \"gross_primary_productivity\")\naxsurf = ax.contourf(xgrid, ygrid, ygrid, N_max,\ncmap = ColorMap(\"gray_r\"),\nextend = \"max\")\nelseif isequal(vari, \"air_temperature_2m\")\naxsurf = ax.contourf(xgrid, ygrid, ygrid, N_max,\ncmap = ColorMap(\"gray_r\"),\nextend = \"both\")\nelseif isequal(vari, \"surface_moisture\")\naxsurf = ax.contourf(xgrid, ygrid, ygrid, N_max,\ncmap = ColorMap(\"gray_r\"),\nextend = \"max\")\nend\n\n# colorbar setup\nif isodd(sbp)\n# add forground colorbar\ncban = colorbar(axsurf2, fraction = 0.05, shrink = 0.5, pad = 0.18)\ncban.ax.set_title(label = \"Latitude\")\ncban.set_ticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\ncban.set_ticklabels([\"80\u00b0N\", \"60\u00b0N\", \"40\u00b0N\", \"20\u00b0N\", \"0\u00b0\", \"20\u00b0S\", \"40\u00b0S\", \"60\u00b0S\", \"80\u00b0S\"])\ncban.ax.invert_yaxis()\nelse\n# add background colorbar\ncbsurf = colorbar(axsurf, fraction = 0.05, shrink = 0.5, pad = 0.18)\nif  vari == \"gross_primary_productivity\"\ncbsurf.ax.set_title(label = \"GPP\")\ncbsurf.set_label(label = \"g C / (m2 d)\", rotation=270, labelpad=+20)\nelseif vari == \"air_temperature_2m\"\ncbsurf.ax.set_title(label = \"Tair\")\ncbsurf.set_label(label = \"\u00b0C\", rotation = 270, labelpad=+20)\nelseif vari == \"surface_moisture\"\ncbsurf.ax.set_title(label = \"Surf. Moist.\")\ncbsurf.set_label(label = \"[]\", rotation = 270, labelpad=+20)\ncbsurf.set_ticks([0, 10, 20, 30, 40, 50])\ncbsurf.set_ticklabels([\"0\", \"0.1\", \"0.2\", \"0.3\", \"0.4\", \"0.5\"])\nend\nend\n\n# forground setup\n\n# plot the real data\nN_msc = size(d_msc_lat)[1]\ntime_ang_dat = range(1/N_msc, step = 1/N_msc, length = N_msc)\ntime_ang_dat = time_ang_dat .* (360)\ntime_rad_dat = time_ang_dat .* (pi / 180)\ntime_rad_dat = [time_rad_dat; time_rad_dat[1]]\n\n# add your data\nfor j = it\njj = convert(Int, j)\ntry\nvar_idx = findall(vari .== getAxis(\"Variable\", d_msc_lat).values)[1]\nts = d_msc_lat[:, jj, var_idx]\nva = [ts; ts[1]]\n# correction for temperature\nif isequal(vari, \"air_temperature_2m\")\nva = va.-273.15\nelseif isequal(vari, \"surface_moisture\")\nva = va.*100\nend\np  = ax.plot(time_rad_dat, va,\ncolor = ourcmap(jj),\nlinewidth = 0.8)\ncatch\nend\nend\n\nend\n</code></pre> <pre><code>zonal_polar_plot (generic function with 1 method)\n</code></pre> <p>create a new figure</p> <pre><code>f1 = figure(\"polar_lineplot_new\", figsize = (10, 15))\n</code></pre> <pre><code>PyPlot.Figure(PyObject &lt;Figure size 1000x1500 with 0 Axes&gt;)\n</code></pre> <p>get the latitude values for which we have data</p> <pre><code>L = collect(getAxis(\"lat\", caxes(cube_msc_lat)).values)\n\nsbps = 321:2:332\nlabtoshow = [\"a)\", \"b)\", \"c)\", \"d)\", \"e)\", \"f)\"]\nvari = getAxis(\"Variable\", caxes(cube_msc_lat)).values\n\nfor (sbp, lab, vari) in zip(sbps, labtoshow, vari)\nit1 = range(72/2, stop = 1, step = -2)\nit2 = range(72/2+1, stop = 72, step = 2)\nzonal_polar_plot(cube_msc_lat, sbp, it1, vari, lab)\nzonal_polar_plot(cube_msc_lat, sbp+1, it2, vari, lab)\nend\n\nf1\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/","title":"Examples from ESDL study 2","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#examples-from-the-esdl-paper-mahecha-gans-et-al-earth-syst-dynam-11-201234-2020","title":"Examples from the ESDL paper (Mahecha, Gans et al. Earth Syst. Dynam., 11, 201\u2013234, 2020)","text":"<p>NOTE: This section is based on the case studies from the paper \"Earth system data cubes unravel global multivariate dynamics\" by Mahecha, Gans et al. (2019), available here.</p> <ul> <li>We have slightly adjusted the scripts. A few differences are that these new scripts are updated to Julia 1.9, and the YAXArrays.jl package is used.</li> <li>The dataset has been updated but it has less available variables. Therefore the results might differ.</li> <li>The calculations are performed with a very coarse spatial (2.5\u00b0) and temporal resolution (monthly).</li> <li>These are examples for illustrative purposes of the packages and do not intend any deeper scientific interpretation. For scientific analysis use the higher spatio-temporal resolution datasets.</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#case-study-2-intrinsic-dimensions-of-ecosystem-dynamics","title":"Case study 2: Intrinsic dimensions of ecosystem dynamics","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#as-estimate-based-on-pcas","title":"As estimate based on PCAs","text":"<ul> <li>Script to reproduce and understand examples in the paper Earth system data cubes unravel global multivariate dynamics .</li> <li>The code is written on Julia 1.9</li> <li>Normal text are explanations referring to notation and equations in the paper</li> <li><code># comments in the code are intended to explain specific aspects of the coding</code></li> <li> </li> </ul> <pre><code># Load requiered packages\nusing Pkg\n\n# for operating data cubes\nusing Zarr, YAXArrays\n\n# for operating the Earth system data lab\nusing EarthDataLab\n\n# for data analysis\nusing Statistics, MultivariateStats, Dates, SkipNan\n\n# for plotting later\nusing CairoMakie\nCairoMakie.activate!()\nusing GeoMakie\n</code></pre> <p>In this study we investigate the redundancy of the different variables in each pixel. Therefore we calculate a linear dimensionality reduction (PCA) and check how many dimensions are needed to explain 90% of the variance of a cube that contained originally 11 variables.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#new-steps-in-workflows-are-introduced-with-bold-headers","title":"New steps in workflows are introduced with bold headers","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#select-and-prepare-subsetgapfill-an-earth-system-data-cube","title":"Select and prepare (subset/gapfill) an Earth system data cube.","text":"<p>We need to choose a cube and here select a monthly, 2.5\u00b0 resolution global cube. This very low resolution cube aims at rapid processing for the safe of time and computational resources.</p> <pre><code>cube_handle = esdc(res=\"tiny\")\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\ntime                Axis with 989 Elements from 1979-01-09T00:00:00 to 2021-12-27T00:00:00\nVariable            Axis with 42 elements: sensible_heat potential_evaporation .. net_ecosystem_exchange snow_sublimation \nunits: mm d^-1\nTotal size: 1.6 GB\n</code></pre> <p>Check which variables are avaiable in the data cube:</p> <pre><code># if we want the names of the variables:\nprintln(getAxis(\"Var\", cube_handle).values)\n</code></pre> <pre><code>[\"sensible_heat\", \"potential_evaporation\", \"evaporation\", \"root_moisture\", \"radiation_era5\", \"sif_rtsif\", \"open_water_evaporation\", \"nbar_swir1\", \"latent_energy\", \"max_air_temperature_2m\", \"nbar_blue\", \"cth\", \"nirv\", \"aerosol_optical_thickness_550\", \"ctt\", \"air_temperature_2m\", \"nbar_swir3\", \"nbar_red\", \"evaporative_stress\", \"precipitation_era5\", \"nbar_green\", \"terrestrial_ecosystem_respiration\", \"gross_primary_productivity\", \"ndvi\", \"bare_soil_evaporation\", \"nbar_swir2\", \"sif_gosif\", \"sif_gome2_jj\", \"net_radiation\", \"cot\", \"kndvi\", \"sif_gome2_pk\", \"evaporation_era5\", \"transpiration\", \"surface_moisture\", \"nbar_nir\", \"interception_loss\", \"min_air_temperature_2m\", \"sm\", \"burnt_area\", \"net_ecosystem_exchange\", \"snow_sublimation\"]\n</code></pre> <p>Having the variable names allows us to make a selection, such that we can subset the global cube. We should also take care that the variables are as complete as possible in the time window we analyze. This has been explored a priori.</p> <pre><code># vector of variables we will work with\nvars = [\"evaporative_stress\",\n\"latent_energy\",\n\"root_moisture\",\n\"transpiration\",\n\"sensible_heat\",\n\"bare_soil_evaporation\",\n\"net_radiation\",\n\"net_ecosystem_exchange\",\n\"evaporation\",\n\"terrestrial_ecosystem_respiration\",\n\"gross_primary_productivity\",\n];\n\n# time window where most of them are complete\ntimespan = Date(\"2003-01-01\")..Date(\"2011-12-31\")\n\n# subset the grand cube and get the cube we will analyse here\ncube_subset = subsetcube(cube_handle, time = timespan, variable = vars)\n\nprintln(getAxis(\"Var\", cube_subset).values)\n</code></pre> <pre><code>[\"evaporative_stress\", \"latent_energy\", \"root_moisture\", \"transpiration\", \"sensible_heat\", \"bare_soil_evaporation\", \"net_radiation\", \"net_ecosystem_exchange\", \"evaporation\", \"terrestrial_ecosystem_respiration\", \"gross_primary_productivity\"]\n</code></pre> <p>An important preprocessing step is gapfilling. We do not want to enter the debate on the optimal gapfilling method. What we do here is gapfilling first with the mean seasonal cycle (where it can be estimated), and interpolating long-recurrent gaps (typically in winter seasons). use the EarthDataLab buit-in function</p> <pre><code>@time cube_fill = gapFillMSC(cube_subset)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 207 Elements from 2003-01-09T00:00:00 to 2011-12-27T00:00:00\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 11 elements: evaporative_stress latent_energy .. terrestrial_ecosystem_respiration gross_primary_productivity \nTotal size: 90.06 MB\n</code></pre> <p>The interpolation of wintergaps needs a function that we code here an call <code>LinInterp</code>.</p> <pre><code>using Interpolations\n\nfunction LinInterp(y)\n\ntry\n# find the values we need to input\nidx_nan = findall(ismissing, y)\nidx_ok  = findall(!ismissing, y)\n\n# make sure to have a homogenous input array\ny2 = Float64[y[i] for i in idx_ok]\n\n# generate an interpolation object based on the good data\nitp = extrapolate(interpolate((idx_ok,), y2, Gridded(Linear())),Flat())\n\n# fill the missing values based on a linter interpolation\ny[idx_nan] = itp(idx_nan)\nreturn y\ncatch\nidx_nan = findall(ismissing, y)\ny[idx_nan] .= mean(skipmissing(y))\nreturn y\nend\nend\n</code></pre> <pre><code>LinInterp (generic function with 1 method)\n</code></pre> <p>The function <code>LiInterp</code> can now be applied on each time series, so we would have a rather trival mapping of the form:</p> \\[\\begin{equation}   f_{{time}}^{{time}} : \\mathcal{C}({lat, lon, time, var}) \\rightarrow \\mathcal{C}({lat, lon, time, var}). \\end{equation}\\] <p>For operations of this kind, the best is to use the <code>mapslices</code> function. In the EarthDataLab package, this function needs the input function, the cube handle, and an indication on which dimension we would apply it. The function can then infer that the output dimension here is also an axis of type <code>Time</code>:</p> <pre><code>cube_fill_itp = mapslices(LinInterp, cube_fill, dims = \"Time\")\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 207 Elements from 2003-01-09T00:00:00 to 2011-12-27T00:00:00\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 11 elements: evaporative_stress latent_energy .. terrestrial_ecosystem_respiration gross_primary_productivity \nTotal size: 90.06 MB\n</code></pre> <p>As we describe in the paper, we estimate the intrinsic dimensions from the raw, yet gapfilled, data cube (<code>cube_fill_itp</code>), but also based on spectrally decomposed data. The decomposition via discrete FFTs is an atomic operation of the following form (Eq. 12),</p> \\[\\begin{equation}   f_{{time}}^{{time, freq}} : \\mathcal{C}({lat, lon, time, var}) \\rightarrow \\mathcal{C}({lat, lon, time, var, freq}). \\end{equation}\\] <p>which can be done using a pre-implemented EarthDataLab function. Note that this step will use a lot of computing time.</p> <pre><code>cube_decomp = filterTSFFT(cube_fill_itp)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 207 Elements from 2003-01-09T00:00:00 to 2011-12-27T00:00:00\nScale               Axis with 4 elements: Trend Long-Term Variability Annual Cycle Fast Oscillations \nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 11 elements: evaporative_stress latent_energy .. terrestrial_ecosystem_respiration gross_primary_productivity \nTotal size: 360.23 MB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#estimate-intrinsic-dimension-via-pca","title":"Estimate intrinsic dimension via PCA","text":"<p>For estimating the intrinsic estimation via PCA from a multivariate time series we need essentially two atomic functions. First, dimensionality reduction,</p> \\[\\begin{equation}      f_{{time, var}}^{{time, princomp }} : \\mathcal{C}({time, var}) \\rightarrow \\mathcal{C}({time, princomp}) \\end{equation}\\] <p>And second estimating from the reduced space the number of dimensions that represent more variance than the threshold (for details see paper): \\begin{equation}      f_{{time, princomp}}^{{ }} : \\mathcal{C}({time, var}) \\rightarrow \\mathcal{C}({int dim}) \\end{equation}</p> <p>However, we as both steps emerge from the same analysis it is more efficient to wrap these two steps in a single atomic functions which has the structure: \\begin{equation}      f_{{time, var}}^{{ }} : \\mathcal{C}({time, var}) \\rightarrow \\mathcal{C}({}) \\end{equation}</p> <p>We can now apply this to the cube: The latter was the operation described in the paper (Eq. 11) as</p> \\[\\begin{equation}      f_{{time, var}}^{{ }} : \\mathcal{C}({lat, lon, time, var}) \\rightarrow \\mathcal{C}({lat, lon}) \\end{equation}\\] <pre><code>function sufficient_dimensions(xin::AbstractArray, expl_var::Float64 = 0.95)\n\nany(ismissing,xin) &amp;&amp; return NaN\nnpoint, nvar = size(xin)\nmeans = mean(xin, dims = 1)\nstds  = std(xin,  dims = 1)\nxin   = broadcast((y,m,s) -&gt; s&gt;0.0 ? (y-m)/s : one(y), xin, means, stds)\npca = fit(PCA, xin', pratio = 0.999, method = :svd)\nreturn findfirst(cumsum(principalvars(pca)) / tprincipalvar(pca) .&gt; expl_var)\nend\n</code></pre> <pre><code>sufficient_dimensions (generic function with 2 methods)\n</code></pre> <p>We first apply the function <code>cube_decomp</code> to the standard data cube with the threshold of 95% of retained variance. As we see from the description of the atomic function above, we need as minimum input dimension <code>Time</code> and <code>Variable</code>. We call the output cube <code>cube_int_dim</code>, which efficiently is a map.</p> <pre><code>cube_int_dim = mapslices(sufficient_dimensions, cube_fill_itp, 0.95, dims = (\"Time\",\"Variable\"))\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 40.5 KB\n</code></pre> <p>Saving intermediate results can save CPU later, not needed to guarantee reproducibility tough <code>savecube(cube_int_dim, \"../data/IntDim\", overwrite=true)</code></p> <p>Now we apply the same function</p> \\[\\begin{equation}       f_{{time, var}}^{{ }} : \\mathcal{C}({time, var}) \\rightarrow \\mathcal{C}({})   \\end{equation}\\] <p>to the spectrally decomposed cube (Eq. 13):</p> \\[\\begin{equation}          f_{{time, var}}^{{}} : \\mathcal{C}({lat, lon, time, var, freq})\\rightarrow \\mathcal{C}({lat, lon, freq})   \\end{equation}\\] <pre><code>cube_int_dim_dec = mapslices(sufficient_dimensions, cube_decomp, 0.95, dims = (\"Time\",\"Variable\"))\n</code></pre> <pre><code>YAXArray with the following dimensions\nScale               Axis with 4 elements: Trend Long-Term Variability Annual Cycle Fast Oscillations \nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 162.0 KB\n</code></pre> <p>for saving the output please use the command line below <code>savecube(cube_int_dim_dec, \"../data/IntDimDec\", overwrite=true)</code></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#visualizing-results-is-not-part-of-the-earthdatalab-package","title":"Visualizing results is not part of the EarthDataLab package.","text":"<p>Here we use GeoMalkie for plotting in comparison to the original script that relies on PyPlot.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#plotting-the-instrinsic-dimensions-maps","title":"Plotting the instrinsic dimensions maps","text":"<pre><code># standard function for plotting global grids\nfunction geoplotsfx(xin, titlein, labelin, crange, cmap)\nfig = GeoMakie.Figure(fontsize=19)\nax = GeoAxis(fig[1,1]; coastlines = false,\nlonlims=(-180, 180), latlims = (-90,90)\n)\nsf = GeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, xin; shading = false,\ncolormap = (cmap, 1,), colorrange=crange, rev=true)\ncb1 = Colorbar(fig[2,1], sf; label=labelin, width = Relative(0.5), vertical=false, highclip=RGBA{Float32}(0.059f0,0.084f0,0.072f0,1f0))\nLabel(fig[0,1], titlein, fontsize=25, width = Relative(0.5))\nreturn(fig)\nend\n\nlabelin = \"Intrinsic dimension\"\n\ncrange = (0,11)\n\ncmap = Reverse(:magma)\n\nscale_name = [\"(a) Original Data\", \"(b) Long-term variability\", \"(c) Seasonal variability\", \"(d) Short-term variability\"]\n\nf = CairoMakie.Figure(fontsize=15, resolution = (1000, 700))\ntitlein = string(scale_name[1])\n# map original data\nax = GeoAxis(f[1,1]; coastlines = false, lonlims=(-180, 180), latlims = (-90,90), title=scale_name[1])\nsf1 = GeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, cube_int_dim[:,:]; shading = false,\ncolormap = (cmap, 1,), colorrange=crange, rev=true)\ncb1 = Colorbar(f[3,1:2], sf1; label=labelin, width = Relative(0.5), vertical=false, highclip=RGBA{Float32}(0.059f0,0.084f0,0.072f0,1f0))\n# map Long-term variability\nax = GeoAxis(f[1,2]; coastlines = false, lonlims=(-180, 180), latlims = (-90,90), title=scale_name[2])\nGeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, cube_int_dim_dec[2,:,:]; shading = false,\ncolormap = (cmap, 1,), colorrange=crange, rev=true)\n# map seasonal variability\nax = GeoAxis(f[2,1]; coastlines = false, lonlims=(-180, 180), latlims = (-90,90), title=scale_name[3])\nGeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, cube_int_dim_dec[3,:,:]; shading = false,\ncolormap = (cmap, 1,), colorrange=crange, rev=true)\n# map seasonal variability\nax = GeoAxis(f[2,2]; coastlines = false, lonlims=(-180, 180), latlims = (-90,90), title=scale_name[4])\nGeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, cube_int_dim_dec[4,:,:]; shading = false,\ncolormap = (cmap, 1,), colorrange=crange, rev=true)\nf\n</code></pre>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_2/#plotting-the-intrinsic-dimensions-histograms","title":"Plotting the intrinsic dimensions histograms","text":"<p>we will weight out reslults considering the pixel size. For this we use the cosine of the latitudes.</p> <pre><code>lat_ax_vals = getAxis(\"lat\", cube_int_dim_dec)\nlon_ax_vals = getAxis(\"lon\", cube_int_dim_dec)\nweights = reshape(cosd.(repeat(lat_ax_vals, inner = length(lon_ax_vals))), 144,72)\n\n# identify pixels with values and exclude missings\nidx = findall(i-&gt;i&gt;0, skipmissing(cube_int_dim[:,:]))\nweights_sub = weights[idx]\nweights_sum = sum(weights_sub)\n\n# function for calculation weighted frequencies of intrinsic dimensions\nfunction weightdatafrec(xin, weights_sub, weights_sum)\ndout = Array{Union{Missing, Float32}}(missing, 11, 2)\ndout[:,1] .= 1:11\nfor i in 1:size(dout)[1]\nidx2 = findall(x-&gt;x==dout[i,1], xin)\ndout[i,2] = sum(weights_sub[idx2])/weights_sum\nend\ndout\nend\n\nd1 = weightdatafrec(skipmissing(cube_int_dim[:,:])[idx], weights_sub, weights_sum)\nd2 = weightdatafrec(skipmissing(cube_int_dim_dec[2,:,:])[idx], weights_sub, weights_sum)\nd3 = weightdatafrec(skipmissing(cube_int_dim_dec[3,:,:])[idx], weights_sub, weights_sum)\nd4 = weightdatafrec(skipmissing(cube_int_dim_dec[4,:,:])[idx], weights_sub, weights_sum)\n\n# plot histograms\nf2 = CairoMakie.Figure()\nlimits = (1, 11, 0, 0.6)\nax1 = Axis(f2[1, 1], ylabel=\"Weighted frequency\", xticks = 1:11, yticks = 0:0.2:0.6; limits, title=scale_name[1])\nax2 = Axis(f2[2, 1], xticks = 1:11, yticks = 0:0.2:0.6; limits, title=scale_name[2])\nax3 = Axis(f2[3, 1], xticks = 1:11, yticks = 0:0.2:0.6; limits, title=scale_name[3])\nax4 = Axis(f2[4, 1], xlabel=\"Intrinsic dimensions\", xticks = 1:11, yticks = 0:0.2:0.6; limits, title=scale_name[4])\n# (a) Original data\nx = 1:11\nbarplot!(ax1, x, d1[:,2]; color=x, colormap=cmap, colorrange=crange)#, weights=weights_idx)\n# (b) Long-term variability\nbarplot!(ax2, x, d2[:,2]; color=x, colormap=cmap, colorrange=crange)\n# (c) Seasonal variability\nbarplot!(ax3, x, d3[:,2]; color=x, colormap=cmap, colorrange=crange)\n# (d) Short-term variability\nbarplot!(ax4, x, d4[:,2]; color=x, colormap=cmap, colorrange=crange)\nf2\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/","title":"Examples from ESDL study 3","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#examples-from-the-esdl-paper","title":"Examples from the ESDL paper","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#earth-syst-dynam-11-201234-2020-httpsdoiorg105194esd-11-201-2020","title":"Earth Syst. Dynam., 11, 201\u2013234, 2020 (https://doi.org/10.5194/esd-11-201-2020)","text":"<p>NOTE: This section is based on the case studies from the paper \"Earth system data cubes unravel global multivariate dynamics\" by Mahecha, Gans et al. (2019), available here.</p> <ul> <li>We have slightly adjusted the scripts. A few differences are that these new scripts are updated to Julia 1.9, and the YAXArrays.jl package is used.</li> <li>The dataset has been updated but it has less available variables. Therefore the results might differ.</li> <li>The calculations are performed with a very coarse spatial (2.5\u00b0) and temporal resolution (monthly).</li> <li>These are examples for illustrative purposes of the packages and do not intend any deeper scientific interpretation. For scientific analysis use the higher spatio-temporal resolution datasets.</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#case-study-3-model-parameter-estimation-in-the-esdl","title":"Case study 3: Model-parameter estimation in the ESDL","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#example-of-the-temperature-sensitivity-of-ecosystem-respiration","title":"Example of the temperature sensitivity of ecosystem respiration","text":"<ul> <li>Script to reproduce and understand examples in the paper Earth system data cubes unravel global multivariate dynamics .</li> <li>The code is written on Julia 1.9 and uses GeoMakie for plotting.</li> <li>Normal text are explanations referring to notation and equations in the paper</li> <li><code># comments in the code are intended explain specific aspects of the coding</code></li> <li> </li> </ul> <pre><code># Load requiered packages\nusing Pkg\n\n# for operating data cubes\nusing EarthDataLab\nusing Zarr, YAXArrays, NetCDF, DiskArrays\n\n# other relevant packages\nusing Statistics, Dates, SkipNan\n</code></pre>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#new-steps-in-workflows-are-introduced-with-bold-headers","title":"New steps in workflows are introduced with bold headers","text":""},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#select-and-subet-an-earth-system-data-cube","title":"Select and subet an Earth system data cube","text":"<p>We have to choose a cube and here we select a monthly global cube of 2.5\u00b0 resolution. This very low-resolution cube aims at fast processing for the safety of computational time and resources.</p> <pre><code>cube_handle = esdc(res=\"tiny\")\n\n# In this case it is better to have one cube for the Tair and one for terrestrial ecosystem respiration R$_{eco}$\nworld_tair = subsetcube(cube_handle, variable = \"air_temperature_2m\")\nworld_resp = subsetcube(cube_handle, variable = \"terrestrial_ecosystem_respiration\")\n\n# Find overlapping time between variables\nspan_starts = first(findall(i-&gt; !ismissing(i), world_tair[:,:,:]))\naxtime = collect(cube_handle.axes[3]);\nprintln(\"Data span of `air_temperature_2m` starts on \", axtime[span_starts[3]])\n\nspan_starts = first(findall(i-&gt; !ismissing(i), world_resp[:,:,:]))\naxtime = collect(cube_handle.axes[3]);\nprintln(\"Data span of `terrestrial_ecosystem_respiration` starts on \", axtime[span_starts[3]])\n\n# susbet again based on overlapping period\nworld_tair = subsetcube(world_tair, time=2001:2015)\nworld_resp = subsetcube(world_resp, time=2001:2015)\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\ntime                Axis with 345 Elements from 2001-01-09T00:00:00 to 2015-12-27T00:00:00\nunits: mm d^-1\nTotal size: 13.65 MB\n</code></pre> <p>The objective is to estimate  \\(Q_{10}\\) from the decomposed time series. For details we refere the reader to Mahecha, M.D. et al. (2010) Global convergence in the temperature sensitivity of respiration at ecosystem level. Science, 329, 838-840.</p> <p>The first step is the transformation of both variables, so that the \\(Q_{10}\\) model becomes linear and Tair the exponent:</p> <pre><code># Element-wise transformations using `map` are done in a lazy manner, so the\n# transformation will be applied only when the data is read or further processed\n# We forced `world_\u03c4` output format as Float32 to assure the output data type is equal , and to avoid further incompatibilities\nworld_\u03c4 = map(tair -&gt; (tair - Float32(273.15+15))/10, world_tair)\nworld_\u03c1 = map(log, world_resp)\n\n# ... and we combine them into a Data Cube again using `concatenatecubes`\nworld_new = concatenatecubes([world_\u03c4, world_\u03c1], CategoricalAxis(\"Variable\", [\"\u03c4\",\"\u03c1\"]))\n\n# First we need a function for time-series filtering. Using a moving average filter is the simplest way to decomposes a signal into fast and slow oscillations by caluclating a moving average over a window of points. This creates a smoothed curve (slow osc.) which can be subtracted from the original singlal to obtain fast oscillations separately. We could have likewise used FFTs, SSA, EMD, or any other method for discrete time-series decomposition.\n# Moving Average decomposes a singal into fast and slow oscillations\n# by calculating a moving average over a window of points.\n# This creates a smoothed curve (slow osc.) which can be subtracted from the original signal,\n# to obtain fast oscillations separately.\nfunction movingAverage(xout, xin; windowsize = 4)\nZ = length(xin)\n# calculate moving average over window\n# truncating windows for data points at beginning and end\nmovAv = map(1:Z) do i\nr = max(1,i-windowsize):min(i+windowsize,Z)\nmean(view(xin,r))\nend\n# return slow oscillations in col 1 and fast oscillations in col 2\nxout[:,1] .= movAv\nxout[:,2] .= xin .- movAv\nreturn xout\nend\n\n# here we define the input and output dimensions for the decomposition\nindims  = InDims(\"Time\")\noutdims = OutDims(\"Time\", CategoricalAxis(\"Scale\",[\"Slow\",\"Fast\"]))\ncube_decomp = mapCube(movingAverage, world_new, indims=indims, outdims=outdims)\n</code></pre> <pre><code>YAXArray with the following dimensions\ntime                Axis with 345 Elements from 2001-01-09T00:00:00 to 2015-12-27T00:00:00\nScale               Axis with 2 elements: Slow Fast \nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nVariable            Axis with 2 elements: \u03c4 \u03c1 \nTotal size: 54.58 MB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#for-estimating-the-temperature-sensitivities","title":"For estimating the temperature sensitivities","text":"<pre><code># The classical $Q_{10}$ estimation could be realized with the following function\nfunction Q10direct(xout_Q10, xout_rb, xin)\n\u03c4, \u03c1 = eachcol(xin)\n# solve the regression\nb    = cor(\u03c4, \u03c1)*std(\u03c1)/std(\u03c4)\na    = mean(\u03c1) - b*mean(\u03c4)\n\nQ10  = exp(b)\nRb   = exp(a)\n# the returned Rb is a constant time series\nxout_rb .= Rb\nxout_Q10 .= Q10\nend\n</code></pre> <pre><code>Q10direct (generic function with 1 method)\n</code></pre> <p>For the scale dependent parameter estimation, the function is a bit more complex. And the numbers in the code comment refer to the  supporting online materials in Mahecha et al. (2010)</p> <pre><code>function Q10SCAPE(xout_Q10, xout_rb, xin)\n# xin is now a 3D array with dimensions Time x Scale x Variable\n\u03c4_slow = xin[:, 1, 1]\n\u03c4_fast = xin[:, 2, 1]\n\u03c1_slow = xin[:, 1, 2]\n\u03c1_fast = xin[:, 2, 2]\n\u03c4      = \u03c4_slow + \u03c4_fast\n\u03c1      = \u03c1_slow + \u03c1_fast\n\n# EQ S5\n# Q10 calculated on fast oscillations only\nd    = cor(\u03c4_fast, \u03c1_fast)*std(\u03c1_fast)/std(\u03c4_fast)\nc    = mean(\u03c1_fast) - d*mean(\u03c4_fast)\nQ10  = exp(d)\n\n# EQ S6: Influence of low frequency temperature on Rb\n\u03c1_sc = (\u03c4_slow .+ mean(\u03c4)) .* d\n\n# EQ S7: Time varying estimate for Rb\n\u03c1_b  = \u03c1_slow .+ mean(\u03c1) .- \u03c1_sc\nRb_b  = exp.(\u03c1_b)\n\nxout_Q10 .= Q10\nxout_rb  .= Rb_b\nend\n</code></pre> <pre><code>Q10SCAPE (generic function with 1 method)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#application-of-these-functions-on-the-prepared-cubes","title":"Application of these functions on the prepared cubes","text":"<pre><code>indims_q10 = InDims(\"Time\",\"Var\")\noutdims_q10 = OutDims() ## Just a single number, the first output cube\noutdims_rb = OutDims(\"Time\") ## The Rb time series, the second output cube\nq10_direct, rb_direct = mapCube(Q10direct, world_new, indims=indims_q10, outdims=(outdims_q10, outdims_rb))\n</code></pre> <pre><code>(YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 40.5 KB\n, YAXArray with the following dimensions\ntime                Axis with 345 Elements from 2001-01-09T00:00:00 to 2015-12-27T00:00:00\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 13.65 MB\n)\n</code></pre> <p>For the SCAPE approach, the parameter estimation on the decomposed appraoch is then</p> <pre><code>indims_scape = InDims(\"Time\",\"Scale\",\"Var\")\nq10_scape, rb_scape = mapCube(Q10SCAPE,cube_decomp, indims=indims_scape, outdims=(outdims_q10, outdims_rb))\n</code></pre> <pre><code>(YAXArray with the following dimensions\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 40.5 KB\n, YAXArray with the following dimensions\ntime                Axis with 345 Elements from 2001-01-09T00:00:00 to 2015-12-27T00:00:00\nlon                 Axis with 144 Elements from -178.75 to 178.75\nlat                 Axis with 72 Elements from -88.75 to 88.75\nTotal size: 13.65 MB\n)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#the-rest-is-plotting-in-this-example-we-use-geomakie","title":"The rest is plotting. In this example we use GeoMakie.","text":"<pre><code>using CairoMakie, GeoMakie\nCairoMakie.activate!()\nusing MakieTeX\nusing LaTeXStrings\n\nfunction geoplotsfx(xin, titlein, labelin, crange, cmap)\nfig = GeoMakie.Figure(fontsize=19)\nax = GeoAxis(fig[1,1]; coastlines = false,\nlonlims=(-180, 180), latlims = (-90,90)\n)\nsf = GeoMakie.surface!(ax, -180:2.5:180, -90:2.5:90, xin; shading = false,\ncolormap = (cmap, 1,), colorrange=crange)\ncb1 = Colorbar(fig[2,1], sf; label=labelin, width = Relative(0.5), vertical=false, highclip=RGBA{Float32}(0.03125f0,0.25f0,0.5f0,1f0))\nLabel(fig[0,1], titlein, fontsize=25, width = Relative(0.5))\nreturn(fig)\nend\n\nlabel_direct = L\"$Q_{10}$\"\nlabel_scape = L\"$SCAPE Q_{10}$\"\ncrange = (0,3)\ncmap = :GnBu\n\nfig1 = geoplotsfx(q10_direct[:,:], \"a) Confounded Parameter Estimation\", label_direct, crange, cmap)\n</code></pre> <p>and for the other case</p> <pre><code>fig2 = geoplotsfx(q10_scape[:,:], \"b) Scale Dependent Parameter Estimation\", label_scape, crange, cmap)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/examples_from_esdl_study_3/#the-following-are-some-additional-analyses-not-included-in-the-paper","title":"The following are some additional analyses, not included in the paper.","text":"<p>For this analysis we need to construct a new cube by concatenating a couple of previous cube outputs. To do this, there are two important remarks; (1) the cubes' axes order must be the same in both cubes (2) as well they both must have the same data chunking</p> <pre><code># checking cubes axes order\nworld_tair.axes\nrb_scape.axes\n</code></pre> <pre><code>3-element Vector{CubeAxis}:\n time                Axis with 345 Elements from 2001-01-09T00:00:00 to 2015-12-27T00:00:00\n lon                 Axis with 144 Elements from -178.75 to 178.75\n lat                 Axis with 72 Elements from -88.75 to 88.75\n</code></pre> <p>Now we need to sort the rb_scape axes order. Axes order must be the same for the cubes concatenation.</p> <pre><code>data_reshaped = permutedims(rb_scape.data,(2,3,1))\nrb_scape_reshaped = YAXArray(rb_scape.axes[[2,3,1]],data_reshaped)\n\n# checking cubes chunking\neachchunk(world_tair)\neachchunk(rb_scape_reshaped)\n\n# setting up the same chunking\nrb_scape_reshaped = setchunks(rb_scape_reshaped, Dict(\"lon\"=&gt;144, \"lat\"=&gt;72, \"time\"=&gt;44))\nrb_chunking = eachchunk(rb_scape_reshaped);\nfirst(rb_chunking)\nworld_tair = setchunks(world_tair, Dict(\"lon\"=&gt;144, \"lat\"=&gt;72, \"time\"=&gt;44))\ntair_chunking = eachchunk(world_tair);\nfirst(tair_chunking)\n\n# concatenate the cubes\nds = concatenatecubes([world_tair, rb_scape_reshaped], CategoricalAxis(\"Variables\", [\"tair\", \"rb\"]))\n\n# And compute the correlation between Air temperature and Base respiration\ncor_tair_rb = mapslices(i-&gt;cor(eachcol(i)...),ds, dims=(\"Time\",\"Variable\"))\nq10_diff = map((x,y)-&gt;x-y, q10_direct, q10_scape)\n\ncrange = (-1,1)\ncmap = :PRGn\n\nfig3 = geoplotsfx(cor_tair_rb[:,:], \"Correlation Tair and Rb\", \"Coefficient\", crange, cmap)\n</code></pre> <p></p> <p>and also</p> <pre><code>fig4 = geoplotsfx(q10_diff[:,:], string(\"Ratio of Q10 conv and Q10 Scape\"), \"Ratio\", crange, cmap)\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/openNetCDF/","title":"Open NetCDF","text":"<p>In this example we are going to use a <code>NetCDF</code> file but this should be very similar for other data backends. To open a single data file we first need to load the appropriate backend package via <code>using NetCDF</code>.</p> <pre><code>using YAXArrays, NetCDF\nusing Downloads\nurl = \"https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc\"\nfilename = Downloads.download(url, \"tos_O1_2001-2002.nc\") # you pick your own path\nc = Cube(filename)\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 180 Elements from 1.0 to 359.0\nlat                 Axis with 170 Elements from -79.5 to 89.5\ntime                Axis with 24 Elements from CFTime.DateTime360Day(2001-01-16T00:00:00) to CFTime.DateTime360Day(2002-12-16T00:00:00)\nunits: K\nname: tos\nTotal size: 2.8 MB\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/openZarr/","title":"Open Zarr (Store)","text":"<pre><code>using Zarr, YAXArrays\nstore =\"gs://cmip6/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/3hr/tas/gn/v20190710/\"\ng = open_dataset(zopen(store, consolidated=true))\nc = g[\"tas\"]\n</code></pre> <pre><code>YAXArray with the following dimensions\nlon                 Axis with 384 Elements from 0.0 to 359.0625\nlat                 Axis with 192 Elements from -89.28422753251364 to 89.28422753251364\ntime                Axis with 251288 Elements from 2015-01-01T03:00:00 to 2101-01-01T00:00:00\nunits: K\nname: tas\nTotal size: 69.02 GB\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/saving/","title":"Saving YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/saving/#saving-yaxarrays-and-datasets","title":"Saving YAXArrays and Datasets","text":"<p>Is possible to save datasets and YAXArray directly to zarr files.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-yaxarray-to-zarr","title":"Saving a YAXArray to Zarr","text":"<p>One can save any <code>YAXArray</code> using the <code>savecube</code> function. Simply add a path as an argument and the cube will be saved.</p> <pre><code>using YAXArrays, Zarr\na = YAXArray(rand(10,20))\nf = tempname()\nsavecube(a,f,driver=:zarr)\n</code></pre> <pre><code>YAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nTotal size: 1.56 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-yaxarray-to-netcdf","title":"Saving a YAXArray to NetCDF","text":"<p>Saving to NetCDF works exactly the same way.</p> <pre><code>using YAXArrays, Zarr, NetCDF\na = YAXArray(rand(10,20))\nf = tempname()\nsavecube(a,f,driver=:netcdf)\n</code></pre> <pre><code>YAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nTotal size: 1.56 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-dataset","title":"Saving a Dataset","text":"<p>Saving Datasets can be done using the <code>savedataset</code> function.</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)));\nf = tempname();\nsavedataset(ds,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: \nx\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\ny\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#overwriting-a-dataset","title":"Overwriting a Dataset","text":"<p>If a path already exists, an error will be thrown. Set <code>overwrite=true</code> to delete the existing dataset</p> <pre><code>savedataset(ds,path=f,driver=:zarr, overwrite=true)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: \nx\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\ny\n</code></pre> <p>Look at the docs for more information</p> <p>savedataset(ds::Dataset; path = \"\", persist = nothing, overwrite = false, append = false, skeleton=false, backend = :all,     driver = backend, max_cache = 5e8, writefac=4.0)</p> <p>Saves a Dataset into a file at <code>path</code> with the format given by <code>driver</code>, i.e., driver=:netcdf or driver=:zarr.</p> <p>Warning</p> <p>overwrite = true, deletes ALL your data and it will create a new file.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#appending-to-a-dataset","title":"Appending to a Dataset","text":"<p>New variables can be added to an existing dataset using the <code>append=true</code> keyword.</p> <pre><code>ds2 = Dataset(z = YAXArray(rand(10,20,5)))\nsavedataset(ds2, path=f,backend=:zarr,append=true)\nopen_dataset(f, driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: \nx\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\nz\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\n \u2514\u2500\u2500 Dim_3               Axis with 5 Elements from 1 to 5\ny\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#datacube-skeleton-without-the-actual-data","title":"Datacube Skeleton without the actual data","text":"<p>Sometimes one merely wants to create a datacube  \"Skeleton\" on disk and gradually fill it with data. Here we create YAXArray and write only the axis data and array metadata to disk, while no actual array data is copied:</p> <pre><code>using YAXArrays, Zarr\na = YAXArray(zeros(Union{Missing, Int32},10,20))\nf = tempname();\nr = savecube(a,f,driver=:zarr,skeleton=true);\nall(ismissing,r[:,:])\n</code></pre> <pre><code>true\n</code></pre> <p>The <code>skeleton</code> argument is also available for <code>savedataset</code>.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/setchuncks/","title":"Setting chunks's size","text":""},{"location":"examples/generated/UserGuide/setchuncks/#set-chunks","title":"Set chunks","text":"<p>To determine the chunk size of the array representation on disk, call the <code>setchunks</code> function prior to saving.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#chunking-yaxarrays","title":"Chunking YAXArrays","text":"<pre><code>using YAXArrays, Zarr\na = YAXArray(rand(10,20))\na_chunked = setchunks(a, (5,10))\na_chunked.chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p>And the saved file is also splitted into Chunks.</p> <pre><code>f = tempname()\nsavecube(a_chunked, f, backend=:zarr)\nCube(f).chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p>Alternatively chunk sizes can be given by dimension name, so the following results in the same chunks:</p> <pre><code>a_chunked = setchunks(a, (Dim_2=10, Dim_1=5))\na_chunked.chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#chunking-datasets","title":"Chunking Datasets","text":""},{"location":"examples/generated/UserGuide/setchuncks/#set-chunks-by-axis","title":"Set Chunks by Axis","text":"<p>Set chunk size for each axis occuring in a dataset. This will be applied to all variables in the dataset:</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)))\ndschunked = setchunks(ds, Dict(\"Dim_1\"=&gt;5, \"Dim_2\"=&gt;10, \"Dim_3\"=&gt;2))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:2)   (1:5, 11:20, 1:2)\n (6:10, 1:10, 1:2)  (6:10, 11:20, 1:2)\n\n[:, :, 2] =\n (1:5, 1:10, 3:4)   (1:5, 11:20, 3:4)\n (6:10, 1:10, 3:4)  (6:10, 11:20, 3:4)\n\n[:, :, 3] =\n (1:5, 1:10, 5:5)   (1:5, 11:20, 5:5)\n (6:10, 1:10, 5:5)  (6:10, 11:20, 5:5)\n</code></pre> <p>Saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked, path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: \nx\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\ny\nz\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\n \u2514\u2500\u2500 Dim_3               Axis with 5 Elements from 1 to 5\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#set-chunking-by-variable","title":"Set chunking by Variable","text":"<p>The following will set the chunk size for each Variable separately and results in exactly the same chunking as the example above</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)))\ndschunked = setchunks(ds,(x = (5,10), y = Dict(\"Dim_1\"=&gt;5), z = (Dim_1 = 5, Dim_2 = 10, Dim_3 = 2)))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:2)   (1:5, 11:20, 1:2)\n (6:10, 1:10, 1:2)  (6:10, 11:20, 1:2)\n\n[:, :, 2] =\n (1:5, 1:10, 3:4)   (1:5, 11:20, 3:4)\n (6:10, 1:10, 3:4)  (6:10, 11:20, 3:4)\n\n[:, :, 3] =\n (1:5, 1:10, 5:5)   (1:5, 11:20, 5:5)\n (6:10, 1:10, 5:5)  (6:10, 11:20, 5:5)\n</code></pre> <p>saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: \nx\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\ny\nz\n \u2514\u2500\u2500 Dim_2               Axis with 20 Elements from 1 to 20\n \u2514\u2500\u2500 Dim_3               Axis with 5 Elements from 1 to 5\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#set-chunking-for-all-variables","title":"Set chunking for all variables","text":"<pre><code>#The following code snippet only works when all member variables of the dataset have\n</code></pre> <p>the same shape and sets the output chunks for all arrays.</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10,20)), z = YAXArray(rand(10,20)))\ndschunked = setchunks(ds,(5,10))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:1)   (1:5, 11:20, 1:1)\n (6:10, 1:10, 1:1)  (6:10, 11:20, 1:1)\n\n[:, :, 2] =\n (1:5, 1:10, 2:2)   (1:5, 11:20, 2:2)\n (6:10, 1:10, 2:2)  (6:10, 11:20, 2:2)\n\n[:, :, 3] =\n (1:5, 1:10, 3:3)   (1:5, 11:20, 3:3)\n (6:10, 1:10, 3:3)  (6:10, 11:20, 3:3)\n</code></pre> <p>saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n   Dim_1               Axis with 10 Elements from 1 to 10\n   Dim_2               Axis with 20 Elements from 1 to 20\nVariables: \nx\ny\nz\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/contribute/contribute/","title":"Contribute to docs","text":""},{"location":"examples/generated/contribute/contribute/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>new file</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropriate level.</p> <p>add entry to docs</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/contribute/contribute/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR follow the next steps:</p> <p>build docs locally</p> <p>Install the following dependencies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Then simply go to your <code>docs</code> env and activate it, i.e.</p> <p><code>docs&gt; julia</code></p> <p><code>julia&gt; ]</code></p> <p><code>(docs) pkg&gt; activate .</code></p> <p>Next, run the scripts:</p> <p>Julia env: docs</p> <p>Generate files and build docs by running:</p> <ul> <li><code>include(\"genfiles.jl\")</code></li> <li><code>include(\"make.jl\")</code></li> </ul> <p>Now go to your <code>terminal</code> in the same path <code>docs&gt;</code> and run:</p> <p><code>mkdocs serve</code></p> <p>This should ouput <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"tutorials/tutorial/","title":"Tutorial","text":""},{"location":"tutorials/tutorial/#yaxarray-tutorial","title":"YAXArray tutorial","text":"<p>If you are interested in learning how to work with YAXArrays for different use cases you can follow along one of the following tutorials. </p> <ul> <li>Currently the overview tutorial is located at ESDLTutorials Repository</li> <li>You can find further tutorial videos at the EO College. Beware that the syntax in the video tutorials might be slightly changed.</li> <li>the other tutorials are still work in progress.</li> </ul> <p></p> <p></p>"},{"location":"tutorials/tutorial/#general-overview-of-the-functionality-of-yaxarrays","title":"General overview of the functionality of YAXArrays","text":"<p>This tutorial provides a broad overview about the features of YAXArrays.</p> <p></p> <p></p>"},{"location":"tutorials/tutorial/#table-style-iteration-over-yaxarrays","title":"Table-style iteration over YAXArrays","text":"<p>Work in progress</p> <p>Sometimes you want to combine the data that is represented in the data cube with other datasets, which are best described as a data frame.  In this tutorial you will learn how to use the Tables.jl interface to iterate over the data in the YAXArray.</p> <p></p> <p></p>"},{"location":"tutorials/tutorial/#combining-multiple-tiff-files-into-a-zarr-based-datacube","title":"Combining multiple tiff files into a zarr based datacube","text":""}]}