var documenterSearchIndex = {"docs":
[{"location":"man/yaxarrays/#The-YAXArray-Data-Type","page":"-","title":"The YAXArray Data Type","text":"","category":"section"},{"location":"man/datasets/#YAXArray-Datasets","page":"-","title":"YAXArray Datasets","text":"","category":"section"},{"location":"examples/Time Mean/#How-to-calculate-a-time-mean","page":"Time Mean","title":"How to calculate a time mean","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using ESDL\nc = Cube()\ncitaly = c[var = [\"air_temperature_2m\", \"evaporation\"], region=\"Italy\", time=2001:2003]\nmapslices(mean ∘ skipmissing, c, dims=\"Time\")","category":"page"},{"location":"examples/Time Mean/#Distributed-calculations","page":"Time Mean","title":"Distributed calculations","text":"","category":"section"},{"location":"examples/Time Mean/#Local-machine","page":"Time Mean","title":"Local machine","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"It is possible to distribute the calculations over multiple process. The following code does a time mean over all grid points using multiple CPU over a local machine.","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using Distributed\naddprocs(2)\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using ESDL\n@everywhere using Statistics\n\n@everywhere function mymean(output, pixel)\n       output = mean(pixel)\nend\n\nc = Cube()\ntair = subsetcube(c,variable=\"air_temperature_2m\", time=2001:2016)\ntair_c = map(t->t-273.15, tair)\n\nindims = InDims(TimeAxis)\noutdims = OutDims()\n\nresultcube = mapCube(mymean, tair_c, indims=indims, outdims=outdims)","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"In the last example, mapCube was used to map the mymean function. mapslices is a convenient function that can replace mapCube, where you can omit defining an extra function with the output argument as an input (e.g. mymean). It is possible to simply use mapslice","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"resultcube = mapslices(mean ∘ skipmissing, c, dims=\"time\")","category":"page"},{"location":"examples/Time Mean/#SLURM-cluster","page":"Time Mean","title":"SLURM cluster","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"It is also possible to distribute easily the workload on a cluster, with little modification to the code. The following code does a time mean over all grid points using multiple CPU over a SLURM cluster. To do so, we use the ClusterManagers package.","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using Distributed\nusing ClusterManagers\n\naddprocs(SlurmManager(10))\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using ESDL\n@everywhere using Statistics\n\ninpath=\"zg1000_AERday_CanESM5_esm-hist_r6i1p1f1_gn_18500101-20141231.nc\"\n\nc = Cube(inpath, \"zg1000\")\n\nresultcube = mapslices(mean ∘ skipmissing, c, dims=\"time\")","category":"page"},{"location":"man/iterators/#Table-style-iteration-over-YAXArrays","page":"Table-style iteration over YAXArrays","title":"Table-style iteration over YAXArrays","text":"","category":"section"},{"location":"man/applying functions/#Mapping-functions-over-YAXArrays","page":"Mapping functions over YAXArrays","title":"Mapping functions over YAXArrays","text":"","category":"section"},{"location":"#YAXArrays.jl","page":"Home","title":"YAXArrays.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yet another xarray-like Julia package","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for operating on out-of-core labeled arrays, based on stores like NetCDF or Zarr.  ","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"open datasets from a variety of sources (NetCDF, Zarr, ArchGDAL)\ninteroperability with other named axis packages through YAXArrayBase\nefficient mapslices operations on huge multiple arrays, optimized for high-latency data access (object storage, compressed datasets) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The YAXArray tutorial provides a tutorial explaining how to get started using YAXArrays.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/tutorial.md\",\n    \"man/datasets.md\",\n    \"man/yaxarrays.md\",\n    \"man/applying function.md\",\n    \"man/iteratirs.md\",\n    \"examples/examples.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– ","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"–>","category":"page"},{"location":"man/tutorial/#YAXArray-tutorial","page":"Tutorial","title":"YAXArray tutorial","text":"","category":"section"}]
}
