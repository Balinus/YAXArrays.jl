{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#yaxarraysjl","title":"YAXArrays.jl","text":"<p>Yet another xarray-like Julia package</p> <p>A package for operating on out-of-core labeled arrays, based on stores like NetCDF, Zarr or GDAL.  </p> <p>Info</p> <ul> <li>Open datasets from a variety of sources (NetCDF, Zarr, ArchGDAL)</li> <li>Interoperability with other named axis packages through YAXArrayBase</li> <li>Efficient <code>mapslices(x)</code> operations on huge multiple arrays, optimized for high-latency data access (object storage, compressed datasets)</li> </ul> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add(\"YAXArrays\")\n</code></pre> <p>or </p> <pre><code>] add YAXArrays\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p> <p>You may check the installed version with:</p> <pre><code>] st YAXArrays\n</code></pre> <p>Start using the package:</p> <pre><code>using YAXArrays\n</code></pre> <p>The YAXArray tutorial provides a tutorial explaining how to get started using YAXArrays.</p> <p></p> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>using YAXArrays\nyax = YAXArray(rand(10,20,30))\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#public-api","title":"Public API","text":"<p># <code>YAXArrays.getAxis</code> \u2014 Method.</p> <pre><code>getAxis(desc, c)\n</code></pre> <p>Given an Axis description and a cube, returns the corresponding axis of the cube. The Axis description can be:</p> <ul> <li>the name as a string or symbol.</li> <li>an Axis object</li> </ul> <p>source</p> <p># <code>YAXArrays.Cubes</code> \u2014 Module.</p> <p>The functions provided by YAXArrays are supposed to work on different types of cubes. This module defines the interface for all Data types that</p> <p>source</p> <p># <code>YAXArrays.Cubes.YAXArray</code> \u2014 Type.</p> <pre><code>YAXArray{T,N}\n</code></pre> <p>An array labelled with named axes that have values associated with them. It can wrap normal arrays or, more typically DiskArrays.</p> <p>Fields</p> <ul> <li><code>axes</code>: <code>Tuple</code> of Dimensions containing the Axes of the Cube</li> <li><code>data</code>: length(axes)-dimensional array which holds the data, this can be a lazy DiskArray</li> <li><code>properties</code>: Metadata properties describing the content of the data</li> <li><code>chunks</code>: Representation of the chunking of the data</li> <li><code>cleaner</code>: Cleaner objects to track which objects to tidy up when the YAXArray goes out of scope</li> </ul> <p>source</p> <p># <code>YAXArrays.Cubes.caxes</code> \u2014 Function.</p> <p>Returns the axes of a Cube</p> <p>source</p> <p># <code>YAXArrays.Cubes.caxes</code> \u2014 Method.</p> <pre><code>caxes\n</code></pre> <p>Embeds  Cube inside a new Cube</p> <p>source</p> <p># <code>YAXArrays.Cubes.concatenatecubes</code> \u2014 Method.</p> <pre><code>function concatenateCubes(cubelist, cataxis::CategoricalAxis)\n</code></pre> <p>Concatenates a vector of datacubes that have identical axes to a new single cube along the new axis <code>cataxis</code></p> <p>source</p> <p># <code>YAXArrays.Cubes.readcubedata</code> \u2014 Method.</p> <pre><code>readcubedata(cube)\n</code></pre> <p>Given any array implementing the YAXArray interface it returns an in-memory <code>YAXArray</code> from it.</p> <p>source</p> <p># <code>YAXArrays.Cubes.setchunks</code> \u2014 Method.</p> <pre><code>setchunks(c::YAXArray,chunks)\n</code></pre> <p>Resets the chunks of a YAXArray and returns a new YAXArray. Note that this will not change the chunking of the underlying data itself,  it will just make the data \"look\" like it had a different chunking. If you need a persistent on-disk representation of this chunking, use <code>savecube</code> on the resulting array. The <code>chunks</code> argument can take one of the following forms:</p> <ul> <li>a <code>DiskArrays.GridChunks</code> object</li> <li>a tuple specifying the chunk size along each dimension</li> <li>an AbstractDict or NamedTuple mapping one or more axis names to chunk sizes</li> </ul> <p>source</p> <p># <code>YAXArrays.Cubes.subsetcube</code> \u2014 Function.</p> <p>This function calculates a subset of a cube's data</p> <p>source</p> <p># <code>YAXArrays.DAT.InDims</code> \u2014 Type.</p> <pre><code>InDims(axisdesc...;...)\n</code></pre> <p>Creates a description of an Input Data Cube for cube operations. Takes a single   or multiple axis descriptions as first arguments. Alternatively a MovingWindow(@ref) struct can be passed to include   neighbour slices of one or more axes in the computation.    Axes can be specified by their   name (String), through an Axis type, or by passing a concrete axis.</p> <p>Keyword arguments</p> <ul> <li><code>artype</code> how shall the array be represented in the inner function. Defaults to <code>Array</code>, alternatives are <code>DataFrame</code> or <code>AsAxisArray</code></li> <li><code>filter</code> define some filter to skip the computation, e.g. when all values are missing. Defaults to   <code>AllMissing()</code>, possible values are <code>AnyMissing()</code>, <code>AnyOcean()</code>, <code>StdZero()</code>, <code>NValid(n)</code>   (for at least n non-missing elements). It is also possible to provide a custom one-argument function   that takes the array and returns <code>true</code> if the compuation shall be skipped and <code>false</code> otherwise.</li> <li><code>window_oob_value</code> if one of the input dimensions is a MowingWindow, this value will be used to fill out-of-bounds areas</li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.MovingWindow</code> \u2014 Type.</p> <pre><code>MovingWindow(desc, pre, after)\n</code></pre> <p>Constructs a <code>MovingWindow</code> object to be passed to an <code>InDims</code> constructor to define that the axis in <code>desc</code> shall participate in the inner function (i.e. shall be looped over), but inside the inner function <code>pre</code> values before and <code>after</code> values after the center value will be passed as well. </p> <p>For example passing <code>MovingWindow(\"Time\", 2, 0)</code> will loop over the time axis and  always pass the current time step plus the 2 previous steps. So in the inner function the array will have an additional dimension of size 3.    </p> <p>source</p> <p># <code>YAXArrays.DAT.OutDims</code> \u2014 Method.</p> <pre><code>OutDims(axisdesc;...)\n</code></pre> <p>Creates a description of an Output Data Cube for cube operations. Takes a single   or a Vector/Tuple of axes as first argument. Axes can be specified by their   name (String), through an Axis type, or by passing a concrete axis.</p> <ul> <li><code>axisdesc</code>: List of input axis names</li> <li><code>backend</code> : specifies the dataset backend to write data to, must be either :auto or a key in <code>YAXArrayBase.backendlist</code></li> <li><code>update</code> : specifies wether the function operates inplace or if an output is returned</li> <li><code>artype</code> : specifies the Array type inside the inner function that is mapped over</li> <li><code>chunksize</code>: A Dict specifying the chunksizes for the output dimensions of the cube, or <code>:input</code> to copy chunksizes from input cube axes or <code>:max</code> to not chunk the inner dimensions</li> <li><code>outtype</code>: force the output type to a specific type, defaults to <code>Any</code> which means that the element type of the first input cube is used</li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.CubeTable</code> \u2014 Method.</p> <pre><code>CubeTable()\n</code></pre> <p>Function to turn a DataCube object into an iterable table. Takes a list of as arguments, specified as a <code>name=cube</code> expression. For example <code>CubeTable(data=cube1,country=cube2)</code> would generate a Table with the entries <code>data</code> and <code>country</code>, where <code>data</code> contains the values of <code>cube1</code> and <code>country</code> the values of <code>cube2</code>. The cubes are matched and broadcasted along their axes like in <code>mapCube</code>.</p> <p>source</p> <p># <code>YAXArrays.DAT.cubefittable</code> \u2014 Method.</p> <pre><code>cubefittable(tab,o,fitsym;post=getpostfunction(o),kwargs...)\n</code></pre> <p>Executes <code>fittable</code> on the <code>CubeTable</code> <code>tab</code> with the (Weighted-)OnlineStat <code>o</code>, looping through the values specified by <code>fitsym</code>. Finally, writes the results from the <code>TableAggregator</code> to an output data cube.</p> <p>source</p> <p># <code>YAXArrays.DAT.fittable</code> \u2014 Method.</p> <pre><code>fittable(tab,o,fitsym;by=(),weight=nothing)\n</code></pre> <p>Loops through an iterable table <code>tab</code> and thereby fitting an OnlineStat <code>o</code> with the values specified through <code>fitsym</code>. Optionally one can specify a field (or tuple) to group by. Any groupby specifier can either be a symbol denoting the entry to group by or an anynymous function calculating the group from a table row.</p> <p>For example the following would caluclate a weighted mean over a cube weighted by grid cell area and grouped by country and month:</p> <pre><code>fittable(iter,WeightedMean,:tair,weight=(i-&gt;abs(cosd(i.lat))),by=(i-&gt;month(i.time),:country))\n</code></pre> <p>source</p> <p># <code>YAXArrays.DAT.mapCube</code> \u2014 Method.</p> <pre><code>mapCube(fun, cube, addargs...;kwargs...)\n\nMap a given function `fun` over slices of all cubes of the dataset `ds`. Use InDims to discribe the input dimensions and OutDims to describe the output dimensions of the function.\nFor Datasets, only one output cube can be specified.\nIn contrast to the mapCube function for cubes, additional arguments for the inner function should be set as keyword arguments.\n\nFor the specific keyword arguments see the docstring of the mapCube function for cubes.\n</code></pre> <p>source</p> <p># <code>YAXArrays.DAT.mapCube</code> \u2014 Method.</p> <pre><code>mapCube(fun, cube, addargs...;kwargs...)\n</code></pre> <p>Map a given function <code>fun</code> over slices of the data cube <code>cube</code>.      The additional arguments <code>addargs</code> will be forwarded to the inner function <code>fun</code>.     Use InDims to discribe the input dimensions and OutDims to describe the output dimensions of the function.</p> <p>Keyword arguments</p> <ul> <li><code>max_cache=YAXDefaults.max_cache</code> maximum size of blocks that are read into memory, defaults to approx 10Mb</li> <li><code>indims::InDims</code> List of input cube descriptors of type <code>InDims</code> for each input data cube</li> <li><code>outdims::OutDims</code> List of output cube descriptors of type <code>OutDims</code> for each output cube</li> <li><code>inplace</code> does the function write to an output array inplace or return a single value&gt; defaults to <code>true</code></li> <li><code>ispar</code> boolean to determine if parallelisation should be applied, defaults to <code>true</code> if workers are available.</li> <li><code>showprog</code> boolean indicating if a ProgressMeter shall be shown</li> <li><code>include_loopvars</code> boolean to indicate if the varoables looped over should be added as function arguments</li> <li><code>nthreads</code> number of threads for the computation, defaults to Threads.nthreads for every worker.</li> <li><code>loopchunksize</code> determines the chunk sizes of variables which are looped over, a dict</li> <li><code>kwargs</code> additional keyword arguments are passed to the inner function</li> </ul> <p>The first argument is always the function to be applied, the second is the input cube or a tuple of input cubes if needed.</p> <p>source</p> <p># <code>YAXArrays.Datasets.Dataset</code> \u2014 Type.</p> <pre><code>Dataset object which stores an `OrderedDict` of YAXArrays with Symbol keys. a dictionary of CubeAxes and a Dictionary of general properties. A dictionary can hold cubes with differing axes. But it will share the common axes between the subcubes.\n</code></pre> <p>source</p> <p># <code>YAXArrays.Datasets.Dataset</code> \u2014 Method.</p> <p>Dataset(; properties = Dict{String,Any}, cubes...)</p> <p>Construct a YAXArray Dataset with global attributes <code>properties</code> a and a list of named YAXArrays cubes...</p> <p>source</p> <p># <code>YAXArrays.Datasets.Cube</code> \u2014 Method.</p> <pre><code>Cube(ds::Dataset; joinname=\"Variable\")\n</code></pre> <p>Construct a single YAXArray from the dataset <code>ds</code>  by concatenating the cubes in the datset on the <code>joinname</code> dimension.</p> <p>source</p> <p># <code>YAXArrays.Datasets.open_dataset</code> \u2014 Method.</p> <p>open_dataset(g; driver=:all)</p> <p>Open the dataset at <code>g</code> with the given <code>driver</code>. The default driver will search for available drivers and tries to detect the useable driver from the filename extension.</p> <p>source</p> <p># <code>YAXArrays.Datasets.savecube</code> \u2014 Method.</p> <pre><code>savecube(cube,name::String)\n</code></pre> <p>Save a <code>YAXArray</code> to the <code>path</code>. </p> <p>Extended Help</p> <p>The keyword arguments are:</p> <ul> <li><code>name</code>:</li> <li><code>datasetaxis=\"Variable\"</code> special treatment of a categorical axis that gets written into separate zarr arrays</li> <li><code>max_cache</code>: The number of bits that are used as cache for the data handling.</li> <li><code>backend</code>: The backend, that is used to save the data. Falls back to searching the backend according to the extension of the path.</li> <li><code>driver</code>: The same setting as <code>backend</code>.</li> <li><code>overwrite::Bool=false</code> overwrite cube if it already exists</li> </ul> <p>source</p> <p># <code>YAXArrays.Datasets.savedataset</code> \u2014 Method.</p> <p>savedataset(ds::Dataset; path = \"\", persist = nothing, overwrite = false, append = false, skeleton=false, backend = :all,     driver = backend, max_cache = 5e8, writefac=4.0)</p> <p>Saves a Dataset into a file at <code>path</code> with the format given by <code>driver</code>, i.e., driver=:netcdf or driver=:zarr.</p> <p>Warning</p> <p>overwrite = true, deletes ALL your data and it will create a new file.</p> <p>source</p> <p># <code>YAXArrays.Datasets.to_dataset</code> \u2014 Method.</p> <p>to_dataset(c;datasetaxis = \"Variable\", name = \"layer\")  </p> <p>Convert a Data Cube into a Dataset. It is possible to treat one of  the Cube's axes as a \"DatasetAxis\" i.e. the cube will be split into  different parts that become variables in the Dataset. If no such  axis is specified or found, there will only be a single variable  in the dataset with the name <code>name</code></p> <p>source</p> <p></p> <p></p>"},{"location":"api/#internal-api","title":"Internal API","text":"<p># <code>YAXArrays.YAXDefaults</code> \u2014 Constant.</p> <p>Default configuration for YAXArrays, has the following fields:</p> <ul> <li><code>workdir[]::String = \"./\"</code> The default location for temporary cubes.</li> <li><code>recal[]::Bool = false</code> set to true if you want <code>@loadOrGenerate</code> to always recalculate the results.</li> <li><code>chunksize[]::Any = :input</code> Set the default output chunksize.</li> <li><code>max_cache[]::Float64 = 1e8</code> The maximum cache used by mapCube.</li> <li><code>cubedir[]::\"\"</code> the default location for <code>Cube()</code> without an argument.</li> <li><code>subsetextensions::Array{Any} = []</code> List of registered functions, that convert subsetting input into dimension boundaries.</li> </ul> <p>source</p> <p># <code>YAXArrays.findAxis</code> \u2014 Method.</p> <pre><code>findAxis(desc, c)\n</code></pre> <p>Internal function</p> <p>Extended Help</p> <pre><code>Given an Axis description and a cube return the index of the Axis.\n</code></pre> <p>The Axis description can be:</p> <ul> <li>the name as a string or symbol.</li> <li>an Axis object</li> </ul> <p>source</p> <p># <code>YAXArrays.getOutAxis</code> \u2014 Method.</p> <pre><code>getOutAxis\n</code></pre> <p>source</p> <p># <code>YAXArrays.get_descriptor</code> \u2014 Method.</p> <pre><code>get_descriptor(a)\n</code></pre> <p>Get the descriptor of an Axis.  This is used to dispatch on the descriptor. </p> <p>source</p> <p># <code>YAXArrays.match_axis</code> \u2014 Method.</p> <pre><code>match_axis\n</code></pre> <p>Internal function</p> <p>Extended Help</p> <pre><code>Match the Axis based on the AxisDescriptor.\nThis is used to find different axes and to make certain axis description the same.\nFor example to disregard differences of captialisation.\n</code></pre> <p>source</p> <p># <code>YAXArrays.Cubes.CleanMe</code> \u2014 Type.</p> <pre><code>mutable struct CleanMe\n</code></pre> <p>Struct which describes data paths and their persistency. Non-persistend paths/files are removed at finalize step</p> <p>source</p> <p># <code>YAXArrays.Cubes.clean</code> \u2014 Method.</p> <pre><code>clean(c::CleanMe)\n</code></pre> <p>finalizer function for CleanMe struct. The main process removes all directories/files which are not persistent.</p> <p>source</p> <p># <code>YAXArrays.Cubes.copydata</code> \u2014 Method.</p> <pre><code>copydata(outar, inar, copybuf)\n</code></pre> <p>Internal function which copies the data from the input <code>inar</code> into the output <code>outar</code> at the <code>copybuf</code> positions.</p> <p>source</p> <p># <code>YAXArrays.Cubes.optifunc</code> \u2014 Method.</p> <pre><code>optifunc(s, maxbuf, incs, outcs, insize, outsize, writefac)\n</code></pre> <p>Internal</p> <p>This function is going to be minimized to detect the best possible chunk setting for the rechunking of the data.</p> <p>source</p> <p># <code>YAXArrays.DAT.DATConfig</code> \u2014 Type.</p> <p>Configuration object of a DAT process. This holds all necessary information to perform the calculations. It contains the following fields:</p> <ul> <li><code>incubes::Tuple{Vararg{YAXArrays.DAT.InputCube, NIN}} where NIN</code>: The input data cubes</li> <li><code>outcubes::Tuple{Vararg{YAXArrays.DAT.OutputCube, NOUT}} where NOUT</code>: The output data cubes</li> <li><code>allInAxes::Vector</code>: List of all axes of the input cubes</li> <li><code>LoopAxes::Vector</code>: List of axes that are looped through</li> <li><code>ispar::Bool</code>: Flag whether the computation is parallelized</li> <li><code>loopcachesize::Vector{Int64}</code>:</li> <li><code>allow_irregular_chunks::Bool</code>:</li> <li><code>max_cache::Any</code>: Maximal size of the in memory cache</li> <li><code>fu::Any</code>: Inner function which is computed</li> <li><code>inplace::Bool</code>: Flag whether the computation happens in place</li> <li><code>include_loopvars::Bool</code>:</li> <li><code>ntr::Any</code>:</li> <li><code>do_gc::Bool</code>: Flag if GC should be called explicitly. Probably necessary for many runs in Julia 1.9</li> <li><code>addargs::Any</code>: Additional arguments for the inner function</li> <li><code>kwargs::Any</code>: Additional keyword arguments for the inner function</li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.InputCube</code> \u2014 Type.</p> <p>Internal representation of an input cube for DAT operations</p> <ul> <li><code>cube</code>: The input data</li> <li><code>desc</code>: The input description given by the user/registration</li> <li><code>axesSmall</code>: List of axes that were actually selected through the description</li> <li><code>icolon</code></li> <li><code>colonperm</code></li> <li><code>loopinds</code>: Indices of loop axes that this cube does not contain, i.e. broadcasts</li> <li><code>cachesize</code>: Number of elements to keep in cache along each axis</li> <li><code>window</code></li> <li><code>iwindow</code></li> <li><code>windowloopinds</code></li> <li><code>iall</code></li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.OutputCube</code> \u2014 Type.</p> <p>Internal representation of an output cube for DAT operations</p> <p>Fields</p> <ul> <li><code>cube</code>: The actual outcube cube, once it is generated</li> <li><code>cube_unpermuted</code>: The unpermuted output cube</li> <li><code>desc</code>: The description of the output axes as given by users or registration</li> <li><code>axesSmall</code>: The list of output axes determined through the description</li> <li><code>allAxes</code>: List of all the axes of the cube</li> <li><code>loopinds</code>: Index of the loop axes that are broadcasted for this output cube</li> <li><code>innerchunks</code></li> <li><code>outtype</code>: Elementtype of the outputcube</li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.YAXColumn</code> \u2014 Type.</p> <pre><code>YAXColumn\n</code></pre> <p>A struct representing a single column of a YAXArray partitioned Table     # Fields </p> <ul> <li><code>inarBC</code></li> <li><code>inds</code></li> </ul> <p>source</p> <p># <code>YAXArrays.DAT.cmpcachmisses</code> \u2014 Method.</p> <p>Function that compares two cache miss specifiers by their importance</p> <p>source</p> <p># <code>YAXArrays.DAT.getFrontPerm</code> \u2014 Method.</p> <p>Calculate an axis permutation that brings the wanted dimensions to the front</p> <p>source</p> <p># <code>YAXArrays.DAT.getLoopCacheSize</code> \u2014 Method.</p> <p>Calculate optimal Cache size to DAT operation</p> <p>source</p> <p># <code>YAXArrays.DAT.getOuttype</code> \u2014 Method.</p> <pre><code>getOuttype(outtype, cdata)\n</code></pre> <p>Internal function</p> <p>Get the element type for the output cube</p> <p>source</p> <p># <code>YAXArrays.DAT.getloopchunks</code> \u2014 Method.</p> <pre><code>getloopchunks(dc::DATConfig)\n</code></pre> <p>Internal function</p> <pre><code>Returns the chunks that can be looped over toghether for all dimensions.\nThis computation of the size of the chunks is handled by [`DiskArrays.approx_chunksize`](@ref)\n</code></pre> <p>source</p> <p># <code>YAXArrays.DAT.permuteloopaxes</code> \u2014 Method.</p> <pre><code>permuteloopaxes(dc)\n</code></pre> <p>Internal function</p> <p>Permute the dimensions of the cube, so that the axes that are looped through are in the first positions. This is necessary for a faster looping through the data.</p> <p>source</p> <p># <code>YAXArrays.Cubes.setchunks</code> \u2014 Method.</p> <pre><code>setchunks(c::Dataset,chunks)\n</code></pre> <p>Resets the chunks of all or a subset YAXArrays in the dataset and returns a new Dataset. Note that this will not change the chunking of the underlying data itself,  it will just make the data \"look\" like it had a different chunking. If you need a persistent on-disk representation of this chunking, use <code>savedataset</code> on the resulting array. The <code>chunks</code> argument can take one of the following forms:</p> <ul> <li>a NamedTuple or AbstractDict mapping from variable name to a description of the desired variable chunks</li> <li>a NamedTuple or AbstractDict mapping from dimension name to a description of the desired variable chunks</li> <li>a description of the desired variable chunks applied to all members of the Dataset</li> </ul> <p>where a description of the desired variable chunks can take one of the following forms:</p> <ul> <li>a <code>DiskArrays.GridChunks</code> object</li> <li>a tuple specifying the chunk size along each dimension</li> <li>an AbstractDict or NamedTuple mapping one or more axis names to chunk sizes</li> </ul> <p>source</p> <p># <code>YAXArrays.Datasets.collectfromhandle</code> \u2014 Method.</p> <p>Extracts a YAXArray from a dataset handle that was just created from a arrayinfo</p> <p>source</p> <p># <code>YAXArrays.Datasets.createdataset</code> \u2014 Method.</p> <p>function createdataset(DS::Type,axlist; kwargs...)</p> <p>Creates a new dataset with axes specified in <code>axlist</code>. Each axis must be a subtype   of <code>CubeAxis</code>. A new empty Zarr array will be created and can serve as a sink for   <code>mapCube</code> operations.</p> <p>Keyword arguments</p> <ul> <li><code>path=\"\"</code> location where the new cube is stored</li> <li><code>T=Union{Float32,Missing}</code> data type of the target cube</li> <li><code>chunksize = ntuple(i-&gt;length(axlist[i]),length(axlist))</code> chunk sizes of the array</li> <li><code>chunkoffset = ntuple(i-&gt;0,length(axlist))</code> offsets of the chunks</li> <li><code>persist::Bool=true</code> shall the disk data be garbage-collected when the cube goes out of scope?</li> <li><code>overwrite::Bool=false</code> overwrite cube if it already exists</li> <li><code>properties=Dict{String,Any}()</code> additional cube properties</li> <li><code>fillvalue= T&gt;:Missing ? defaultfillval(Base.nonmissingtype(T)) : nothing</code> fill value</li> <li><code>datasetaxis=\"Variable\"</code> special treatment of a categorical axis that gets written into separate zarr arrays</li> </ul> <pre><code>\n</code></pre> <p>source</p> <p># <code>YAXArrays.Datasets.getarrayinfo</code> \u2014 Method.</p> <p>Extract necessary information to create a YAXArrayBase dataset from a name and YAXArray pair </p> <p>source</p> <p># <code>YAXArrays.Datasets.testrange</code> \u2014 Method.</p> <p>Test if data in x can be approximated by a step range</p> <p>source</p>"},{"location":"examples/generated/Gallery/simplemaps/","title":"Simple maps","text":"<pre><code>using Zarr, YAXArrays, Dates\nusing DimensionalData\nusing GLMakie, GeoMakie\nusing GLMakie.GeometryBasics\n\nstore =\"gs://cmip6/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/3hr/tas/gn/v20190710/\"\ng = open_dataset(zopen(store, consolidated=true))\nc = g[\"tas\"]\n</code></pre> <pre><code>384\u00d7192\u00d7251288 YAXArray{Float32,3} with dimensions: \n  Dim{:lon} Sampled{Float64} 0.0:0.9375:359.0625 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} Float64[-89.28422753251364, -88.35700351866494, \u2026, 88.35700351866494, 89.28422753251364] ForwardOrdered Irregular Points,\n  Ti Sampled{DateTime} DateTime[2015-01-01T03:00:00, \u2026, 2101-01-01T00:00:00] ForwardOrdered Irregular Points\nunits: K\nname: tas\nTotal size: 69.02 GB\n</code></pre> <p>Subset, first time step</p> <pre><code>ct1 = c[Ti = Near(Date(\"2015-01-01\"))]\nlon = ct1.lon.val\nlat = ct1.lat.val\ndata = ct1.data[:,:];\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/Gallery/simplemaps/#heatmap-plot","title":"Heatmap plot","text":"<pre><code>GLMakie.activate!()\nfig = Figure(resolution = (1200,600))\nax = Axis(fig[1,1]; aspect = DataAspect())\nheatmap!(ax, lon, lat, data; colormap = :seaborn_icefire_gradient)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#add-coastlines-via-the-geoaxis-wintri-projection","title":"Add Coastlines via the GeoAxis, wintri Projection","text":"<pre><code>\u03b4lon = (lon[2]-lon[1])/2\nnlon = lon .- 180 .+ \u03b4lon\nndata = circshift(data, (192,1))\n\n\nfig = Figure(resolution = (1200,600))\nax = GeoAxis(fig[1,1])\nsurface!(ax, nlon, lat, ndata; colormap = :seaborn_icefire_gradient, shading=false)\ncl=lines!(ax, GeoMakie.coastlines(), color = :white, linewidth=0.85)\ntranslate!(cl, 0, 0, 1000)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#moll-projection","title":"Moll projection","text":"<pre><code>fig = Figure(resolution = (1200,600))\nax = GeoAxis(fig[1,1]; dest = \"+proj=moll\")\nsurface!(ax, nlon, lat, ndata; colormap = :seaborn_icefire_gradient, shading=false)\ncl=lines!(ax, GeoMakie.coastlines(), color = :white, linewidth=0.85)\ntranslate!(cl, 0, 0, 1000)\nfig\n</code></pre>"},{"location":"examples/generated/Gallery/simplemaps/#3d-sphere-plot","title":"3D sphere plot","text":"<pre><code>#using JSServe, WGLMakie\n#WGLMakie.activate!()\n#Page(exportable=true, offline=true)\n\nds = replace(ndata, missing =&gt;NaN)\nsphere = uv_normal_mesh(Tesselation(Sphere(Point3f(0), 1), 128))\n\nfig = Figure()\nax = LScene(fig[1,1], show_axis=false)\nmesh!(ax, sphere; color = ds'[end:-1:1,:],\ncolormap = :seaborn_icefire_gradient)\nzoom!(ax.scene, cameracontrols(ax.scene), 0.65)\nrotate!(ax.scene, 2.5)\nfig\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/HowdoI/howdoi/","title":"How do I ...","text":"<p>The purpose of this section is to do a collection of small convinient pieces of code on how to do simple things.</p> <p>Question</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#extract-the-axes-names-from-a-cube","title":"Extract the axes names from a Cube","text":"<pre><code>using YAXArrays\nusing DimensionalData\nc = YAXArray(rand(10, 10, 5))\n\ncaxes(c)\n</code></pre> <pre><code>Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\nDim{:Dim_2} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\nDim{:Dim_3} Sampled{Int64} Base.OneTo(5) ForwardOrdered Regular Points\n</code></pre> <p>Question</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#obtain-values-from-axes-and-data-from-the-cube","title":"Obtain values from axes and data from the cube","text":"<p>There are two options to collect values from axes. In this examples the axis ranges from 1 to 10.</p> <pre><code># this two examples bring the same result\ncollect(getAxis(\"Dim_1\", c).val)\ncollect(c.axes[1].val)\n\n# to collect data from a cube works exactly the same as doing it from an array\nc[:, :, 1]\n</code></pre> <pre><code>10\u00d710 YAXArray{Float64,2} with dimensions: \n  Dim{:Dim_1} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Dim_2} Sampled{Int64} 1:10 ForwardOrdered Regular Points\nTotal size: 800.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#concatenate-cubes","title":"Concatenate cubes","text":"<p>It is possible to concatenate several cubes that shared the same dimensions using the [<code>concatenatecubes</code>]@ref function.</p> <p>let's create two dummy cubes</p> <pre><code>using YAXArrays\n\naxlist = (\nDim{:time}(range(1, 20, length=20)),\nDim{:lon}(range(1, 10, length=10)),\nDim{:lat}(range(1, 5, length=15))\n)\n\ndata1 = rand(20, 10, 15)\nds1 = YAXArray(axlist, data1)\n\ndata2 = rand(20, 10, 15)\nds2 = YAXArray(axlist, data2)\n</code></pre> <pre><code>20\u00d710\u00d715 YAXArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Float64} 1.0:1.0:20.0 ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 23.44 KB\n</code></pre> <p>Now we can concatenate <code>ds1</code> and <code>ds2</code> cubes:</p> <pre><code>dsfinal = concatenatecubes([ds1, ds2], Dim{:Variables}([\"var1\", \"var2\"]))\n\ndsfinal\n</code></pre> <pre><code>20\u00d710\u00d715\u00d72 YAXArray{Float64,4} with dimensions: \n  Dim{:time} Sampled{Float64} 1.0:1.0:20.0 ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:Variables} Categorical{String} String[\"var1\", \"var2\"] ForwardOrdered\nTotal size: 46.88 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#how-do-i-subset-a-cube","title":"How do I subset a Cube?","text":"<p>Let's start by creating a dummy cube</p> <pre><code># define the time span of the cube\nusing Dates\nt = Date(\"2020-01-01\"):Month(1):Date(\"2022-12-31\")\n\n# create cube axes\naxes = (Dim{:Lon}(1:10), Dim{:Lat}(1:10), Dim{:Time}(t))\n\n# assign values to a cube\nc = YAXArray(axes, reshape(1:3600, (10, 10, 36)))\n</code></pre> <pre><code>10\u00d710\u00d736 YAXArray{Int64,3} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Time} Sampled{Date} Date(\"2020-01-01\"):Dates.Month(1):Date(\"2022-12-01\") ForwardOrdered Regular Points\nTotal size: 28.12 KB\n</code></pre> <p>Now we subset the cube by any dimension</p> <pre><code># subset cube by years\nctime = c[Time=Between(Date(2021,1,1), Date(2021,12,31))]\n\n# subset cube by a specific date and date range\nctime2 = c[Time=At(Date(\"2021-05-01\"))]\nctime3 = c[Time=Date(\"2021-05-01\") .. Date(\"2021-12-01\")]\n\n# subset cube by longitude and latitude\nclonlat = c[Lon=1 .. 5, Lat=5 .. 10] # check even numbers range, it is ommiting them\n</code></pre> <pre><code>5\u00d76\u00d736 YAXArray{Int64,3} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:5 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 5:10 ForwardOrdered Regular Points,\n  Dim{:Time} Sampled{Date} Date(\"2020-01-01\"):Dates.Month(1):Date(\"2022-12-01\") ForwardOrdered Regular Points\nTotal size: 8.44 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#how-do-i-apply-map-algebra","title":"How do I apply map algebra?","text":"<p>Our next step is map algebra computations. This can be done effectively using the 'map' function. For example:</p> <pre><code># multiplying cubes with only spatio-temporal dimensions\nmap((x, y) -&gt; x * y, ds1, ds2)\n\n# cubes with more than 3 dimensions\nmap((x, y) -&gt; x * y, dsfinal[Variables=At(\"var1\")], dsfinal[Variables=At(\"var2\")])\n</code></pre> <pre><code>20\u00d710\u00d715 YAXArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Float64} 1.0:1.0:20.0 ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 23.44 KB\n</code></pre> <p>To add some complexity, we will multiply each value for \u03c0 and then divided for the sum of each time step. We will use the <code>ds1</code> cube for this purpose.</p> <pre><code>mapslices(ds1, dims=(\"Lon\", \"Lat\")) do xin\n(xin * \u03c0) ./ maximum(skipmissing(xin))\nend\n</code></pre> <pre><code>10\u00d715\u00d720 YAXArray{Union{Missing, Float64},3} with dimensions: \n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:time} Sampled{Float64} 1.0:1.0:20.0 ForwardOrdered Regular Points\nTotal size: 23.44 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/howdoi/#how-do-i-use-the-cubetable-function","title":"How do I use the CubeTable function?","text":"<p>The function \"CubeTable\" creates an iterable table and the result is a DataCube. It is therefore very handy for grouping data and computing statistics by class. It uses <code>OnlineStats.jl</code> to calculate statistics, and weighted statistics can be calculated as well.</p> <p>Here we will use the <code>ds1</code> Cube  defined previously and we create a mask for data classification.</p> <pre><code># cube containing a mask with classes 1, 2 and 3\nclasses = YAXArray((getAxis(\"lon\", dsfinal), getAxis(\"lat\", dsfinal)), rand(1:3, 10, 15))\n\nusing CairoMakie\nCairoMakie.activate!()\n</code></pre> <p>This is how our classification map looks like</p> <pre><code>heatmap(classes.data[:, :])\n</code></pre> <p></p> <p>Now we define the input cubes that will be considered for the iterable table</p> <pre><code>t = CubeTable(values=ds1, classes=classes)\n\nusing DataFrames\nusing OnlineStats\n# visualiztion of the CubeTable\nDataFrame(t[1])\n</code></pre> 3000\u00d75 DataFrame RowvaluesclassestimelonlatFloat64Int64Float64Float64Float6410.57335721.01.01.020.73368822.01.01.030.74452823.01.01.040.71145524.01.01.050.56518125.01.01.060.28152826.01.01.070.32611127.01.01.080.59213628.01.01.090.20341429.01.01.0100.877542210.01.01.0110.640614211.01.01.0120.0923927212.01.01.0130.746294213.01.01.0140.639343214.01.01.0150.370014215.01.01.0160.801187216.01.01.0170.276943217.01.01.0180.114221218.01.01.0190.907709219.01.01.0200.339434220.01.01.0210.95597911.02.01.0220.75388412.02.01.0230.075669513.02.01.0240.11105214.02.01.0250.13606215.02.01.0260.91124516.02.01.0270.90997617.02.01.0280.19512218.02.01.0290.13471619.02.01.0300.540185110.02.01.0310.755073111.02.01.0320.80093112.02.01.0330.609108113.02.01.0340.0875366114.02.01.0350.60098115.02.01.0360.785673116.02.01.0370.48432117.02.01.0380.349179118.02.01.0390.373853119.02.01.0400.767599120.02.01.0410.31306131.03.01.0420.36313132.03.01.0430.028133333.03.01.0440.55473534.03.01.0450.41637935.03.01.0460.3404436.03.01.0470.035778737.03.01.0480.2012738.03.01.0490.43583139.03.01.0500.757881310.03.01.0510.820932311.03.01.0520.140894312.03.01.0530.789949313.03.01.0540.631687314.03.01.0550.212904315.03.01.0560.398857316.03.01.0570.533711317.03.01.0580.248269318.03.01.0590.00913488319.03.01.0600.0474196320.03.01.0610.9025731.04.01.0620.18285132.04.01.0630.9658433.04.01.0640.82598234.04.01.0650.59536835.04.01.0660.023587536.04.01.0670.095704437.04.01.0680.83887738.04.01.0690.15480839.04.01.0700.0357416310.04.01.0710.341771311.04.01.0720.72476312.04.01.0730.790229313.04.01.0740.677023314.04.01.0750.24376315.04.01.0760.396105316.04.01.0770.0181875317.04.01.0780.254737318.04.01.0790.665072319.04.01.0800.184935320.04.01.0810.15975421.05.01.0820.56421122.05.01.0830.98933423.05.01.0840.51871924.05.01.0850.62741525.05.01.0860.52620826.05.01.0870.85617227.05.01.0880.95082828.05.01.0890.67917829.05.01.0900.320116210.05.01.0910.318434211.05.01.0920.552895212.05.01.0930.42908213.05.01.0940.487824214.05.01.0950.726755215.05.01.0960.572851216.05.01.0970.697247217.05.01.0980.719214218.05.01.0990.308189219.05.01.01000.520475220.05.01.01010.91388831.06.01.01020.85661832.06.01.01030.75856933.06.01.01040.51316434.06.01.01050.59022635.06.01.01060.016879236.06.01.01070.99625837.06.01.01080.24333138.06.01.01090.4563939.06.01.01100.901117310.06.01.01110.582873311.06.01.01120.929497312.06.01.01130.496547313.06.01.01140.919977314.06.01.01150.892075315.06.01.01160.578586316.06.01.01170.933907317.06.01.01180.14349318.06.01.01190.146339319.06.01.01200.25304320.06.01.01210.95976421.07.01.01220.62806722.07.01.01230.64604923.07.01.01240.56131124.07.01.01250.30820925.07.01.01260.24400326.07.01.01270.59055127.07.01.01280.24341128.07.01.01290.29869629.07.01.01300.14918210.07.01.01310.207655211.07.01.01320.241408212.07.01.01330.310304213.07.01.01340.410015214.07.01.01350.786839215.07.01.01360.12597216.07.01.01370.481537217.07.01.01380.421434218.07.01.01390.200479219.07.01.01400.944381220.07.01.01410.066300211.08.01.01420.51280912.08.01.01430.14535113.08.01.01440.95049914.08.01.01450.19831715.08.01.01460.020962116.08.01.01470.52575317.08.01.01480.3965218.08.01.01490.98632219.08.01.01500.905948110.08.01.01510.675921111.08.01.01520.520801112.08.01.01530.999825113.08.01.01540.0786635114.08.01.01550.325408115.08.01.01560.572817116.08.01.01570.516187117.08.01.01580.525343118.08.01.01590.450893119.08.01.01600.0723924120.08.01.01610.015322721.09.01.01620.82220822.09.01.01630.91251823.09.01.01640.12986824.09.01.01650.32258725.09.01.01660.92028426.09.01.01670.43383927.09.01.01680.70571528.09.01.01690.44399129.09.01.01700.695001210.09.01.01710.0143757211.09.01.01720.593328212.09.01.01730.304625213.09.01.01740.249238214.09.01.01750.798554215.09.01.01760.101341216.09.01.01770.584145217.09.01.01780.699428218.09.01.01790.451596219.09.01.01800.639949220.09.01.01810.54923711.010.01.01820.3495712.010.01.01830.78921713.010.01.01840.26711414.010.01.01850.21788415.010.01.01860.22585616.010.01.01870.44353717.010.01.01880.17426118.010.01.01890.52462519.010.01.01900.145505110.010.01.01910.0659172111.010.01.01920.37915112.010.01.01930.275896113.010.01.01940.991631114.010.01.01950.667423115.010.01.01960.535328116.010.01.01970.230142117.010.01.01980.895635118.010.01.01990.224572119.010.01.02000.018432120.010.01.02010.19561811.01.01.285712020.39081412.01.01.285712030.82961713.01.01.285712040.071393114.01.01.285712050.75962415.01.01.285712060.9950416.01.01.285712070.017426617.01.01.285712080.86693318.01.01.285712090.049424619.01.01.285712100.31184110.01.01.285712110.691537111.01.01.285712120.750473112.01.01.285712130.0216218113.01.01.285712140.282676114.01.01.285712150.271447115.01.01.285712160.249118116.01.01.285712170.461613117.01.01.285712180.258432118.01.01.285712190.0256151119.01.01.285712200.58455120.01.01.285712210.28636231.02.01.285712220.57005832.02.01.285712230.25804733.02.01.285712240.53638634.02.01.285712250.74091635.02.01.285712260.62090536.02.01.285712270.79482637.02.01.285712280.64698138.02.01.285712290.0089261239.02.01.285712300.893383310.02.01.285712310.469191311.02.01.285712320.800169312.02.01.285712330.184002313.02.01.285712340.770853314.02.01.285712350.49676315.02.01.285712360.292222316.02.01.285712370.536123317.02.01.285712380.220089318.02.01.285712390.617815319.02.01.285712400.101033320.02.01.285712410.62266121.03.01.285712420.41993222.03.01.285712430.41787423.03.01.285712440.269124.03.01.285712450.68406725.03.01.285712460.69767726.03.01.285712470.2395527.03.01.285712480.845128.03.01.285712490.68996129.03.01.285712500.26781210.03.01.285712510.938216211.03.01.285712520.222511212.03.01.285712530.927296213.03.01.285712540.471761214.03.01.285712550.0685865215.03.01.285712560.87177216.03.01.285712570.837487217.03.01.285712580.921429218.03.01.285712590.495965219.03.01.285712600.956845220.03.01.285712610.12630931.04.01.285712620.62457732.04.01.285712630.53988633.04.01.285712640.59214434.04.01.285712650.78969235.04.01.285712660.71699436.04.01.285712670.16924237.04.01.285712680.032934638.04.01.285712690.20008239.04.01.285712700.54572310.04.01.285712710.706204311.04.01.285712720.341938312.04.01.285712730.552486313.04.01.285712740.382843314.04.01.285712750.937344315.04.01.285712760.379228316.04.01.285712770.650869317.04.01.285712780.315623318.04.01.285712790.111272319.04.01.285712800.986622320.04.01.285712810.3136821.05.01.285712820.71859922.05.01.285712830.80539223.05.01.285712840.72743424.05.01.285712850.78205625.05.01.285712860.45325526.05.01.285712870.17029327.05.01.285712880.16450928.05.01.285712890.93204629.05.01.285712900.314586210.05.01.285712910.301064211.05.01.285712920.178626212.05.01.285712930.240826213.05.01.285712940.516301214.05.01.285712950.186206215.05.01.285712960.286865216.05.01.285712970.181819217.05.01.285712980.808163218.05.01.285712990.640699219.05.01.285713000.230754220.05.01.285713010.77618421.06.01.285713020.045728122.06.01.285713030.035642723.06.01.285713040.031423624.06.01.285713050.92311325.06.01.285713060.86149726.06.01.285713070.24984227.06.01.285713080.39600628.06.01.285713090.9811629.06.01.285713100.991338210.06.01.285713110.380351211.06.01.285713120.83517212.06.01.285713130.0960313213.06.01.285713140.896661214.06.01.285713150.616389215.06.01.285713160.201223216.06.01.285713170.107732217.06.01.285713180.6842218.06.01.285713190.552504219.06.01.285713200.914982220.06.01.285713210.59785331.07.01.285713220.6379332.07.01.285713230.70823333.07.01.285713240.68257834.07.01.285713250.53871535.07.01.285713260.036034836.07.01.285713270.043255237.07.01.285713280.18167138.07.01.285713290.72239739.07.01.285713300.590067310.07.01.285713310.00296227311.07.01.285713320.578534312.07.01.285713330.252248313.07.01.285713340.568149314.07.01.285713350.0224416315.07.01.285713360.219305316.07.01.285713370.0406566317.07.01.285713380.585621318.07.01.285713390.267711319.07.01.285713400.442952320.07.01.285713410.098373621.08.01.285713420.84775722.08.01.285713430.036711723.08.01.285713440.66322524.08.01.285713450.39766125.08.01.285713460.38637626.08.01.285713470.048124827.08.01.285713480.0093893528.08.01.285713490.16862229.08.01.285713500.200637210.08.01.285713510.788612211.08.01.285713520.27788212.08.01.285713530.74012213.08.01.285713540.271124214.08.01.285713550.00290675215.08.01.285713560.35825216.08.01.285713570.408532217.08.01.285713580.604994218.08.01.285713590.0376058219.08.01.285713600.112182220.08.01.285713610.84787431.09.01.285713620.94688332.09.01.285713630.19579533.09.01.285713640.79679534.09.01.285713650.77822635.09.01.285713660.26737536.09.01.285713670.53782537.09.01.285713680.34203938.09.01.285713690.98430239.09.01.285713700.219193310.09.01.285713710.641611311.09.01.285713720.349445312.09.01.285713730.838235313.09.01.285713740.327817314.09.01.285713750.332523315.09.01.285713760.068593316.09.01.285713770.506788317.09.01.285713780.769106318.09.01.285713790.54553319.09.01.285713800.542421320.09.01.285713810.35187411.010.01.285713820.72839212.010.01.285713830.40303513.010.01.285713840.076958714.010.01.285713850.067233215.010.01.285713860.28119216.010.01.285713870.31711417.010.01.285713880.64157718.010.01.285713890.76023819.010.01.285713900.995602110.010.01.285713910.373816111.010.01.285713920.62523112.010.01.285713930.433978113.010.01.285713940.930981114.010.01.285713950.0562508115.010.01.285713960.49842116.010.01.285713970.460145117.010.01.285713980.819669118.010.01.285713990.905955119.010.01.285714000.512797120.010.01.285714010.96027911.01.01.571434020.85606212.01.01.571434030.50523713.01.01.571434040.64910314.01.01.571434050.62324715.01.01.571434060.94342816.01.01.571434070.73196317.01.01.571434080.037189218.01.01.571434090.58647819.01.01.571434100.94532110.01.01.571434110.972489111.01.01.571434120.373575112.01.01.571434130.227436113.01.01.571434140.392145114.01.01.571434150.190743115.01.01.571434160.90587116.01.01.571434170.655124117.01.01.571434180.614322118.01.01.571434190.456521119.01.01.571434200.764120.01.01.571434210.60557931.02.01.571434220.84550432.02.01.571434230.12502533.02.01.571434240.8873434.02.01.571434250.79523535.02.01.571434260.96589736.02.01.571434270.07802937.02.01.571434280.90368638.02.01.571434290.40857339.02.01.571434300.387693310.02.01.571434310.372385311.02.01.571434320.303571312.02.01.571434330.0377257313.02.01.571434340.883203314.02.01.571434350.589812315.02.01.571434360.179934316.02.01.571434370.616204317.02.01.571434380.720966318.02.01.571434390.512353319.02.01.571434400.269124320.02.01.571434410.40747411.03.01.571434420.7348812.03.01.571434430.38482313.03.01.571434440.40883614.03.01.571434450.072364215.03.01.571434460.74559316.03.01.571434470.33594917.03.01.571434480.85543118.03.01.571434490.028688319.03.01.571434500.27638110.03.01.571434510.355908111.03.01.571434520.963525112.03.01.571434530.70227113.03.01.571434540.888429114.03.01.571434550.829939115.03.01.571434560.593297116.03.01.571434570.880037117.03.01.571434580.736887118.03.01.571434590.0007083119.03.01.571434600.324984120.03.01.571434610.30240121.04.01.571434620.019207222.04.01.571434630.67937823.04.01.571434640.71532624.04.01.571434650.53980825.04.01.571434660.58519526.04.01.571434670.9630427.04.01.571434680.5619728.04.01.571434690.6097629.04.01.571434700.581281210.04.01.571434710.088837211.04.01.571434720.89699212.04.01.571434730.13515213.04.01.571434740.369407214.04.01.571434750.232488215.04.01.571434760.880708216.04.01.571434770.429361217.04.01.571434780.175518218.04.01.571434790.308359219.04.01.571434800.47082220.04.01.571434810.48149131.05.01.571434820.86693232.05.01.571434830.38405133.05.01.571434840.17320734.05.01.571434850.17363335.05.01.571434860.012574136.05.01.571434870.6317337.05.01.571434880.68902438.05.01.571434890.8018539.05.01.571434900.0727987310.05.01.571434910.292062311.05.01.571434920.144661312.05.01.571434930.438153313.05.01.571434940.123198314.05.01.571434950.895906315.05.01.571434960.102544316.05.01.571434970.677795317.05.01.571434980.686967318.05.01.571434990.0964659319.05.01.571435000.535132320.05.01.571435010.79293721.06.01.571435020.38857722.06.01.571435030.52974123.06.01.571435040.12752224.06.01.571435050.93429225.06.01.571435060.56276126.06.01.571435070.50526227.06.01.571435080.81710428.06.01.571435090.94552129.06.01.571435100.3945210.06.01.571435110.0514422211.06.01.571435120.896036212.06.01.571435130.885002213.06.01.571435140.112454214.06.01.571435150.812752215.06.01.571435160.307061216.06.01.571435170.743496217.06.01.571435180.000253292218.06.01.571435190.95032219.06.01.571435200.159912220.06.01.571435210.4767811.07.01.571435220.91969912.07.01.571435230.30159513.07.01.571435240.56603314.07.01.571435250.45144315.07.01.571435260.2950616.07.01.571435270.45515217.07.01.571435280.59687418.07.01.571435290.36142519.07.01.571435300.454449110.07.01.571435310.196017111.07.01.571435320.147219112.07.01.571435330.706824113.07.01.571435340.266192114.07.01.571435350.994671115.07.01.571435360.604434116.07.01.571435370.502754117.07.01.571435380.526481118.07.01.571435390.1004119.07.01.571435400.520679120.07.01.571435410.22197521.08.01.571435420.20320622.08.01.571435430.39226323.08.01.571435440.076932724.08.01.571435450.078843325.08.01.571435460.69878726.08.01.571435470.44084327.08.01.571435480.50638428.08.01.571435490.82435529.08.01.571435500.598259210.08.01.571435510.162277211.08.01.571435520.606398212.08.01.571435530.833675213.08.01.571435540.548449214.08.01.571435550.644516215.08.01.571435560.219439216.08.01.571435570.446834217.08.01.571435580.195999218.08.01.571435590.722078219.08.01.571435600.876565220.08.01.571435610.6643931.09.01.571435620.51883732.09.01.571435630.47661533.09.01.571435640.33662734.09.01.571435650.40250435.09.01.571435660.94504236.09.01.571435670.013858537.09.01.571435680.080388238.09.01.571435690.57880439.09.01.571435700.168979310.09.01.571435710.369393311.09.01.571435720.616037312.09.01.571435730.312956313.09.01.571435740.390421314.09.01.571435750.734746315.09.01.571435760.969061316.09.01.571435770.694905317.09.01.571435780.30756318.09.01.571435790.248403319.09.01.571435800.97168320.09.01.571435810.058437421.010.01.571435820.92088522.010.01.571435830.4532223.010.01.571435840.51807424.010.01.571435850.45482325.010.01.571435860.84964426.010.01.571435870.58128927.010.01.571435880.20652728.010.01.571435890.43083629.010.01.571435900.440752210.010.01.571435910.553737211.010.01.571435920.702874212.010.01.571435930.463489213.010.01.571435940.767568214.010.01.571435950.0162585215.010.01.571435960.563573216.010.01.571435970.114696217.010.01.571435980.613001218.010.01.571435990.588789219.010.01.571436000.16432220.010.01.571436010.59947531.01.01.857146020.31491432.01.01.857146030.0002774733.01.01.857146040.72214334.01.01.857146050.77388535.01.01.857146060.61325736.01.01.857146070.79631337.01.01.857146080.3889538.01.01.857146090.88593239.01.01.857146100.545023310.01.01.857146110.92561311.01.01.857146120.988595312.01.01.857146130.413263313.01.01.857146140.389165314.01.01.857146150.673176315.01.01.857146160.892735316.01.01.857146170.110988317.01.01.857146180.573865318.01.01.857146190.384796319.01.01.857146200.943215320.01.01.857146210.22712831.02.01.857146220.94961532.02.01.857146230.67931733.02.01.857146240.59932734.02.01.857146250.83252735.02.01.857146260.53361936.02.01.857146270.42074937.02.01.857146280.13529338.02.01.857146290.85343539.02.01.857146300.00872598310.02.01.857146310.932972311.02.01.857146320.912341312.02.01.857146330.594789313.02.01.857146340.667448314.02.01.857146350.129619315.02.01.857146360.160839316.02.01.857146370.171287317.02.01.857146380.091964318.02.01.857146390.699092319.02.01.857146400.973635320.02.01.857146410.7039711.03.01.857146420.4111712.03.01.857146430.49794413.03.01.857146440.40506414.03.01.857146450.91222615.03.01.857146460.14827616.03.01.857146470.67748417.03.01.857146480.88234918.03.01.857146490.53092619.03.01.857146500.642838110.03.01.857146510.658432111.03.01.857146520.626773112.03.01.857146530.612572113.03.01.857146540.245001114.03.01.857146550.792069115.03.01.857146560.526192116.03.01.857146570.00257547117.03.01.857146580.254354118.03.01.857146590.7493119.03.01.857146600.678182120.03.01.857146610.33589521.04.01.857146620.1399122.04.01.857146630.64056723.04.01.857146640.19862224.04.01.857146650.71757925.04.01.857146660.84454826.04.01.857146670.80497127.04.01.857146680.044827828.04.01.857146690.16045729.04.01.857146700.47854210.04.01.857146710.520805211.04.01.857146720.239102212.04.01.857146730.48137213.04.01.857146740.0372037214.04.01.857146750.951295215.04.01.857146760.82501216.04.01.857146770.543666217.04.01.857146780.0285168218.04.01.857146790.496656219.04.01.857146800.578994220.04.01.857146810.39978531.05.01.857146820.81780232.05.01.857146830.9788933.05.01.857146840.2097634.05.01.857146850.050398535.05.01.857146860.020016936.05.01.857146870.067402437.05.01.857146880.60718438.05.01.857146890.096940639.05.01.857146900.997678310.05.01.857146910.363302311.05.01.857146920.373507312.05.01.857146930.516232313.05.01.857146940.429332314.05.01.857146950.209686315.05.01.857146960.628427316.05.01.857146970.163361317.05.01.857146980.204136318.05.01.857146990.628908319.05.01.857147000.507027320.05.01.857147010.72302731.06.01.857147020.66112832.06.01.857147030.021631533.06.01.857147040.85902634.06.01.857147050.29590135.06.01.857147060.62855936.06.01.857147070.88616237.06.01.857147080.44333738.06.01.857147090.80030739.06.01.857147100.139285310.06.01.857147110.332507311.06.01.857147120.0721975312.06.01.857147130.0490591313.06.01.857147140.158698314.06.01.857147150.531495315.06.01.857147160.637122316.06.01.857147170.939644317.06.01.857147180.422277318.06.01.857147190.813509319.06.01.857147200.347372320.06.01.857147210.54425211.07.01.857147220.1782112.07.01.857147230.21329213.07.01.857147240.5262514.07.01.857147250.78313115.07.01.857147260.31337916.07.01.857147270.54249117.07.01.857147280.7988518.07.01.857147290.94126819.07.01.857147300.132558110.07.01.857147310.77821111.07.01.857147320.154293112.07.01.857147330.844923113.07.01.857147340.521539114.07.01.857147350.404702115.07.01.857147360.599663116.07.01.857147370.847183117.07.01.857147380.772996118.07.01.857147390.918963119.07.01.857147400.975034120.07.01.857147410.33988511.08.01.857147420.5222712.08.01.857147430.87132213.08.01.857147440.53720714.08.01.857147450.39886815.08.01.857147460.45063216.08.01.857147470.7482617.08.01.857147480.62468918.08.01.857147490.013676519.08.01.857147500.9072110.08.01.857147510.0146955111.08.01.857147520.278822112.08.01.857147530.837401113.08.01.857147540.882039114.08.01.857147550.143886115.08.01.857147560.930136116.08.01.857147570.723537117.08.01.857147580.15846118.08.01.857147590.180492119.08.01.857147600.68011120.08.01.857147610.085676321.09.01.857147620.40541622.09.01.857147630.082191423.09.01.857147640.40332524.09.01.857147650.19520925.09.01.857147660.11102826.09.01.857147670.73334827.09.01.857147680.012746428.09.01.857147690.43795229.09.01.857147700.200598210.09.01.857147710.617212211.09.01.857147720.722979212.09.01.857147730.470729213.09.01.857147740.150321214.09.01.857147750.74862215.09.01.857147760.472335216.09.01.857147770.494529217.09.01.857147780.763626218.09.01.857147790.0227635219.09.01.857147800.840077220.09.01.857147810.5440221.010.01.857147820.59368322.010.01.857147830.081361823.010.01.857147840.47615924.010.01.857147850.97976525.010.01.857147860.12643926.010.01.857147870.90961627.010.01.857147880.81017928.010.01.857147890.77359329.010.01.857147900.716338210.010.01.857147910.997593211.010.01.857147920.626561212.010.01.857147930.863135213.010.01.857147940.616682214.010.01.857147950.524924215.010.01.857147960.328629216.010.01.857147970.701369217.010.01.857147980.892134218.010.01.857147990.433993219.010.01.857148000.256179220.010.01.857148010.27814611.01.02.142868020.37917612.01.02.142868030.34171213.01.02.142868040.64389114.01.02.142868050.64158415.01.02.142868060.45158816.01.02.142868070.9513717.01.02.142868080.044898318.01.02.142868090.2949619.01.02.142868100.214963110.01.02.142868110.598476111.01.02.142868120.587132112.01.02.142868130.605828113.01.02.142868140.948937114.01.02.142868150.79141115.01.02.142868160.895442116.01.02.142868170.387846117.01.02.142868180.241727118.01.02.142868190.892079119.01.02.142868200.301301120.01.02.142868210.80171621.02.02.142868220.75644222.02.02.142868230.45995323.02.02.142868240.77176824.02.02.142868250.68582425.02.02.142868260.16888926.02.02.142868270.86690327.02.02.142868280.90322328.02.02.142868290.12352229.02.02.142868300.209047210.02.02.142868310.848592211.02.02.142868320.080642212.02.02.142868330.996668213.02.02.142868340.784776214.02.02.142868350.751999215.02.02.142868360.348607216.02.02.142868370.447439217.02.02.142868380.61729218.02.02.142868390.603523219.02.02.142868400.629854220.02.02.142868410.52443121.03.02.142868420.23937722.03.02.142868430.33519223.03.02.142868440.20776824.03.02.142868450.31370625.03.02.142868460.042303326.03.02.142868470.88694827.03.02.142868480.54127228.03.02.142868490.040951229.03.02.142868500.706612210.03.02.142868510.770923211.03.02.142868520.911544212.03.02.142868530.0340559213.03.02.142868540.891578214.03.02.142868550.445208215.03.02.142868560.0715948216.03.02.142868570.713252217.03.02.142868580.520637218.03.02.142868590.8963219.03.02.142868600.0148999220.03.02.142868610.86412621.04.02.142868620.37577622.04.02.142868630.90931723.04.02.142868640.065830124.04.02.142868650.11710225.04.02.142868660.91817226.04.02.142868670.222227.04.02.142868680.13070228.04.02.142868690.056813429.04.02.142868700.813863210.04.02.142868710.953515211.04.02.142868720.302052212.04.02.142868730.693852213.04.02.142868740.880249214.04.02.142868750.309008215.04.02.142868760.107611216.04.02.142868770.636886217.04.02.142868780.841594218.04.02.142868790.0226591219.04.02.142868800.627508220.04.02.142868810.77570611.05.02.142868820.95949312.05.02.142868830.30974113.05.02.142868840.91749114.05.02.142868850.49308115.05.02.142868860.52429916.05.02.142868870.54663817.05.02.142868880.89047118.05.02.142868890.95374519.05.02.142868900.456182110.05.02.142868910.845555111.05.02.142868920.194535112.05.02.142868930.833235113.05.02.142868940.301641114.05.02.142868950.582491115.05.02.142868960.56439116.05.02.142868970.847492117.05.02.142868980.888436118.05.02.142868990.35155119.05.02.142869000.2815120.05.02.142869010.030578121.06.02.142869020.074669622.06.02.142869030.32519923.06.02.142869040.52997524.06.02.142869050.37888625.06.02.142869060.68139526.06.02.142869070.72299427.06.02.142869080.77225628.06.02.142869090.57642129.06.02.142869100.0237305210.06.02.142869110.270839211.06.02.142869120.469191212.06.02.142869130.254829213.06.02.142869140.14701214.06.02.142869150.228317215.06.02.142869160.882336216.06.02.142869170.0391952217.06.02.142869180.0837184218.06.02.142869190.117018219.06.02.142869200.00229266220.06.02.142869210.81238731.07.02.142869220.0032942232.07.02.142869230.34908933.07.02.142869240.73668634.07.02.142869250.019068835.07.02.142869260.29096236.07.02.142869270.72439437.07.02.142869280.84061738.07.02.142869290.50231139.07.02.142869300.492053310.07.02.142869310.901513311.07.02.142869320.923981312.07.02.142869330.0812542313.07.02.142869340.634293314.07.02.142869350.683911315.07.02.142869360.199389316.07.02.142869370.187319317.07.02.142869380.346075318.07.02.142869390.448225319.07.02.142869400.920461320.07.02.142869410.97963811.08.02.142869420.30501812.08.02.142869430.95258413.08.02.142869440.12216614.08.02.142869450.57255215.08.02.142869460.59780416.08.02.142869470.7060317.08.02.142869480.19505318.08.02.142869490.98223619.08.02.142869500.523556110.08.02.142869510.900778111.08.02.142869520.30361112.08.02.142869530.555841113.08.02.142869540.712664114.08.02.142869550.929809115.08.02.142869560.434937116.08.02.142869570.594135117.08.02.142869580.333069118.08.02.142869590.446761119.08.02.142869600.610795120.08.02.142869610.61096421.09.02.142869620.89800922.09.02.142869630.96559423.09.02.142869640.11500624.09.02.142869650.36407725.09.02.142869660.80172926.09.02.142869670.81635927.09.02.142869680.083443928.09.02.142869690.027385329.09.02.142869700.9499210.09.02.142869710.775786211.09.02.142869720.753572212.09.02.142869730.0894043213.09.02.142869740.00435612214.09.02.142869750.944914215.09.02.142869760.364216.09.02.142869770.756168217.09.02.142869780.874883218.09.02.142869790.593235219.09.02.142869800.861802220.09.02.142869810.74454521.010.02.142869820.84240822.010.02.142869830.0077520523.010.02.142869840.082373224.010.02.142869850.51430225.010.02.142869860.23128326.010.02.142869870.0090170427.010.02.142869880.11103728.010.02.142869890.69164729.010.02.142869900.154272210.010.02.142869910.787818211.010.02.142869920.0585995212.010.02.142869930.250172213.010.02.142869940.952557214.010.02.142869950.358701215.010.02.142869960.702933216.010.02.142869970.0317398217.010.02.142869980.0394014218.010.02.142869990.995901219.010.02.1428610000.328018220.010.02.1428610010.28714921.01.02.4285710020.56960622.01.02.4285710030.32194623.01.02.4285710040.91320424.01.02.4285710050.46323525.01.02.4285710060.82863726.01.02.4285710070.061130527.01.02.4285710080.71074728.01.02.4285710090.40516929.01.02.4285710100.574514210.01.02.4285710110.144865211.01.02.4285710120.270423212.01.02.4285710130.627131213.01.02.4285710140.949148214.01.02.4285710150.354833215.01.02.4285710160.287418216.01.02.4285710170.124233217.01.02.4285710180.00839844218.01.02.4285710190.404633219.01.02.4285710200.652047220.01.02.4285710210.88432511.02.02.4285710220.10639912.02.02.4285710230.42882113.02.02.4285710240.83797814.02.02.4285710250.62434215.02.02.4285710260.020949316.02.02.4285710270.36885817.02.02.4285710280.56475818.02.02.4285710290.17472519.02.02.4285710300.513112110.02.02.4285710310.597459111.02.02.4285710320.404645112.02.02.4285710330.2584113.02.02.4285710340.227242114.02.02.4285710350.650971115.02.02.4285710360.877187116.02.02.4285710370.0681112117.02.02.4285710380.265151118.02.02.4285710390.884535119.02.02.4285710400.233914120.02.02.4285710410.26454311.03.02.4285710420.23831512.03.02.4285710430.03841413.03.02.4285710440.050085514.03.02.4285710450.14323715.03.02.4285710460.75715816.03.02.4285710470.028043917.03.02.4285710480.83867218.03.02.4285710490.80192919.03.02.4285710500.650176110.03.02.4285710510.465118111.03.02.4285710520.852072112.03.02.4285710530.0891727113.03.02.4285710540.479453114.03.02.4285710550.918629115.03.02.4285710560.304136116.03.02.4285710570.459506117.03.02.4285710580.559411118.03.02.4285710590.859322119.03.02.4285710600.831838120.03.02.4285710610.76014121.04.02.4285710620.064857422.04.02.4285710630.11338923.04.02.4285710640.38332824.04.02.4285710650.21899425.04.02.4285710660.67056126.04.02.4285710670.52271227.04.02.4285710680.068917828.04.02.4285710690.31736729.04.02.4285710700.669479210.04.02.4285710710.989543211.04.02.4285710720.0981435212.04.02.4285710730.193144213.04.02.4285710740.425256214.04.02.4285710750.552445215.04.02.4285710760.408196216.04.02.4285710770.3925217.04.02.4285710780.913029218.04.02.4285710790.1764219.04.02.4285710800.414199220.04.02.4285710810.12754821.05.02.4285710820.35725622.05.02.4285710830.15287523.05.02.4285710840.98448524.05.02.4285710850.97481725.05.02.4285710860.51996626.05.02.4285710870.24114427.05.02.4285710880.1667928.05.02.4285710890.88414629.05.02.4285710900.401426210.05.02.4285710910.232491211.05.02.4285710920.283535212.05.02.4285710930.634988213.05.02.4285710940.734819214.05.02.4285710950.513533215.05.02.4285710960.281593216.05.02.4285710970.178105217.05.02.4285710980.412101218.05.02.4285710990.684282219.05.02.4285711000.544374220.05.02.4285711010.81944531.06.02.4285711020.24981432.06.02.4285711030.62033933.06.02.4285711040.91256434.06.02.4285711050.58998135.06.02.4285711060.13723536.06.02.4285711070.2067337.06.02.4285711080.43866138.06.02.4285711090.31235539.06.02.4285711100.0874409310.06.02.4285711110.756141311.06.02.4285711120.235089312.06.02.4285711130.0938669313.06.02.4285711140.334392314.06.02.4285711150.375777315.06.02.4285711160.897558316.06.02.4285711170.914456317.06.02.4285711180.936031318.06.02.4285711190.919161319.06.02.4285711200.71864320.06.02.4285711210.67618321.07.02.4285711220.29314722.07.02.4285711230.28253523.07.02.4285711240.36874524.07.02.4285711250.2255725.07.02.4285711260.38264726.07.02.4285711270.020680327.07.02.4285711280.11856328.07.02.4285711290.95079829.07.02.4285711300.541131210.07.02.4285711310.91034211.07.02.4285711320.334421212.07.02.4285711330.804112213.07.02.4285711340.00488328214.07.02.4285711350.508341215.07.02.4285711360.190418216.07.02.4285711370.324961217.07.02.4285711380.966097218.07.02.4285711390.942233219.07.02.4285711400.452499220.07.02.4285711410.75374411.08.02.4285711420.70057612.08.02.4285711430.35311513.08.02.4285711440.3780414.08.02.4285711450.71642215.08.02.4285711460.59298616.08.02.4285711470.36548417.08.02.4285711480.27925818.08.02.4285711490.0092479219.08.02.4285711500.856131110.08.02.4285711510.791426111.08.02.4285711520.461878112.08.02.4285711530.575029113.08.02.4285711540.798882114.08.02.4285711550.241252115.08.02.4285711560.410908116.08.02.4285711570.965297117.08.02.4285711580.601996118.08.02.4285711590.414777119.08.02.4285711600.642499120.08.02.4285711610.21660911.09.02.4285711620.093144512.09.02.4285711630.15522913.09.02.4285711640.60900414.09.02.4285711650.67274915.09.02.4285711660.52916816.09.02.4285711670.075186717.09.02.4285711680.19981318.09.02.4285711690.95854619.09.02.4285711700.307168110.09.02.4285711710.623578111.09.02.4285711720.511466112.09.02.4285711730.452575113.09.02.4285711740.125185114.09.02.4285711750.648695115.09.02.4285711760.843299116.09.02.4285711770.233557117.09.02.4285711780.727791118.09.02.4285711790.0859418119.09.02.4285711800.11383120.09.02.4285711810.095850811.010.02.4285711820.46720712.010.02.4285711830.66722713.010.02.4285711840.54913614.010.02.4285711850.40256415.010.02.4285711860.27265116.010.02.4285711870.13031117.010.02.4285711880.39370818.010.02.4285711890.030900819.010.02.4285711900.931337110.010.02.4285711910.368228111.010.02.4285711920.860709112.010.02.4285711930.247695113.010.02.4285711940.111034114.010.02.4285711950.520862115.010.02.4285711960.0234646116.010.02.4285711970.982111117.010.02.4285711980.769722118.010.02.4285711990.304608119.010.02.4285712000.741135120.010.02.4285712010.4493721.01.02.7142912020.093733222.01.02.7142912030.8756223.01.02.7142912040.98180624.01.02.7142912050.887725.01.02.7142912060.061334626.01.02.7142912070.0056679227.01.02.7142912080.474728.01.02.7142912090.37141229.01.02.7142912100.253044210.01.02.7142912110.596602211.01.02.7142912120.855654212.01.02.7142912130.224032213.01.02.7142912140.470776214.01.02.7142912150.591087215.01.02.7142912160.960856216.01.02.7142912170.329502217.01.02.7142912180.699737218.01.02.7142912190.479371219.01.02.7142912200.376571220.01.02.7142912210.74157731.02.02.7142912220.68766632.02.02.7142912230.72391333.02.02.7142912240.50075334.02.02.7142912250.24354735.02.02.7142912260.63688936.02.02.7142912270.49675537.02.02.7142912280.77698238.02.02.7142912290.31144139.02.02.7142912300.978228310.02.02.7142912310.594336311.02.02.7142912320.322694312.02.02.7142912330.564153313.02.02.7142912340.732019314.02.02.7142912350.844461315.02.02.7142912360.777739316.02.02.7142912370.775929317.02.02.7142912380.0244775318.02.02.7142912390.244818319.02.02.7142912400.411689320.02.02.7142912410.49375721.03.02.7142912420.32664222.03.02.7142912430.12223923.03.02.7142912440.67159724.03.02.7142912450.97228225.03.02.7142912460.91261126.03.02.7142912470.43604427.03.02.7142912480.45813128.03.02.7142912490.54027829.03.02.7142912500.968083210.03.02.7142912510.045429211.03.02.7142912520.0808669212.03.02.7142912530.293992213.03.02.7142912540.887566214.03.02.7142912550.509387215.03.02.7142912560.707765216.03.02.7142912570.69817217.03.02.7142912580.973688218.03.02.7142912590.7911219.03.02.7142912600.939361220.03.02.7142912610.56549421.04.02.7142912620.65594422.04.02.7142912630.71226523.04.02.7142912640.45412824.04.02.7142912650.88462525.04.02.7142912660.59739326.04.02.7142912670.87469127.04.02.7142912680.89054128.04.02.7142912690.87765629.04.02.7142912700.679651210.04.02.7142912710.495619211.04.02.7142912720.6253212.04.02.7142912730.0892372213.04.02.7142912740.533639214.04.02.7142912750.939005215.04.02.7142912760.473395216.04.02.7142912770.739554217.04.02.7142912780.420635218.04.02.7142912790.535449219.04.02.7142912800.91179220.04.02.7142912810.55370231.05.02.7142912820.086038532.05.02.7142912830.12633633.05.02.7142912840.52770434.05.02.7142912850.08215635.05.02.7142912860.6193636.05.02.7142912870.82767337.05.02.7142912880.68226638.05.02.7142912890.11823739.05.02.7142912900.769657310.05.02.7142912910.992637311.05.02.7142912920.534365312.05.02.7142912930.0376261313.05.02.7142912940.288022314.05.02.7142912950.945757315.05.02.7142912960.807065316.05.02.7142912970.949931317.05.02.7142912980.217798318.05.02.7142912990.260525319.05.02.7142913000.196976320.05.02.7142913010.33237431.06.02.7142913020.31953232.06.02.7142913030.70457333.06.02.7142913040.49592234.06.02.7142913050.27064235.06.02.7142913060.7203936.06.02.7142913070.66096637.06.02.7142913080.56088838.06.02.7142913090.13392739.06.02.7142913100.170469310.06.02.7142913110.168835311.06.02.7142913120.307268312.06.02.7142913130.114524313.06.02.7142913140.232911314.06.02.7142913150.59076315.06.02.7142913160.0111264316.06.02.7142913170.83535317.06.02.7142913180.584253318.06.02.7142913190.525176319.06.02.7142913200.747817320.06.02.7142913210.45889811.07.02.7142913220.73040512.07.02.7142913230.96556813.07.02.7142913240.094186614.07.02.7142913250.98356515.07.02.7142913260.4001216.07.02.7142913270.035172817.07.02.7142913280.44003618.07.02.7142913290.11211419.07.02.7142913300.695555110.07.02.7142913310.623873111.07.02.7142913320.406847112.07.02.7142913330.526437113.07.02.7142913340.791182114.07.02.7142913350.0629044115.07.02.7142913360.0445181116.07.02.7142913370.0379001117.07.02.7142913380.49959118.07.02.7142913390.10123119.07.02.7142913400.935467120.07.02.7142913410.3025611.08.02.7142913420.9238712.08.02.7142913430.051194813.08.02.7142913440.71148114.08.02.7142913450.14956615.08.02.7142913460.15746216.08.02.7142913470.43355317.08.02.7142913480.580518.08.02.7142913490.42622319.08.02.7142913500.17689110.08.02.7142913510.886508111.08.02.7142913520.0418602112.08.02.7142913530.571802113.08.02.7142913540.0219232114.08.02.7142913550.822435115.08.02.7142913560.398938116.08.02.7142913570.308263117.08.02.7142913580.465929118.08.02.7142913590.299868119.08.02.7142913600.704021120.08.02.7142913610.75292121.09.02.7142913620.36221222.09.02.7142913630.99578923.09.02.7142913640.7314624.09.02.7142913650.11986425.09.02.7142913660.39373626.09.02.7142913670.58803427.09.02.7142913680.53290128.09.02.7142913690.58775129.09.02.7142913700.365813210.09.02.7142913710.435039211.09.02.7142913720.61727212.09.02.7142913730.440485213.09.02.7142913740.427523214.09.02.7142913750.370808215.09.02.7142913760.526064216.09.02.7142913770.712662217.09.02.7142913780.494996218.09.02.7142913790.754203219.09.02.7142913800.579982220.09.02.7142913810.073917321.010.02.7142913820.2956122.010.02.7142913830.10555823.010.02.7142913840.22080524.010.02.7142913850.44579625.010.02.7142913860.86054126.010.02.7142913870.83085527.010.02.7142913880.84944728.010.02.7142913890.58300829.010.02.7142913900.269107210.010.02.7142913910.0326708211.010.02.7142913920.639739212.010.02.7142913930.571425213.010.02.7142913940.440833214.010.02.7142913950.124527215.010.02.7142913960.916555216.010.02.7142913970.335023217.010.02.7142913980.853878218.010.02.7142913990.0724334219.010.02.7142914000.802778220.010.02.7142914010.79667711.01.03.014020.61817312.01.03.014030.17661113.01.03.014040.33308814.01.03.014050.098890515.01.03.014060.71201816.01.03.014070.31419417.01.03.014080.91336618.01.03.014090.86075219.01.03.014100.281022110.01.03.014110.0926933111.01.03.014120.294175112.01.03.014130.836663113.01.03.014140.955546114.01.03.014150.562709115.01.03.014160.744991116.01.03.014170.638534117.01.03.014180.918923118.01.03.014190.0944113119.01.03.014200.26933120.01.03.014210.80748431.02.03.014220.23406732.02.03.014230.47145133.02.03.014240.94461134.02.03.014250.71300935.02.03.014260.63483236.02.03.014270.38024137.02.03.014280.72788738.02.03.014290.44822639.02.03.014300.554502310.02.03.014310.770759311.02.03.014320.968204312.02.03.014330.460192313.02.03.014340.428321314.02.03.014350.44186315.02.03.014360.445424316.02.03.014370.420346317.02.03.014380.470121318.02.03.014390.757137319.02.03.014400.837691320.02.03.014410.023723221.03.03.014420.19661422.03.03.014430.53944623.03.03.014440.095793724.03.03.014450.57695725.03.03.014460.13139326.03.03.014470.065761327.03.03.014480.77979528.03.03.014490.36339329.03.03.014500.88003210.03.03.014510.558035211.03.03.014520.460324212.03.03.014530.857551213.03.03.014540.322833214.03.03.014550.782257215.03.03.014560.00994732216.03.03.014570.462997217.03.03.014580.800132218.03.03.014590.0654462219.03.03.014600.047907220.03.03.014610.53114631.04.03.014620.91673132.04.03.014630.47595833.04.03.014640.573734.04.03.014650.07535835.04.03.014660.10023636.04.03.014670.11412837.04.03.014680.27643138.04.03.014690.93374539.04.03.014700.835295310.04.03.014710.93878311.04.03.014720.133284312.04.03.014730.44161313.04.03.014740.820586314.04.03.014750.988839315.04.03.014760.20565316.04.03.014770.139827317.04.03.014780.707052318.04.03.014790.0453663319.04.03.014800.643593320.04.03.014810.52018631.05.03.014820.45550232.05.03.014830.87901633.05.03.014840.96814534.05.03.014850.46651835.05.03.014860.70338136.05.03.014870.33178737.05.03.014880.84197438.05.03.014890.51236539.05.03.014900.355299310.05.03.014910.0833277311.05.03.014920.700652312.05.03.014930.619397313.05.03.014940.996674314.05.03.014950.43141315.05.03.014960.00849174316.05.03.014970.825292317.05.03.014980.674813318.05.03.014990.0733366319.05.03.015000.20111320.05.03.015010.050770631.06.03.015020.48745132.06.03.015030.90437533.06.03.015040.036483934.06.03.015050.76531235.06.03.015060.2357536.06.03.015070.099982137.06.03.015080.27013738.06.03.015090.8742539.06.03.015100.0628119310.06.03.015110.798926311.06.03.015120.614607312.06.03.015130.327533313.06.03.015140.314403314.06.03.015150.221024315.06.03.015160.529645316.06.03.015170.858346317.06.03.015180.388774318.06.03.015190.553596319.06.03.015200.905643320.06.03.015210.40759711.07.03.015220.13815412.07.03.015230.030105713.07.03.015240.37461814.07.03.015250.81190215.07.03.015260.66319116.07.03.015270.63933617.07.03.015280.71743718.07.03.015290.61143919.07.03.015300.387356110.07.03.015310.0614506111.07.03.015320.974046112.07.03.015330.149766113.07.03.015340.889655114.07.03.015350.326893115.07.03.015360.750677116.07.03.015370.550244117.07.03.015380.286407118.07.03.015390.191794119.07.03.015400.933805120.07.03.015410.089555131.08.03.015420.93331532.08.03.015430.88823633.08.03.015440.26458734.08.03.015450.34557235.08.03.015460.99898436.08.03.015470.070006437.08.03.015480.95430638.08.03.015490.93936739.08.03.015500.258567310.08.03.015510.211486311.08.03.015520.00446026312.08.03.015530.147554313.08.03.015540.230221314.08.03.015550.18092315.08.03.015560.352828316.08.03.015570.394193317.08.03.015580.281646318.08.03.015590.908171319.08.03.015600.966111320.08.03.015610.31335611.09.03.015620.86280412.09.03.015630.75365313.09.03.015640.067278614.09.03.015650.58710115.09.03.015660.16342816.09.03.015670.8689117.09.03.015680.56812518.09.03.015690.18706419.09.03.015700.628989110.09.03.015710.684997111.09.03.015720.432175112.09.03.015730.353083113.09.03.015740.0755925114.09.03.015750.467695115.09.03.015760.20133116.09.03.015770.616482117.09.03.015780.588875118.09.03.015790.2252119.09.03.015800.135916120.09.03.015810.78814631.010.03.015820.49725332.010.03.015830.46463233.010.03.015840.8820334.010.03.015850.40118435.010.03.015860.03771436.010.03.015870.68016837.010.03.015880.97016938.010.03.015890.25251439.010.03.015900.688883310.010.03.015910.428192311.010.03.015920.401974312.010.03.015930.0786341313.010.03.015940.0327498314.010.03.015950.101693315.010.03.015960.602589316.010.03.015970.654262317.010.03.015980.292562318.010.03.015990.471383319.010.03.016000.605117320.010.03.016010.69061931.01.03.2857116020.032913532.01.03.2857116030.36922733.01.03.2857116040.8279634.01.03.2857116050.75630135.01.03.2857116060.96813836.01.03.2857116070.17241337.01.03.2857116080.17483638.01.03.2857116090.32999239.01.03.2857116100.0421957310.01.03.2857116110.985636311.01.03.2857116120.641402312.01.03.2857116130.991343313.01.03.2857116140.898563314.01.03.2857116150.798868315.01.03.2857116160.382908316.01.03.2857116170.927244317.01.03.2857116180.20266318.01.03.2857116190.432821319.01.03.2857116200.987362320.01.03.2857116210.88556431.02.03.2857116220.047598632.02.03.2857116230.47697133.02.03.2857116240.84605734.02.03.2857116250.39886235.02.03.2857116260.42796236.02.03.2857116270.901537.02.03.2857116280.69366838.02.03.2857116290.43586239.02.03.2857116300.721763310.02.03.2857116310.915048311.02.03.2857116320.971808312.02.03.2857116330.373888313.02.03.2857116340.790218314.02.03.2857116350.491729315.02.03.2857116360.370251316.02.03.2857116370.505305317.02.03.2857116380.460365318.02.03.2857116390.834795319.02.03.2857116400.148754320.02.03.2857116410.52835631.03.03.2857116420.40014832.03.03.2857116430.8228333.03.03.2857116440.16189834.03.03.2857116450.40489735.03.03.2857116460.26162836.03.03.2857116470.87295837.03.03.2857116480.63134938.03.03.2857116490.93448239.03.03.2857116500.250589310.03.03.2857116510.624896311.03.03.2857116520.28446312.03.03.2857116530.485126313.03.03.2857116540.484326314.03.03.2857116550.237642315.03.03.2857116560.433716316.03.03.2857116570.677569317.03.03.2857116580.581095318.03.03.2857116590.175546319.03.03.2857116600.399331320.03.03.2857116610.0023328211.04.03.2857116620.75569112.04.03.2857116630.22356813.04.03.2857116640.22220514.04.03.2857116650.11438115.04.03.2857116660.88473816.04.03.2857116670.8885517.04.03.2857116680.9112618.04.03.2857116690.95032219.04.03.2857116700.754304110.04.03.2857116710.569282111.04.03.2857116720.83298112.04.03.2857116730.0506167113.04.03.2857116740.564752114.04.03.2857116750.21157115.04.03.2857116760.513697116.04.03.2857116770.680631117.04.03.2857116780.721088118.04.03.2857116790.655881119.04.03.2857116800.370779120.04.03.2857116810.55804511.05.03.2857116820.58201712.05.03.2857116830.59649313.05.03.2857116840.33142514.05.03.2857116850.77813715.05.03.2857116860.70261816.05.03.2857116870.68731317.05.03.2857116880.66324318.05.03.2857116890.78394519.05.03.2857116900.837893110.05.03.2857116910.722776111.05.03.2857116920.0099973112.05.03.2857116930.699787113.05.03.2857116940.682949114.05.03.2857116950.38502115.05.03.2857116960.508337116.05.03.2857116970.921432117.05.03.2857116980.934868118.05.03.2857116990.533993119.05.03.2857117000.613539120.05.03.2857117010.96076521.06.03.2857117020.66531622.06.03.2857117030.92952923.06.03.2857117040.18604324.06.03.2857117050.34205325.06.03.2857117060.52552626.06.03.2857117070.38240827.06.03.2857117080.48943328.06.03.2857117090.89194329.06.03.2857117100.504573210.06.03.2857117110.469345211.06.03.2857117120.876488212.06.03.2857117130.649079213.06.03.2857117140.379106214.06.03.2857117150.779491215.06.03.2857117160.801771216.06.03.2857117170.77201217.06.03.2857117180.122365218.06.03.2857117190.169958219.06.03.2857117200.510634220.06.03.2857117210.12274631.07.03.2857117220.67381832.07.03.2857117230.49769333.07.03.2857117240.15809834.07.03.2857117250.78759635.07.03.2857117260.006262536.07.03.2857117270.88130337.07.03.2857117280.6344538.07.03.2857117290.37727339.07.03.2857117300.333828310.07.03.2857117310.398531311.07.03.2857117320.0812389312.07.03.2857117330.677605313.07.03.2857117340.879949314.07.03.2857117350.666236315.07.03.2857117360.190928316.07.03.2857117370.25159317.07.03.2857117380.894177318.07.03.2857117390.588823319.07.03.2857117400.0399461320.07.03.2857117410.18854131.08.03.2857117420.015529932.08.03.2857117430.94917633.08.03.2857117440.041424234.08.03.2857117450.7950635.08.03.2857117460.4440236.08.03.2857117470.60783737.08.03.2857117480.38324838.08.03.2857117490.60650439.08.03.2857117500.50728310.08.03.2857117510.618823311.08.03.2857117520.703268312.08.03.2857117530.92059313.08.03.2857117540.521778314.08.03.2857117550.626719315.08.03.2857117560.730225316.08.03.2857117570.36413317.08.03.2857117580.200217318.08.03.2857117590.39389319.08.03.2857117600.855319320.08.03.2857117610.41706311.09.03.2857117620.25201112.09.03.2857117630.043747513.09.03.2857117640.28391114.09.03.2857117650.51159215.09.03.2857117660.13177116.09.03.2857117670.13888617.09.03.2857117680.4794618.09.03.2857117690.062004119.09.03.2857117700.750025110.09.03.2857117710.218317111.09.03.2857117720.706512112.09.03.2857117730.90881113.09.03.2857117740.837799114.09.03.2857117750.612597115.09.03.2857117760.376087116.09.03.2857117770.587565117.09.03.2857117780.747039118.09.03.2857117790.370966119.09.03.2857117800.724509120.09.03.2857117810.87354211.010.03.2857117820.96761412.010.03.2857117830.62381213.010.03.2857117840.33954614.010.03.2857117850.7335615.010.03.2857117860.41608316.010.03.2857117870.85191817.010.03.2857117880.031279418.010.03.2857117890.78831419.010.03.2857117900.724878110.010.03.2857117910.904789111.010.03.2857117920.412299112.010.03.2857117930.456759113.010.03.2857117940.653976114.010.03.2857117950.826357115.010.03.2857117960.401335116.010.03.2857117970.954213117.010.03.2857117980.409398118.010.03.2857117990.040759119.010.03.2857118000.344157120.010.03.2857118010.70626921.01.03.5714318020.13423522.01.03.5714318030.37491723.01.03.5714318040.75113924.01.03.5714318050.63006125.01.03.5714318060.71841626.01.03.5714318070.1656527.01.03.5714318080.86848828.01.03.5714318090.54536629.01.03.5714318100.721401210.01.03.5714318110.578655211.01.03.5714318120.389348212.01.03.5714318130.336009213.01.03.5714318140.911658214.01.03.5714318150.772425215.01.03.5714318160.738336216.01.03.5714318170.309687217.01.03.5714318180.305446218.01.03.5714318190.383703219.01.03.5714318200.812481220.01.03.5714318210.52142511.02.03.5714318220.011178812.02.03.5714318230.16502213.02.03.5714318240.83086414.02.03.5714318250.85718615.02.03.5714318260.43555816.02.03.5714318270.71467417.02.03.5714318280.073943118.02.03.5714318290.28819719.02.03.5714318300.972508110.02.03.5714318310.117483111.02.03.5714318320.118453112.02.03.5714318330.360437113.02.03.5714318340.229146114.02.03.5714318350.274805115.02.03.5714318360.326353116.02.03.5714318370.833047117.02.03.5714318380.2395118.02.03.5714318390.517013119.02.03.5714318400.486948120.02.03.5714318410.50294711.03.03.5714318420.61913712.03.03.5714318430.90447813.03.03.5714318440.69650114.03.03.5714318450.36272815.03.03.5714318460.41346716.03.03.5714318470.46687117.03.03.5714318480.056836918.03.03.5714318490.57254919.03.03.5714318500.499037110.03.03.5714318510.461015111.03.03.5714318520.580844112.03.03.5714318530.355407113.03.03.5714318540.212687114.03.03.5714318550.311926115.03.03.5714318560.9287116.03.03.5714318570.654479117.03.03.5714318580.254141118.03.03.5714318590.1721119.03.03.5714318600.365216120.03.03.5714318610.24887331.04.03.5714318620.82472532.04.03.5714318630.5136433.04.03.5714318640.7480734.04.03.5714318650.38623135.04.03.5714318660.74219236.04.03.5714318670.89979337.04.03.5714318680.56518638.04.03.5714318690.29349439.04.03.5714318700.887778310.04.03.5714318710.308565311.04.03.5714318720.856986312.04.03.5714318730.498827313.04.03.5714318740.0881406314.04.03.5714318750.000864088315.04.03.5714318760.68492316.04.03.5714318770.463647317.04.03.5714318780.166264318.04.03.5714318790.285474319.04.03.5714318800.159305320.04.03.5714318810.68891721.05.03.5714318820.18726622.05.03.5714318830.36080523.05.03.5714318840.12947924.05.03.5714318850.39969625.05.03.5714318860.89987826.05.03.5714318870.87678727.05.03.5714318880.59476128.05.03.5714318890.725829.05.03.5714318900.11236210.05.03.5714318910.698238211.05.03.5714318920.576622212.05.03.5714318930.130851213.05.03.5714318940.109058214.05.03.5714318950.587448215.05.03.5714318960.526451216.05.03.5714318970.0551838217.05.03.5714318980.553457218.05.03.5714318990.142474219.05.03.5714319000.321827220.05.03.5714319010.84557911.06.03.5714319020.86666712.06.03.5714319030.48251713.06.03.5714319040.15062714.06.03.5714319050.20357415.06.03.5714319060.68290916.06.03.5714319070.097990217.06.03.5714319080.75361118.06.03.5714319090.52397119.06.03.5714319100.586635110.06.03.5714319110.950484111.06.03.5714319120.558236112.06.03.5714319130.249963113.06.03.5714319140.772892114.06.03.5714319150.355056115.06.03.5714319160.264778116.06.03.5714319170.961708117.06.03.5714319180.142216118.06.03.5714319190.812686119.06.03.5714319200.918084120.06.03.5714319210.018943931.07.03.5714319220.37880432.07.03.5714319230.55079833.07.03.5714319240.012239334.07.03.5714319250.63914535.07.03.5714319260.58104936.07.03.5714319270.69341937.07.03.5714319280.43828238.07.03.5714319290.4945939.07.03.5714319300.238171310.07.03.5714319310.328911311.07.03.5714319320.761171312.07.03.5714319330.454617313.07.03.5714319340.284188314.07.03.5714319350.200758315.07.03.5714319360.680624316.07.03.5714319370.224508317.07.03.5714319380.412871318.07.03.5714319390.769942319.07.03.5714319400.932038320.07.03.5714319410.39024211.08.03.5714319420.89050112.08.03.5714319430.77319313.08.03.5714319440.72394414.08.03.5714319450.58085215.08.03.5714319460.17378416.08.03.5714319470.47019917.08.03.5714319480.48193118.08.03.5714319490.21087619.08.03.5714319500.4528110.08.03.5714319510.638228111.08.03.5714319520.121115112.08.03.5714319530.807469113.08.03.5714319540.339186114.08.03.5714319550.216686115.08.03.5714319560.752408116.08.03.5714319570.839896117.08.03.5714319580.0605329118.08.03.5714319590.957001119.08.03.5714319600.495101120.08.03.5714319610.86863521.09.03.5714319620.9917722.09.03.5714319630.33995523.09.03.5714319640.49424124.09.03.5714319650.25465325.09.03.5714319660.21220226.09.03.5714319670.48436727.09.03.5714319680.64763328.09.03.5714319690.013958929.09.03.5714319700.27609210.09.03.5714319710.637548211.09.03.5714319720.224021212.09.03.5714319730.890224213.09.03.5714319740.656984214.09.03.5714319750.477992215.09.03.5714319760.909142216.09.03.5714319770.264959217.09.03.5714319780.424615218.09.03.5714319790.41238219.09.03.5714319800.933016220.09.03.5714319810.78611321.010.03.5714319820.31952422.010.03.5714319830.22321923.010.03.5714319840.56564924.010.03.5714319850.50240425.010.03.5714319860.062754726.010.03.5714319870.77657727.010.03.5714319880.36244728.010.03.5714319890.56543229.010.03.5714319900.617683210.010.03.5714319910.153044211.010.03.5714319920.714703212.010.03.5714319930.477718213.010.03.5714319940.298397214.010.03.5714319950.546962215.010.03.5714319960.942111216.010.03.5714319970.769402217.010.03.5714319980.973381218.010.03.5714319990.943013219.010.03.5714320000.180376220.010.03.5714320010.28208811.01.03.8571420020.92149512.01.03.8571420030.27379713.01.03.8571420040.74198414.01.03.8571420050.1014215.01.03.8571420060.54723316.01.03.8571420070.0083970617.01.03.8571420080.33762618.01.03.8571420090.67533519.01.03.8571420100.634818110.01.03.8571420110.431359111.01.03.8571420120.451907112.01.03.8571420130.828141113.01.03.8571420140.296673114.01.03.8571420150.850284115.01.03.8571420160.743762116.01.03.8571420170.498218117.01.03.8571420180.896171118.01.03.8571420190.952703119.01.03.8571420200.546188120.01.03.8571420210.062424221.02.03.8571420220.38847622.02.03.8571420230.34068823.02.03.8571420240.58296824.02.03.8571420250.18856825.02.03.8571420260.49555726.02.03.8571420270.77574427.02.03.8571420280.75150128.02.03.8571420290.43806829.02.03.8571420300.73918210.02.03.8571420310.814459211.02.03.8571420320.500993212.02.03.8571420330.70444213.02.03.8571420340.283646214.02.03.8571420350.961169215.02.03.8571420360.026722216.02.03.8571420370.440241217.02.03.8571420380.310525218.02.03.8571420390.761323219.02.03.8571420400.724765220.02.03.8571420410.81503631.03.03.8571420420.12549432.03.03.8571420430.82901933.03.03.8571420440.077600734.03.03.8571420450.74696535.03.03.8571420460.028919536.03.03.8571420470.20748837.03.03.8571420480.45839738.03.03.8571420490.89467239.03.03.8571420500.565713310.03.03.8571420510.620419311.03.03.8571420520.117398312.03.03.8571420530.720751313.03.03.8571420540.364807314.03.03.8571420550.770106315.03.03.8571420560.471455316.03.03.8571420570.171133317.03.03.8571420580.0811609318.03.03.8571420590.686588319.03.03.8571420600.786295320.03.03.8571420610.6867821.04.03.8571420620.59786322.04.03.8571420630.38865423.04.03.8571420640.97455124.04.03.8571420650.22543325.04.03.8571420660.031566926.04.03.8571420670.35376127.04.03.8571420680.97271828.04.03.8571420690.63451729.04.03.8571420700.349471210.04.03.8571420710.0362196211.04.03.8571420720.945115212.04.03.8571420730.649954213.04.03.8571420740.361916214.04.03.8571420750.888665215.04.03.8571420760.521349216.04.03.8571420770.134687217.04.03.8571420780.770724218.04.03.8571420790.877287219.04.03.8571420800.822133220.04.03.8571420810.058347131.05.03.8571420820.29343232.05.03.8571420830.40578733.05.03.8571420840.21276134.05.03.8571420850.22595435.05.03.8571420860.73620936.05.03.8571420870.65936437.05.03.8571420880.40067238.05.03.8571420890.77853239.05.03.8571420900.975779310.05.03.8571420910.864167311.05.03.8571420920.544467312.05.03.8571420930.63752313.05.03.8571420940.559529314.05.03.8571420950.481239315.05.03.8571420960.536911316.05.03.8571420970.879753317.05.03.8571420980.0829557318.05.03.8571420990.0745826319.05.03.8571421000.66694320.05.03.8571421010.36552331.06.03.8571421020.77669632.06.03.8571421030.64059433.06.03.8571421040.14647134.06.03.8571421050.29610735.06.03.8571421060.79142436.06.03.8571421070.24405537.06.03.8571421080.30099538.06.03.8571421090.46470739.06.03.8571421100.993864310.06.03.8571421110.6395311.06.03.8571421120.16204312.06.03.8571421130.466503313.06.03.8571421140.0288042314.06.03.8571421150.270968315.06.03.8571421160.456757316.06.03.8571421170.0713247317.06.03.8571421180.526911318.06.03.8571421190.742019319.06.03.8571421200.877894320.06.03.8571421210.64649121.07.03.8571421220.95550122.07.03.8571421230.7667423.07.03.8571421240.60396624.07.03.8571421250.080091425.07.03.8571421260.0040021626.07.03.8571421270.79018627.07.03.8571421280.041211328.07.03.8571421290.077111429.07.03.8571421300.764389210.07.03.8571421310.16806211.07.03.8571421320.247697212.07.03.8571421330.989223213.07.03.8571421340.930089214.07.03.8571421350.45222215.07.03.8571421360.165627216.07.03.8571421370.139877217.07.03.8571421380.145984218.07.03.8571421390.684825219.07.03.8571421400.847869220.07.03.8571421410.60030511.08.03.8571421420.96618512.08.03.8571421430.70146513.08.03.8571421440.95590914.08.03.8571421450.42253615.08.03.8571421460.66653216.08.03.8571421470.69199217.08.03.8571421480.97662918.08.03.8571421490.18010419.08.03.8571421500.195184110.08.03.8571421510.238465111.08.03.8571421520.204569112.08.03.8571421530.890361113.08.03.8571421540.166245114.08.03.8571421550.721948115.08.03.8571421560.306388116.08.03.8571421570.200195117.08.03.8571421580.853042118.08.03.8571421590.810841119.08.03.8571421600.735132120.08.03.8571421610.53450311.09.03.8571421620.040966612.09.03.8571421630.70158713.09.03.8571421640.118514.09.03.8571421650.51330115.09.03.8571421660.19816116.09.03.8571421670.53919717.09.03.8571421680.62355718.09.03.8571421690.85397919.09.03.8571421700.510796110.09.03.8571421710.895657111.09.03.8571421720.0105247112.09.03.8571421730.702577113.09.03.8571421740.191694114.09.03.8571421750.891009115.09.03.8571421760.141607116.09.03.8571421770.89614117.09.03.8571421780.518038118.09.03.8571421790.50083119.09.03.8571421800.67852120.09.03.8571421810.0071871411.010.03.8571421820.49202512.010.03.8571421830.1565713.010.03.8571421840.070825814.010.03.8571421850.28706515.010.03.8571421860.17243216.010.03.8571421870.63942217.010.03.8571421880.77021118.010.03.8571421890.054323719.010.03.8571421900.759075110.010.03.8571421910.150255111.010.03.8571421920.123565112.010.03.8571421930.345656113.010.03.8571421940.591536114.010.03.8571421950.117862115.010.03.8571421960.990667116.010.03.8571421970.511444117.010.03.8571421980.568136118.010.03.8571421990.924017119.010.03.8571422000.570172120.010.03.8571422010.067496921.01.04.1428622020.91341922.01.04.1428622030.012474923.01.04.1428622040.62969724.01.04.1428622050.20373725.01.04.1428622060.91603726.01.04.1428622070.81806527.01.04.1428622080.72617228.01.04.1428622090.29114429.01.04.1428622100.83962210.01.04.1428622110.895048211.01.04.1428622120.930103212.01.04.1428622130.646564213.01.04.1428622140.0564806214.01.04.1428622150.885251215.01.04.1428622160.390754216.01.04.1428622170.973477217.01.04.1428622180.694237218.01.04.1428622190.284752219.01.04.1428622200.0145565220.01.04.1428622210.22349521.02.04.1428622220.56821922.02.04.1428622230.39330423.02.04.1428622240.61907924.02.04.1428622250.64470425.02.04.1428622260.97503226.02.04.1428622270.98054127.02.04.1428622280.31385228.02.04.1428622290.095567629.02.04.1428622300.839994210.02.04.1428622310.927682211.02.04.1428622320.519094212.02.04.1428622330.136293213.02.04.1428622340.827673214.02.04.1428622350.0423176215.02.04.1428622360.390203216.02.04.1428622370.609172217.02.04.1428622380.598553218.02.04.1428622390.843328219.02.04.1428622400.556539220.02.04.1428622410.53350121.03.04.1428622420.80126822.03.04.1428622430.21102623.03.04.1428622440.43906124.03.04.1428622450.15029425.03.04.1428622460.12974226.03.04.1428622470.142427.03.04.1428622480.33108528.03.04.1428622490.33132729.03.04.1428622500.76831210.03.04.1428622510.551778211.03.04.1428622520.267054212.03.04.1428622530.0588184213.03.04.1428622540.67571214.03.04.1428622550.938043215.03.04.1428622560.3386216.03.04.1428622570.0815002217.03.04.1428622580.416541218.03.04.1428622590.522888219.03.04.1428622600.142233220.03.04.1428622610.28348831.04.04.1428622620.43506632.04.04.1428622630.82074833.04.04.1428622640.078700934.04.04.1428622650.085185935.04.04.1428622660.20254536.04.04.1428622670.12167337.04.04.1428622680.9610438.04.04.1428622690.782139.04.04.1428622700.538378310.04.04.1428622710.495693311.04.04.1428622720.697367312.04.04.1428622730.540019313.04.04.1428622740.656319314.04.04.1428622750.382254315.04.04.1428622760.376374316.04.04.1428622770.58241317.04.04.1428622780.728668318.04.04.1428622790.213506319.04.04.1428622800.224663320.04.04.1428622810.51354921.05.04.1428622820.37242422.05.04.1428622830.8650623.05.04.1428622840.004061824.05.04.1428622850.45161625.05.04.1428622860.021521926.05.04.1428622870.38298527.05.04.1428622880.23094328.05.04.1428622890.15903829.05.04.1428622900.340865210.05.04.1428622910.00106203211.05.04.1428622920.204224212.05.04.1428622930.650528213.05.04.1428622940.31637214.05.04.1428622950.702653215.05.04.1428622960.440756216.05.04.1428622970.406986217.05.04.1428622980.389066218.05.04.1428622990.0261235219.05.04.1428623000.581561220.05.04.1428623010.79719131.06.04.1428623020.15610132.06.04.1428623030.28651733.06.04.1428623040.52513834.06.04.1428623050.85727835.06.04.1428623060.3269336.06.04.1428623070.2484337.06.04.1428623080.66611838.06.04.1428623090.93606439.06.04.1428623100.645287310.06.04.1428623110.392034311.06.04.1428623120.473419312.06.04.1428623130.635553313.06.04.1428623140.063698314.06.04.1428623150.645969315.06.04.1428623160.575586316.06.04.1428623170.994781317.06.04.1428623180.945616318.06.04.1428623190.939993319.06.04.1428623200.170411320.06.04.1428623210.32975231.07.04.1428623220.85820832.07.04.1428623230.50712133.07.04.1428623240.1904334.07.04.1428623250.42002735.07.04.1428623260.5552536.07.04.1428623270.72587537.07.04.1428623280.97764638.07.04.1428623290.21595739.07.04.1428623300.37472310.07.04.1428623310.767778311.07.04.1428623320.245275312.07.04.1428623330.0804905313.07.04.1428623340.0607783314.07.04.1428623350.299912315.07.04.1428623360.722642316.07.04.1428623370.367558317.07.04.1428623380.586807318.07.04.1428623390.302925319.07.04.1428623400.413714320.07.04.1428623410.41854611.08.04.1428623420.37227412.08.04.1428623430.51487813.08.04.1428623440.50596814.08.04.1428623450.96434915.08.04.1428623460.16629916.08.04.1428623470.12253217.08.04.1428623480.048527218.08.04.1428623490.51549519.08.04.1428623500.415021110.08.04.1428623510.711631111.08.04.1428623520.439778112.08.04.1428623530.496046113.08.04.1428623540.453157114.08.04.1428623550.185243115.08.04.1428623560.53252116.08.04.1428623570.83584117.08.04.1428623580.975681118.08.04.1428623590.993824119.08.04.1428623600.196552120.08.04.1428623610.076796631.09.04.1428623620.52727132.09.04.1428623630.44191133.09.04.1428623640.46395634.09.04.1428623650.24991535.09.04.1428623660.14677836.09.04.1428623670.97111937.09.04.1428623680.88542138.09.04.1428623690.099220739.09.04.1428623700.925363310.09.04.1428623710.044798311.09.04.1428623720.406266312.09.04.1428623730.99581313.09.04.1428623740.147221314.09.04.1428623750.374958315.09.04.1428623760.26308316.09.04.1428623770.576864317.09.04.1428623780.796768318.09.04.1428623790.424708319.09.04.1428623800.412414320.09.04.1428623810.2554931.010.04.1428623820.93681332.010.04.1428623830.28955933.010.04.1428623840.0033992534.010.04.1428623850.75055435.010.04.1428623860.91257936.010.04.1428623870.90619137.010.04.1428623880.62772538.010.04.1428623890.37198939.010.04.1428623900.177075310.010.04.1428623910.284613311.010.04.1428623920.253208312.010.04.1428623930.722853313.010.04.1428623940.343109314.010.04.1428623950.987952315.010.04.1428623960.108771316.010.04.1428623970.0547759317.010.04.1428623980.574145318.010.04.1428623990.00665216319.010.04.1428624000.809036320.010.04.1428624010.30195221.01.04.4285724020.94088322.01.04.4285724030.67445323.01.04.4285724040.19432324.01.04.4285724050.74391925.01.04.4285724060.96555626.01.04.4285724070.42283727.01.04.4285724080.91151228.01.04.4285724090.24125929.01.04.4285724100.780392210.01.04.4285724110.435315211.01.04.4285724120.428871212.01.04.4285724130.581204213.01.04.4285724140.249693214.01.04.4285724150.227017215.01.04.4285724160.844674216.01.04.4285724170.260153217.01.04.4285724180.849122218.01.04.4285724190.888695219.01.04.4285724200.124807220.01.04.4285724210.74127931.02.04.4285724220.48431732.02.04.4285724230.55727133.02.04.4285724240.0031475434.02.04.4285724250.96030435.02.04.4285724260.32918236.02.04.4285724270.84383737.02.04.4285724280.77734438.02.04.4285724290.20430939.02.04.4285724300.0925089310.02.04.4285724310.2873311.02.04.4285724320.0207306312.02.04.4285724330.917904313.02.04.4285724340.660814314.02.04.4285724350.114037315.02.04.4285724360.594008316.02.04.4285724370.0682877317.02.04.4285724380.0121763318.02.04.4285724390.547372319.02.04.4285724400.334557320.02.04.4285724410.79785311.03.04.4285724420.78553912.03.04.4285724430.21984213.03.04.4285724440.15139914.03.04.4285724450.86019615.03.04.4285724460.15246916.03.04.4285724470.18076217.03.04.4285724480.16415718.03.04.4285724490.78802619.03.04.4285724500.0095702110.03.04.4285724510.342364111.03.04.4285724520.256028112.03.04.4285724530.463588113.03.04.4285724540.972073114.03.04.4285724550.433534115.03.04.4285724560.161375116.03.04.4285724570.0154867117.03.04.4285724580.989694118.03.04.4285724590.442805119.03.04.4285724600.990878120.03.04.4285724610.82208811.04.04.4285724620.60892412.04.04.4285724630.20015413.04.04.4285724640.3351714.04.04.4285724650.75529315.04.04.4285724660.89604116.04.04.4285724670.61115217.04.04.4285724680.22387718.04.04.4285724690.33372819.04.04.4285724700.245429110.04.04.4285724710.987735111.04.04.4285724720.680602112.04.04.4285724730.252297113.04.04.4285724740.0208673114.04.04.4285724750.528841115.04.04.4285724760.982075116.04.04.4285724770.467341117.04.04.4285724780.953491118.04.04.4285724790.0897676119.04.04.4285724800.797602120.04.04.4285724810.037765111.05.04.4285724820.034567312.05.04.4285724830.29068813.05.04.4285724840.1606214.05.04.4285724850.24963615.05.04.4285724860.084299216.05.04.4285724870.11035217.05.04.4285724880.031321518.05.04.4285724890.7430319.05.04.4285724900.67591110.05.04.4285724910.465929111.05.04.4285724920.366195112.05.04.4285724930.0188713113.05.04.4285724940.241324114.05.04.4285724950.86151115.05.04.4285724960.684097116.05.04.4285724970.71957117.05.04.4285724980.182617118.05.04.4285724990.960377119.05.04.4285725000.0457116120.05.04.4285725010.32729421.06.04.4285725020.88510822.06.04.4285725030.85688923.06.04.4285725040.19410724.06.04.4285725050.34811325.06.04.4285725060.8804126.06.04.4285725070.53687227.06.04.4285725080.56308928.06.04.4285725090.70566429.06.04.4285725100.296522210.06.04.4285725110.187541211.06.04.4285725120.424055212.06.04.4285725130.818564213.06.04.4285725140.88338214.06.04.4285725150.286708215.06.04.4285725160.837328216.06.04.4285725170.921691217.06.04.4285725180.711419218.06.04.4285725190.904923219.06.04.4285725200.516772220.06.04.4285725210.60834611.07.04.4285725220.58079912.07.04.4285725230.35985913.07.04.4285725240.044264214.07.04.4285725250.62287815.07.04.4285725260.30252616.07.04.4285725270.42477317.07.04.4285725280.06737218.07.04.4285725290.030877219.07.04.4285725300.555045110.07.04.4285725310.503131111.07.04.4285725320.971368112.07.04.4285725330.295711113.07.04.4285725340.992275114.07.04.4285725350.230277115.07.04.4285725360.484065116.07.04.4285725370.185806117.07.04.4285725380.595157118.07.04.4285725390.731905119.07.04.4285725400.919627120.07.04.4285725410.53953211.08.04.4285725420.87971812.08.04.4285725430.9401113.08.04.4285725440.46032114.08.04.4285725450.7260515.08.04.4285725460.18170416.08.04.4285725470.34928817.08.04.4285725480.57370518.08.04.4285725490.34515119.08.04.4285725500.532072110.08.04.4285725510.563356111.08.04.4285725520.60507112.08.04.4285725530.46858113.08.04.4285725540.0297631114.08.04.4285725550.966764115.08.04.4285725560.339488116.08.04.4285725570.755418117.08.04.4285725580.98292118.08.04.4285725590.375451119.08.04.4285725600.666572120.08.04.4285725610.59938931.09.04.4285725620.89268332.09.04.4285725630.26817533.09.04.4285725640.43383134.09.04.4285725650.13599635.09.04.4285725660.95933836.09.04.4285725670.4032237.09.04.4285725680.52041438.09.04.4285725690.83654639.09.04.4285725700.0512201310.09.04.4285725710.942415311.09.04.4285725720.0755832312.09.04.4285725730.0697092313.09.04.4285725740.448347314.09.04.4285725750.612131315.09.04.4285725760.487572316.09.04.4285725770.218141317.09.04.4285725780.55727318.09.04.4285725790.36935319.09.04.4285725800.887879320.09.04.4285725810.16253621.010.04.4285725820.23330222.010.04.4285725830.58558323.010.04.4285725840.45208624.010.04.4285725850.96765425.010.04.4285725860.078553926.010.04.4285725870.57127627.010.04.4285725880.58277928.010.04.4285725890.9806429.010.04.4285725900.431584210.010.04.4285725910.508634211.010.04.4285725920.796977212.010.04.4285725930.483896213.010.04.4285725940.839148214.010.04.4285725950.998228215.010.04.4285725960.124375216.010.04.4285725970.592473217.010.04.4285725980.9379218.010.04.4285725990.0469282219.010.04.4285726000.866697220.010.04.4285726010.4892411.01.04.7142926020.70737512.01.04.7142926030.039851213.01.04.7142926040.94839414.01.04.7142926050.24085515.01.04.7142926060.4066216.01.04.7142926070.96443817.01.04.7142926080.34285118.01.04.7142926090.79397219.01.04.7142926100.792431110.01.04.7142926110.616331111.01.04.7142926120.308461112.01.04.7142926130.714707113.01.04.7142926140.308677114.01.04.7142926150.664251115.01.04.7142926160.15576116.01.04.7142926170.303388117.01.04.7142926180.0251809118.01.04.7142926190.576572119.01.04.7142926200.603542120.01.04.7142926210.45847111.02.04.7142926220.69152812.02.04.7142926230.52220813.02.04.7142926240.74116214.02.04.7142926250.24019515.02.04.7142926260.62963916.02.04.7142926270.076711317.02.04.7142926280.39512918.02.04.7142926290.1797719.02.04.7142926300.620143110.02.04.7142926310.00601791111.02.04.7142926320.824699112.02.04.7142926330.0388162113.02.04.7142926340.570306114.02.04.7142926350.96292115.02.04.7142926360.72856116.02.04.7142926370.944028117.02.04.7142926380.961732118.02.04.7142926390.160229119.02.04.7142926400.0098293120.02.04.7142926410.69430521.03.04.7142926420.60049922.03.04.7142926430.12095923.03.04.7142926440.72031324.03.04.7142926450.073020625.03.04.7142926460.15791226.03.04.7142926470.80647627.03.04.7142926480.79882728.03.04.7142926490.75991129.03.04.7142926500.11616210.03.04.7142926510.317526211.03.04.7142926520.106368212.03.04.7142926530.891296213.03.04.7142926540.229341214.03.04.7142926550.436522215.03.04.7142926560.180702216.03.04.7142926570.629472217.03.04.7142926580.937748218.03.04.7142926590.604199219.03.04.7142926600.729862220.03.04.7142926610.96198931.04.04.7142926620.72734232.04.04.7142926630.75467333.04.04.7142926640.078013534.04.04.7142926650.14763435.04.04.7142926660.71147636.04.04.7142926670.64912537.04.04.7142926680.80156838.04.04.7142926690.65979739.04.04.7142926700.563142310.04.04.7142926710.221266311.04.04.7142926720.0019931312.04.04.7142926730.352088313.04.04.7142926740.846442314.04.04.7142926750.402979315.04.04.7142926760.720931316.04.04.7142926770.824835317.04.04.7142926780.785803318.04.04.7142926790.0622084319.04.04.7142926800.663949320.04.04.7142926810.48611621.05.04.7142926820.25088822.05.04.7142926830.75970723.05.04.7142926840.85810824.05.04.7142926850.29007125.05.04.7142926860.89112426.05.04.7142926870.35584727.05.04.7142926880.68869528.05.04.7142926890.79902129.05.04.7142926900.303351210.05.04.7142926910.164969211.05.04.7142926920.426353212.05.04.7142926930.272745213.05.04.7142926940.226091214.05.04.7142926950.211856215.05.04.7142926960.294403216.05.04.7142926970.838924217.05.04.7142926980.598374218.05.04.7142926990.964155219.05.04.7142927000.988169220.05.04.7142927010.5702421.06.04.7142927020.071480722.06.04.7142927030.43365523.06.04.7142927040.57679724.06.04.7142927050.059319925.06.04.7142927060.26256726.06.04.7142927070.77738627.06.04.7142927080.31124128.06.04.7142927090.4178429.06.04.7142927100.342241210.06.04.7142927110.377341211.06.04.7142927120.730682212.06.04.7142927130.381349213.06.04.7142927140.478954214.06.04.7142927150.387704215.06.04.7142927160.836361216.06.04.7142927170.517923217.06.04.7142927180.542605218.06.04.7142927190.939695219.06.04.7142927200.146281220.06.04.7142927210.42436721.07.04.7142927220.43538722.07.04.7142927230.62281723.07.04.7142927240.64724724.07.04.7142927250.58600825.07.04.7142927260.92438626.07.04.7142927270.72388127.07.04.7142927280.81069328.07.04.7142927290.27782329.07.04.7142927300.0600185210.07.04.7142927310.28165211.07.04.7142927320.240901212.07.04.7142927330.578214213.07.04.7142927340.0340171214.07.04.7142927350.647979215.07.04.7142927360.219604216.07.04.7142927370.38259217.07.04.7142927380.240556218.07.04.7142927390.648753219.07.04.7142927400.31866220.07.04.7142927410.76489821.08.04.7142927420.41818522.08.04.7142927430.44766823.08.04.7142927440.17596924.08.04.7142927450.86292725.08.04.7142927460.52790326.08.04.7142927470.25307527.08.04.7142927480.24529428.08.04.7142927490.96806629.08.04.7142927500.825057210.08.04.7142927510.167703211.08.04.7142927520.84216212.08.04.7142927530.928401213.08.04.7142927540.459537214.08.04.7142927550.698049215.08.04.7142927560.934444216.08.04.7142927570.062111217.08.04.7142927580.599431218.08.04.7142927590.750545219.08.04.7142927600.165828220.08.04.7142927610.59061821.09.04.7142927620.62440222.09.04.7142927630.78401423.09.04.7142927640.53793324.09.04.7142927650.05157225.09.04.7142927660.52091326.09.04.7142927670.88900827.09.04.7142927680.17271928.09.04.7142927690.67347929.09.04.7142927700.0490233210.09.04.7142927710.473651211.09.04.7142927720.350311212.09.04.7142927730.826305213.09.04.7142927740.260419214.09.04.7142927750.0662421215.09.04.7142927760.880653216.09.04.7142927770.874356217.09.04.7142927780.273494218.09.04.7142927790.724401219.09.04.7142927800.60025220.09.04.7142927810.12259621.010.04.7142927820.026152122.010.04.7142927830.41505523.010.04.7142927840.15057524.010.04.7142927850.83888625.010.04.7142927860.70473726.010.04.7142927870.094722827.010.04.7142927880.87025228.010.04.7142927890.45064629.010.04.7142927900.991189210.010.04.7142927910.795653211.010.04.7142927920.872786212.010.04.7142927930.566891213.010.04.7142927940.923959214.010.04.7142927950.0609335215.010.04.7142927960.176896216.010.04.7142927970.191698217.010.04.7142927980.929482218.010.04.7142927990.208472219.010.04.7142928000.309268220.010.04.7142928010.88422221.01.05.028020.68761422.01.05.028030.13975223.01.05.028040.67943224.01.05.028050.36863125.01.05.028060.43698726.01.05.028070.58876627.01.05.028080.32228628.01.05.028090.43503229.01.05.028100.506462210.01.05.028110.736308211.01.05.028120.652701212.01.05.028130.44195213.01.05.028140.96567214.01.05.028150.87772215.01.05.028160.358963216.01.05.028170.2115217.01.05.028180.156636218.01.05.028190.683071219.01.05.028200.499603220.01.05.028210.65185531.02.05.028220.19835332.02.05.028230.44281333.02.05.028240.40130234.02.05.028250.13252735.02.05.028260.48204536.02.05.028270.43243337.02.05.028280.87584138.02.05.028290.2302939.02.05.028300.524919310.02.05.028310.106314311.02.05.028320.00675726312.02.05.028330.717783313.02.05.028340.804425314.02.05.028350.336124315.02.05.028360.60496316.02.05.028370.452317317.02.05.028380.339243318.02.05.028390.24996319.02.05.028400.217287320.02.05.028410.24307831.03.05.028420.60899832.03.05.028430.17347533.03.05.028440.88618834.03.05.028450.67926435.03.05.028460.78036836.03.05.028470.86890437.03.05.028480.92701238.03.05.028490.50013339.03.05.028500.496786310.03.05.028510.876556311.03.05.028520.538236312.03.05.028530.65297313.03.05.028540.753734314.03.05.028550.132116315.03.05.028560.559175316.03.05.028570.849568317.03.05.028580.894149318.03.05.028590.0719369319.03.05.028600.105399320.03.05.028610.058871631.04.05.028620.62108432.04.05.028630.61223633.04.05.028640.9056734.04.05.028650.41298635.04.05.028660.65475736.04.05.028670.69037137.04.05.028680.77752138.04.05.028690.26023939.04.05.028700.139415310.04.05.028710.935878311.04.05.028720.386848312.04.05.028730.550482313.04.05.028740.709184314.04.05.028750.602473315.04.05.028760.411387316.04.05.028770.129506317.04.05.028780.883651318.04.05.028790.565506319.04.05.028800.544056320.04.05.028810.61263831.05.05.028820.22449632.05.05.028830.85870833.05.05.028840.47916234.05.05.028850.91484235.05.05.028860.95335336.05.05.028870.95324737.05.05.028880.98905538.05.05.028890.75497339.05.05.028900.278293310.05.05.028910.458414311.05.05.028920.564841312.05.05.028930.368589313.05.05.028940.151429314.05.05.028950.251367315.05.05.028960.0220351316.05.05.028970.648007317.05.05.028980.615928318.05.05.028990.486396319.05.05.029000.229163320.05.05.029010.96032131.06.05.029020.48432132.06.05.029030.56291633.06.05.029040.33269234.06.05.029050.96095535.06.05.029060.65763736.06.05.029070.22183237.06.05.029080.41430538.06.05.029090.22565939.06.05.029100.816488310.06.05.029110.963186311.06.05.029120.775987312.06.05.029130.96252313.06.05.029140.172979314.06.05.029150.298577315.06.05.029160.673764316.06.05.029170.785107317.06.05.029180.54802318.06.05.029190.436077319.06.05.029200.979857320.06.05.029210.61708611.07.05.029220.039842712.07.05.029230.40964413.07.05.029240.399414.07.05.029250.12815415.07.05.029260.26160316.07.05.029270.26734817.07.05.029280.21290318.07.05.029290.81126519.07.05.029300.693492110.07.05.029310.877132111.07.05.029320.916879112.07.05.029330.391083113.07.05.029340.841554114.07.05.029350.108869115.07.05.029360.222435116.07.05.029370.576834117.07.05.029380.0491297118.07.05.029390.559079119.07.05.029400.045235120.07.05.029410.60230711.08.05.029420.52484412.08.05.029430.88985213.08.05.029440.17932214.08.05.029450.49640415.08.05.029460.10047316.08.05.029470.98064717.08.05.029480.93887618.08.05.029490.87308319.08.05.029500.52085110.08.05.029510.035585111.08.05.029520.329175112.08.05.029530.98385113.08.05.029540.428793114.08.05.029550.365164115.08.05.029560.370056116.08.05.029570.151618117.08.05.029580.962448118.08.05.029590.685694119.08.05.029600.808132120.08.05.029610.49678121.09.05.029620.47073422.09.05.029630.063708423.09.05.029640.50106724.09.05.029650.83439325.09.05.029660.89682626.09.05.029670.82068827.09.05.029680.72523828.09.05.029690.93213229.09.05.029700.0590944210.09.05.029710.478198211.09.05.029720.559513212.09.05.029730.0353449213.09.05.029740.346911214.09.05.029750.981914215.09.05.029760.286384216.09.05.029770.806457217.09.05.029780.942082218.09.05.029790.954373219.09.05.029800.534325220.09.05.029810.10952511.010.05.029820.1228112.010.05.029830.89994913.010.05.029840.032787414.010.05.029850.25546315.010.05.029860.65846416.010.05.029870.39231917.010.05.029880.97225418.010.05.029890.10763919.010.05.029900.888826110.010.05.029910.79605111.010.05.029920.877897112.010.05.029930.324808113.010.05.029940.231839114.010.05.029950.561776115.010.05.029960.783301116.010.05.029970.155875117.010.05.029980.325551118.010.05.029990.232631119.010.05.030000.130799120.010.05.0 <p>In this line we calculate the <code>Mean</code> for each class</p> <pre><code>fitcube = cubefittable(t, Mean, :values, by=(:classes))\n</code></pre> <pre><code>3-element YAXArray{Union{Missing, Float64},1} with dimensions: \n  Dim{:classes} Sampled{Int64} Int64[1, 2, 3] ForwardOrdered Irregular Points\nTotal size: 24.0 bytes\n</code></pre> <p>We can also use more than one criteria for grouping the values. In the next example, the mean is calculated for each class and timestep.</p> <pre><code>fitcube = cubefittable(t, Mean, :values, by=(:classes, :time))\n</code></pre> <pre><code>3\u00d720 YAXArray{Union{Missing, Float64},2} with dimensions: \n  Dim{:classes} Sampled{Int64} Int64[1, 2, 3] ForwardOrdered Irregular Points,\n  Dim{:time} Sampled{Float64} 1.0:1.0:20.0 ForwardOrdered Regular Points\nTotal size: 480.0 bytes\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/HowdoI/switchtodimarray/","title":"Switch to DimensionalData","text":"<p>The purpose of this section is to show how to switch from the native YAXArray type to the new type based on DimensionalData.jl</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/switchtodimarray/#axis-lists-have-to-be-tuples-instead-of-vector","title":"Axis lists have to be Tuples instead of Vector","text":"<p>When you want to define a YAXArray from scratch the list of Axis has to be given as a Tuple instead of a vector. Otherwise you would run into a DimensionMismatch error.</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/switchtodimarray/#dim-instead-of-rangeaxis-and-categoricalaxis","title":"Dim instead of RangeAxis and CategoricalAxis","text":"<p>The dimensions of a YAXArray are now <code>Dimension</code> types from DimensionalData and there is no difference anymore in the construction for categorical or</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/switchtodimarray/#get-the-axes-of-a-yaxarray","title":"Get the axes of a YAXArray","text":"<p>To get the axes of a YAXArray use the <code>dims</code> function instead of the <code>caxes</code> function</p> <pre><code>using DimensionalData\nusing YAXArrays\n\naxes = (Dim{:Lon}(1:10), Dim{:Lat}(1:10), Dim{:Time}(1:100))\narr = YAXArray(axes, reshape(1:10000, (10,10,100)))\n\ndims(arr)\n</code></pre> <pre><code>Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\nDim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\nDim{:Time} Sampled{Int64} 1:100 ForwardOrdered Regular Points\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/switchtodimarray/#copy-an-axes-with-the-same-name-but-different-values","title":"Copy an axes with the same name but different values","text":"<p>Use DD.rebuild(ax, values) instead of axcopy(ax, values)</p> <p></p> <p></p>"},{"location":"examples/generated/HowdoI/switchtodimarray/#subsetting-is-including-not-excluding","title":"Subsetting is including not excluding","text":"<p>Beware that the subsets in DimensionalData include the bounds. Thereby the size of the subset can differ by one on every bound. a[X=1..4]</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/applyfunctions/","title":"Apply functions on YAXArrays","text":"<p>How to apply functions on YAXArrays</p> <p>To apply user defined functions on a YAXArray data type we can use the <code>map</code> function, <code>mapslices</code> function or the <code>mapCube</code> function.  Which of these functions should be used depends on the layout of the data,  that the user defined function should be applied on.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#apply-a-function-on-every-element-of-a-datacube","title":"Apply a function on every element of a datacube","text":"<p>The <code>map</code> function can be used to apply a function on every entry of a YAXArray without taking the dimensions into account. This will lazily register the mapped function which is applied when the YAXArray is either accessed or when more involved computations are made.</p> <pre><code>#If we set up a dummy data cube which has all numbers between 1 and 10000.\n\nusing YAXArrays\nusing DimensionalData\naxes = (Dim{:Lon}(1:10), Dim{:Lat}(1:10), Dim{:Time}(1:100))\noriginal = YAXArray(axes, reshape(1:10000, (10,10,100)))\n</code></pre> <pre><code>10\u00d710\u00d7100 YAXArray{Int64,3} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Time} Sampled{Int64} 1:100 ForwardOrdered Regular Points\nTotal size: 78.12 KB\n</code></pre> <p>with one at the first position:</p> <pre><code>original[1,:,1]\n</code></pre> <pre><code>10-element YAXArray{Int64,1} with dimensions: \n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points\nTotal size: 80.0 bytes\n</code></pre> <p>now we can substract <code>1</code> from all elements of this cube</p> <pre><code>substracted = map(x-&gt; x-1, original)\n</code></pre> <pre><code>10\u00d710\u00d7100 YAXArray{Int64,3} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Time} Sampled{Int64} 1:100 ForwardOrdered Regular Points\nTotal size: 78.12 KB\n</code></pre> <p><code>substracted</code> is a cube of the same size as <code>original</code>, and the applied function is registered, so that it is applied as soon as the elements of <code>substracted</code> are either accessed or further used in other computations.</p> <pre><code>substracted[1,:,1]\n</code></pre> <pre><code>10-element YAXArray{Int64,1} with dimensions: \n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points\nTotal size: 80.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#apply-a-function-along-dimensions-of-a-single-cube","title":"Apply a function along dimensions of a single cube","text":"<p>If an function should work along a certain dimension of the data you can use the 'mapslices' function to easily apply this function. This doesn't give you the flexibility of the <code>mapCube</code> function but it is easier to use for simple functions.</p> <p>If we set up a dummy data cube which has all numbers between 1 and 10000.</p> <pre><code>axes = (Dim{:Lon}(1:10), Dim{:Lat}(1:10), Dim{:Time}(1:100))\noriginal = YAXArray(axes, reshape(1:10000, (10,10,100)))\n</code></pre> <pre><code>10\u00d710\u00d7100 YAXArray{Int64,3} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Time} Sampled{Int64} 1:100 ForwardOrdered Regular Points\nTotal size: 78.12 KB\n</code></pre> <p>and then we would like to compute the sum over the Time dimension:</p> <pre><code>timesum = mapslices(sum, original, dims=\"Time\")\n</code></pre> <pre><code>10\u00d710 YAXArray{Union{Missing, Int64},2} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points\nTotal size: 800.0 bytes\n</code></pre> <p>this reduces over the time dimension and gives us the following values</p> <pre><code>timesum[:,:]\n</code></pre> <pre><code>10\u00d710 YAXArray{Union{Missing, Int64},2} with dimensions: \n  Dim{:Lon} Sampled{Int64} 1:10 ForwardOrdered Regular Points,\n  Dim{:Lat} Sampled{Int64} 1:10 ForwardOrdered Regular Points\nTotal size: 800.0 bytes\n</code></pre> <p>You can also apply a function along multiple dimensions of the same data cube.</p> <pre><code>lonlatsum = mapslices(sum, original, dims=(\"Lon\", \"Lat\"))\n</code></pre> <pre><code>100-element YAXArray{Union{Missing, Int64},1} with dimensions: \n  Dim{:Time} Sampled{Int64} 1:100 ForwardOrdered Regular Points\nTotal size: 800.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#how-to-combine-multiple-cubes-in-one-computation","title":"How to combine multiple cubes in one computation","text":""},{"location":"examples/generated/UserGuide/applyfunctions/#compute-the-mean-seasonal-cycle-for-one-sigle-pixel","title":"Compute the Mean Seasonal Cycle for one sigle pixel","text":"<pre><code>using CairoMakie\nCairoMakie.activate!()\nusing Dates\nusing Statistics\n</code></pre> <p>We define the data span. For simplicity, three non-leap years were selected.</p> <pre><code>t =  Date(\"2021-01-01\"):Day(1):Date(\"2023-12-31\")\nNpY = 3\n# create some seasonal dummy data\nx = repeat(range(0, 2\u03c0, length=365), NpY)\nvar = @. sin(x) + 0.1 * randn()\n\nlines(1:length(t), var; color = :purple, linewidth=1.25,\naxis=(; xlabel=\"Time\", ylabel=\"Variable\"),\nfigure = (; resolution = (600,400))\n)\n</code></pre> <p></p> <p>Currently makie doesn't support time axis natively, but the following function can do the work for now.</p> <pre><code>function time_ticks(dates; frac=8)\ntempo = string.(dates)\nlentime = length(tempo)\nslice_dates = range(1, lentime, step=lentime \u00f7 frac)\nreturn slice_dates, tempo[slice_dates]\nend\n\nxpos, ticks = time_ticks(t; frac=8)\n</code></pre> <pre><code>(1:136:1089, [\"2021-01-01\", \"2021-05-17\", \"2021-09-30\", \"2022-02-13\", \"2022-06-29\", \"2022-11-12\", \"2023-03-28\", \"2023-08-11\", \"2023-12-25\"])\n</code></pre> <p>In order to apply the previous output, we split the plotting function into his 3 components, <code>figure</code>, <code>axis</code> and <code>plotted object</code>, namely</p> <pre><code>fig, ax, obj = lines(1:length(t), var; color = :purple, linewidth=1.25,\naxis=(; xlabel=\"Time\", ylabel=\"Variable\"),\nfigure = (; resolution = (600,400))\n)\nax.xticks = (xpos, ticks)\nax.xticklabelrotation = \u03c0 / 4\nax.xticklabelalign = (:right, :center)\nfig\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#define-the-cube","title":"Define the cube","text":"<pre><code>axes = (Dim{:Time}(t),)\nc = YAXArray(axes, var)\n</code></pre> <pre><code>1095-element YAXArray{Float64,1} with dimensions: \n  Dim{:Time} Sampled{Date} Date(\"2021-01-01\"):Dates.Day(1):Date(\"2023-12-31\") ForwardOrdered Regular Points\nTotal size: 8.55 KB\n</code></pre> <p>Let's calculate the mean seasonal cycle of our dummy variable 'var'</p> <pre><code>function mean_seasonal_cycle(c; ndays = 365)\n# filterig by month-day\nmonthday = map(x-&gt;Dates.format(x, \"u-d\"), collect(c.Time))\ndatesid = unique(monthday)\n# number of years\nNpY = Int(size(monthday,1)/ndays)\nidx = Int.(zeros(ndays, NpY))\n# get the day-month indices for data subsetting\nfor i in 1:ndays\nidx[i,:] = Int.(findall(x-&gt; x == datesid[i], monthday))\nend\n# compute the mean seasonal cycle\nmscarray = map(x-&gt;var[x], idx)\nmsc = mapslices(mean, mscarray, dims=2)\nreturn msc\nend\n\nmsc = mean_seasonal_cycle(c);\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/applyfunctions/#plot-results-mean-seasonal-cycle","title":"Plot results: mean seasonal cycle","text":"<pre><code>xpos, ticks = time_ticks(t[1:365]; frac=8)\n\nfig, ax, obj = lines(1:365, var[1:365]; label=\"2021\", color=:black,\nlinewidth=2.0, linestyle=:dot,\naxis = (;  xlabel=\"Time\", ylabel=\"Variable\"),\nfigure=(; resolution = (600,400))\n)\nlines!(1:365, var[366:730], label=\"2022\", color=:brown,\nlinewidth=1.5, linestyle=:dash\n)\nlines!(1:365, msc[:,1]; label=\"MSC\", color=:dodgerblue, lw=2.5)\naxislegend()\nax.xticks = (xpos, ticks)\nax.xticklabelrotation = \u03c0 / 4\nax.xticklabelalign = (:right, :center)\nfig\ncurrent_figure()\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/creating/","title":"Creating YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/creating/#creating-yaxarrays-and-datasets","title":"Creating YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/creating/#creating-a-yaxarray","title":"Creating a YAXArray","text":"<pre><code>using YAXArrays\nusing DimensionalData: DimensionalData as DD\nusing DimensionalData\na = YAXArray(rand(10, 20, 5))\n</code></pre> <pre><code>10\u00d720\u00d75 YAXArray{Float64,3} with dimensions: \n  Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points,\n  Dim{:Dim_3} Sampled{Int64} Base.OneTo(5) ForwardOrdered Regular Points\nTotal size: 7.81 KB\n</code></pre> <p>if not names are defined then default ones will be used, i.e. <code>Dim_1</code>, <code>Dim_2</code>. Get data from each Dimension with</p> <pre><code>a.Dim_1\n</code></pre> <pre><code>Dim{:Dim_1} Sampled{Int64} ForwardOrdered Regular Points\nwrapping: Base.OneTo(10)\n</code></pre> <p>or with</p> <pre><code>getproperty(a, :Dim_1)\n</code></pre> <pre><code>Dim{:Dim_1} Sampled{Int64} ForwardOrdered Regular Points\nwrapping: Base.OneTo(10)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#creating-a-yaxarray-with-named-axis","title":"Creating a YAXArray with named axis","text":"<p>The two most used axis are <code>RangeAxis</code> and <code>CategoricalAxis</code>. Here, we use a combination of them to create a <code>time</code>, <code>lon</code> and <code>lat</code> axis and a Categorical Axis for two variables.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#axis-definitions","title":"Axis definitions","text":"<pre><code>using Dates\naxlist = (\nDim{:time}(Date(\"2022-01-01\"):Day(1):Date(\"2022-01-30\")),\nDim{:lon}(range(1, 10, length=10)),\nDim{:lat}(range(1, 5, length=15)),\nDim{:Variable}([\"var1\", \"var2\"])\n)\n</code></pre> <pre><code>Dim{:time} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\"),\nDim{:lon} 1.0:1.0:10.0,\nDim{:lat} 1.0:0.2857142857142857:5.0,\nDim{:Variable} String[\"var1\", \"var2\"]\n</code></pre> <p>And the corresponding data</p> <pre><code>data = rand(30, 10, 15, 2)\nds = YAXArray(axlist, data)\n</code></pre> <pre><code>30\u00d710\u00d715\u00d72 YAXArray{Float64,4} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:Variable} Categorical{String} String[\"var1\", \"var2\"] ForwardOrdered\nTotal size: 70.31 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#select-variables","title":"Select variables","text":"<pre><code>ds[Variable = At(\"var1\"), lon = DD.Between(1,2.1)]\n</code></pre> <pre><code>30\u00d72\u00d715 YAXArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:2.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 7.03 KB\n</code></pre>"},{"location":"examples/generated/UserGuide/creating/#indexing-and-subsetting","title":"Indexing and subsetting","text":"<p>As for most array types, YAXArray also provides special indexing behavior   when using the square brackets for indexing.  Assuming that <code>c</code> is a YAXArray,   there are 3 different semantics to use the square brackets with, depending on   the types of the arguments provided to getindex.</p> <ol> <li>Ranges and Integers only as for example <code>c[1,4:8,:]</code> will access the underlying data according to the provided index in index space and read the</li> </ol> <p>data into memory as a plain Julia Array. It is equivalent to <code>c.data[1,4:8,:]</code>.</p> <ol> <li>Keyword arguments with values or Intervals as for example <code>c[longitude = 30..50, time=Date(2005,6,1), variable=\"air_temperature\"]</code>.</li> </ol> <p>This always creates a view into the specified subset of the data and   return a new YAXArray with new axes without reading the data. Intervals and   values are always interpreted in the units as provided by the axis values.</p> <ol> <li>A Tables.jl-compatible object for irregular extraction of a list of points or sub-arrays and random locations.</li> </ol> <p>For example calling <code>c[[(lon=30,lat=42),(lon=-50,lat=2.5)]]</code> will extract data at the specified coordinates and along all additional axes into memory.   It returns a new YAXArray with a new Multi-Index axis along the selected   longitudes and latitudes.</p> <p>Info</p> <p>Overall, selecting elements in YAXArrays is brittle.   Hence using DimensionalData.jl and YAXArrayBase.jl is recomended.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#select-variables-with-dimensionaldatajl","title":"Select variables with DimensionalData.jl","text":"<pre><code>using DimensionalData, YAXArrayBase\n</code></pre> <p>First we wrap the yaxarray into a DimArray via</p> <pre><code>dim = yaxconvert(DimArray, ds)\n</code></pre> <pre><code>30\u00d710\u00d715\u00d72 DimArray{Float64,4} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:Variable} Categorical{String} String[\"var1\", \"var2\"] ForwardOrdered\n[:, :, 1, 1]\n                      1.0       \u2026  8.0       9.0        10.0\n  2022-01-01  0.657399     0.185601  0.76967     0.0622315\n  2022-01-02  0.605012     0.417059  0.644021    0.835385\n  2022-01-03  0.110689     0.046832  0.313676    0.0842409\n \u22ee                              \u22f1                        \u22ee\n  2022-01-27  0.161898  \u2026  0.820245  0.304691    0.314714\n  2022-01-28  0.950632     0.258942  0.0824045   0.638344\n  2022-01-29  0.980022     0.182477  0.972752    0.214511\n  2022-01-30  0.908336     0.373256  0.370352    0.883299\n[and 29 more slices...]\n</code></pre> <p>Now, the syntax from DimensionalData.jl just works</p> <pre><code>subset = dim[\ntime = DD.Between( Date(\"2022-01-01\"),  Date(\"2022-01-10\")),\nlon=DD.Between(1,2),\nVariable = At(\"var2\")\n]\n</code></pre> <pre><code>10\u00d72\u00d715 DimArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-10\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:2.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nand reference dimensions: \n  Dim{:Variable} Categorical{String} String[\"var2\"] ForwardOrdered\n[:, :, 1]\n                      1.0       2.0\n  2022-01-01  0.357075  0.412835\n  2022-01-02  0.382247  0.963052\n \u22ee                              \n  2022-01-09  0.126674  0.280092\n  2022-01-10  0.987811  0.674519\n[and 14 more slices...]\n</code></pre> <p>And going back to our YAXArray view is done with</p> <pre><code>yax = yaxconvert(YAXArray, subset)\n</code></pre> <pre><code>10\u00d72\u00d715 YAXArray{Float64,3} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-10\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:2.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 2.34 KB\n</code></pre> <p>This will be supported by default in the next release.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#properties-attributes","title":"Properties / Attributes","text":"<p>You might also want to add additional properties to your YAXArray. This can be done via a Dictionary, namely</p> <pre><code>props = Dict(\n\"time\" =&gt; \"days\",\n\"lon\" =&gt; \"longitude\",\n\"lat\" =&gt; \"latitude\",\n\"var1\" =&gt; \"first variable\",\n\"var2\" =&gt; \"second variable\",\n)\n</code></pre> <pre><code>Dict{String, String} with 5 entries:\n  \"lat\"  =&gt; \"latitude\"\n  \"var1\" =&gt; \"first variable\"\n  \"time\" =&gt; \"days\"\n  \"var2\" =&gt; \"second variable\"\n  \"lon\"  =&gt; \"longitude\"\n</code></pre> <p>Then the <code>yaxarray</code> with properties is assemble with</p> <pre><code>ds = YAXArray(axlist, data, props)\n</code></pre> <pre><code>30\u00d710\u00d715\u00d72 YAXArray{Float64,4} with dimensions: \n  Dim{:time} Sampled{Date} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\") ForwardOrdered Regular Points,\n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points,\n  Dim{:Variable} Categorical{String} String[\"var1\", \"var2\"] ForwardOrdered\nTotal size: 70.31 KB\n</code></pre> <p>Access these properties with</p> <pre><code>ds.properties\n</code></pre> <pre><code>Dict{String, String} with 5 entries:\n  \"lat\"  =&gt; \"latitude\"\n  \"var1\" =&gt; \"first variable\"\n  \"time\" =&gt; \"days\"\n  \"var2\" =&gt; \"second variable\"\n  \"lon\"  =&gt; \"longitude\"\n</code></pre> <p>Note that this properties are shared for both variables <code>var1</code> and <code>var2</code>. Namely, this are global properties for your yaxarray. However, in most cases you will want to pass properties for each variable, here we will do this via Datasets.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#creating-a-dataset","title":"Creating a Dataset","text":"<p>Let's define first some range axis</p> <pre><code>axs = (\nDim{:lon}(range(0,1, length=10)),\nDim{:lat}(range(0,1, length=5)),\n)\n</code></pre> <pre><code>Dim{:lon} 0.0:0.1111111111111111:1.0,\nDim{:lat} 0.0:0.25:1.0\n</code></pre> <p>And two toy random <code>YAXArrays</code> to assemble our dataset</p> <pre><code>t2m = YAXArray(axs, rand(10,5), Dict(\"units\" =&gt; \"K\", \"reference\" =&gt; \"your references\"))\nprec = YAXArray(axs, rand(10,5), Dict(\"units\" =&gt; \"mm\", \"reference\" =&gt; \"your references\"))\n\nds = Dataset(t2m=t2m, prec= prec, num = YAXArray(rand(10)),\nproperties = Dict(\"space\"=&gt;\"lon/lat\", \"reference\" =&gt; \"your global references\"))\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \n()\nVariables: \n\nt2m\n with dimensions: \n  Dim{:lon} Sampled{Float64} 0.0:0.1111111111111111:1.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 0.0:0.25:1.0 ForwardOrdered Regular Points\nprec\n with dimensions: \n  Dim{:lon} Sampled{Float64} 0.0:0.1111111111111111:1.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 0.0:0.25:1.0 ForwardOrdered Regular Points\nnum\n with dimensions: \n  Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nProperties: Dict(\"reference\" =&gt; \"your global references\", \"space\" =&gt; \"lon/lat\")\n</code></pre> <p>Note that the YAXArrays used not necessarily shared the same dimensions. Hence, using a Dataset if more versatile than a plain YAXArray.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#selected-variables-into-a-data-cube","title":"Selected Variables into a Data Cube","text":"<p>Being able to collect variables that share dimensions into a data cube is possible with</p> <pre><code>c = Cube(ds[[\"t2m\", \"prec\"]])\n</code></pre> <pre><code>10\u00d75\u00d72 YAXArray{Float64,3} with dimensions: \n  Dim{:lon} Sampled{Float64} 0.0:0.1111111111111111:1.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 0.0:0.25:1.0 ForwardOrdered Regular Points,\n  Dim{:Variable} Categorical{String} String[\"t2m\", \"prec\"] ReverseOrdered\nunits: mm\nTotal size: 800.0 bytes\n</code></pre> <p>or simply the one that does not share all dimensions</p> <pre><code>Cube(ds[[\"num\"]])\n</code></pre> <pre><code>10-element YAXArray{Float64,1} with dimensions: \n  Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nTotal size: 80.0 bytes\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/creating/#variable-properties","title":"Variable properties","text":"<pre><code># Access to variables properties is done via\nCube(ds[[\"t2m\"]]).properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"units\"     =&gt; \"K\"\n  \"reference\" =&gt; \"your references\"\n</code></pre> <p>and</p> <pre><code>Cube(ds[[\"prec\"]]).properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"units\"     =&gt; \"mm\"\n  \"reference\" =&gt; \"your references\"\n</code></pre> <p>Note also that the global properties for the Dataset are accessed with</p> <pre><code>ds.properties\n</code></pre> <pre><code>Dict{String, String} with 2 entries:\n  \"reference\" =&gt; \"your global references\"\n  \"space\"     =&gt; \"lon/lat\"\n</code></pre> <p>Saving and different chunking modes are discussed in here.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/distributed/","title":"Distributed processes","text":""},{"location":"examples/generated/UserGuide/distributed/#how-to-calculate-a-time-mean","title":"How to calculate a time mean","text":"<pre><code>using YAXArrays, Statistics, Zarr\nusing DimensionalData\nusing Dates\naxlist = (\nDim{:time}(Date(\"2022-01-01\"):Day(1):Date(\"2022-01-30\")),\nDim{:lon}(range(1, 10, length=10)),\nDim{:lat}(range(1, 5, length=15)),\nDim{:Variable}([\"var1\", \"var2\"])\n)\n</code></pre> <pre><code>Dim{:time} Date(\"2022-01-01\"):Dates.Day(1):Date(\"2022-01-30\"),\nDim{:lon} 1.0:1.0:10.0,\nDim{:lat} 1.0:0.2857142857142857:5.0,\nDim{:Variable} String[\"var1\", \"var2\"]\n</code></pre> <p>And the corresponding data</p> <pre><code>data = rand(30, 10, 15, 2)\nds = YAXArray(axlist, data)\n\nc = ds[Variable = At(\"var1\")] # see OpenNetCDF to get the file\nmapslices(mean \u2218 skipmissing, c, dims=\"Time\")\n</code></pre> <pre><code>10\u00d715 YAXArray{Union{Missing, Float64},2} with dimensions: \n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 1.17 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/distributed/#distributed-calculations","title":"Distributed calculations","text":"<p>It is possible to distribute the calculations over multiple process. The following code does a time mean over all grid points using multiple CPU over a local machine.</p> <pre><code>#using Distributed\n#addprocs(2)\n#@everywhere using Pkg\n#@everywhere Pkg.activate(\".\")\n#@everywhere begin\n</code></pre> <p>using NetCDF   using YAXArrays   using Statistics   using Zarr</p> <pre><code>#end\n#@everywhere function mymean(output, pixel)\n</code></pre> <p>@show \"doing a mean\"      output[:] .= mean(pixel)</p> <pre><code>#end\n#indims = InDims(\"time\")\n#outdims = OutDims()\n#resultcube = mapCube(mymean, c, indims=indims, outdims=outdims)\n</code></pre> <p>In the last example, <code>mapCube</code> was used to map the <code>mymean</code> function. <code>mapslices</code> is a convenient function that can replace <code>mapCube</code>, where you can omit defining an extra function with the output argument as an input (e.g. <code>mymean</code>). It is possible to simply use <code>mapslice</code></p> <pre><code>resultcube = mapslices(mean \u2218 skipmissing, c, dims=\"time\")\n</code></pre> <pre><code>10\u00d715 YAXArray{Union{Missing, Float64},2} with dimensions: \n  Dim{:lon} Sampled{Float64} 1.0:1.0:10.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} 1.0:0.2857142857142857:5.0 ForwardOrdered Regular Points\nTotal size: 1.17 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/distributed/#slurm-cluster","title":"SLURM cluster","text":"<p>It is also possible to distribute easily the workload on a cluster, with little modification to the code. The following code does a time mean over all grid points using multiple CPU over a SLURM cluster. To do so, we use the <code>ClusterManagers</code> package.</p> <pre><code>#using Distributed\n#using ClusterManagers\n#addprocs(SlurmManager(10))\n#@everywhere using Pkg\n#@everywhere Pkg.activate(\".\")\n#@everywhere using ESDL\n#@everywhere using Statistics\n#inpath=\"zg1000_AERday_CanESM5_esm-hist_r6i1p1f1_gn_18500101-20141231.nc\"\n#c = Cube(inpath, \"zg1000\")\n#resultcube = mapslices(mean \u2218 skipmissing, c, dims=\"time\")\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/openNetCDF/","title":"Open NetCDF","text":"<p>In this example we are going to use a <code>NetCDF</code> file but this should be very similar for other data backends. To open a single data file we first need to load the appropriate backend package via <code>using NetCDF</code>.</p> <pre><code>using YAXArrays, NetCDF\nusing Downloads\nurl = \"https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc\"\nfilename = Downloads.download(url, \"tos_O1_2001-2002.nc\") # you pick your own path\nc = Cube(filename)\n</code></pre> <pre><code>180\u00d7170\u00d724 YAXArray{Union{Missing, Float32},3} with dimensions: \n  Dim{:lon} Sampled{Float64} 1.0:2.0:359.0 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} -79.5:1.0:89.5 ForwardOrdered Regular Points,\n  Ti Sampled{CFTime.DateTime360Day} CFTime.DateTime360Day[CFTime.DateTime360Day(2001-01-16T00:00:00), \u2026, CFTime.DateTime360Day(2002-12-16T00:00:00)] ForwardOrdered Irregular Points\nunits: K\nname: tos\nTotal size: 2.8 MB\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/openZarr/","title":"Open Zarr (Store)","text":"<pre><code>using Zarr, YAXArrays\nstore =\"gs://cmip6/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp585/r1i1p1f1/3hr/tas/gn/v20190710/\"\ng = open_dataset(zopen(store, consolidated=true))\nc = g[\"tas\"]\n</code></pre> <pre><code>384\u00d7192\u00d7251288 YAXArray{Float32,3} with dimensions: \n  Dim{:lon} Sampled{Float64} 0.0:0.9375:359.0625 ForwardOrdered Regular Points,\n  Dim{:lat} Sampled{Float64} Float64[-89.28422753251364, -88.35700351866494, \u2026, 88.35700351866494, 89.28422753251364] ForwardOrdered Irregular Points,\n  Ti Sampled{DateTime} DateTime[2015-01-01T03:00:00, \u2026, 2101-01-01T00:00:00] ForwardOrdered Irregular Points\nunits: K\nname: tas\nTotal size: 69.02 GB\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/saving/","title":"Saving YAXArrays and Datasets","text":""},{"location":"examples/generated/UserGuide/saving/#saving-yaxarrays-and-datasets","title":"Saving YAXArrays and Datasets","text":"<p>Is possible to save datasets and YAXArray directly to zarr files.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-yaxarray-to-zarr","title":"Saving a YAXArray to Zarr","text":"<p>One can save any <code>YAXArray</code> using the <code>savecube</code> function. Simply add a path as an argument and the cube will be saved.</p> <pre><code>using YAXArrays, Zarr\na = YAXArray(rand(10,20))\nf = tempname()\nsavecube(a,f,driver=:zarr)\n</code></pre> <pre><code>10\u00d720 YAXArray{Float64,2} with dimensions: \n  Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points\nTotal size: 1.56 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-yaxarray-to-netcdf","title":"Saving a YAXArray to NetCDF","text":"<p>Saving to NetCDF works exactly the same way.</p> <pre><code>using YAXArrays, Zarr, NetCDF\na = YAXArray(rand(10,20))\nf = tempname()\nsavecube(a,f,driver=:netcdf)\n</code></pre> <pre><code>10\u00d720 YAXArray{Float64,2} with dimensions: \n  Dim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points\nTotal size: 1.56 KB\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#saving-a-dataset","title":"Saving a Dataset","text":"<p>Saving Datasets can be done using the <code>savedataset</code> function.</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)));\nf = tempname();\nsavedataset(ds,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nVariables: \n\nx\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Pointsy, \n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#overwriting-a-dataset","title":"Overwriting a Dataset","text":"<p>If a path already exists, an error will be thrown. Set <code>overwrite=true</code> to delete the existing dataset</p> <pre><code>savedataset(ds,path=f,driver=:zarr, overwrite=true)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nVariables: \n\nx\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Pointsy, \n</code></pre> <p>Look at the docs for more information</p> <p>savedataset(ds::Dataset; path = \"\", persist = nothing, overwrite = false, append = false, skeleton=false, backend = :all,     driver = backend, max_cache = 5e8, writefac=4.0)</p> <p>Saves a Dataset into a file at <code>path</code> with the format given by <code>driver</code>, i.e., driver=:netcdf or driver=:zarr.</p> <p>Warning</p> <p>overwrite = true, deletes ALL your data and it will create a new file.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#appending-to-a-dataset","title":"Appending to a Dataset","text":"<p>New variables can be added to an existing dataset using the <code>append=true</code> keyword.</p> <pre><code>ds2 = Dataset(z = YAXArray(rand(10,20,5)))\nsavedataset(ds2, path=f,backend=:zarr,append=true)\nopen_dataset(f, driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} 1:1:10 ForwardOrdered Regular Points\nVariables: \n\nx\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} 1:1:20 ForwardOrdered Regular Points\nz\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} 1:1:20 ForwardOrdered Regular Points,\n  Dim{:Dim_3} Sampled{Int64} 1:1:5 ForwardOrdered Regular Pointsy, \n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/saving/#datacube-skeleton-without-the-actual-data","title":"Datacube Skeleton without the actual data","text":"<p>Sometimes one merely wants to create a datacube  \"Skeleton\" on disk and gradually fill it with data. Here we create YAXArray and write only the axis data and array metadata to disk, while no actual array data is copied:</p> <pre><code>using YAXArrays, Zarr\na = YAXArray(zeros(Union{Missing, Int32},10,20))\nf = tempname();\nr = savecube(a,f,driver=:zarr,skeleton=true);\nall(ismissing,r[:,:])\n</code></pre> <pre><code>true\n</code></pre> <p>The <code>skeleton</code> argument is also available for <code>savedataset</code>.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/setchuncks/","title":"Setting chunks's size","text":""},{"location":"examples/generated/UserGuide/setchuncks/#set-chunks","title":"Set chunks","text":"<p>To determine the chunk size of the array representation on disk, call the <code>setchunks</code> function prior to saving.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#chunking-yaxarrays","title":"Chunking YAXArrays","text":"<pre><code>using YAXArrays, Zarr\na = YAXArray(rand(10,20))\na_chunked = setchunks(a, (5,10))\na_chunked.chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p>And the saved file is also splitted into Chunks.</p> <pre><code>f = tempname()\nsavecube(a_chunked, f, backend=:zarr)\nCube(f).chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p>Alternatively chunk sizes can be given by dimension name, so the following results in the same chunks:</p> <pre><code>a_chunked = setchunks(a, (Dim_2=10, Dim_1=5))\na_chunked.chunks\n</code></pre> <pre><code>2\u00d72 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#chunking-datasets","title":"Chunking Datasets","text":""},{"location":"examples/generated/UserGuide/setchuncks/#set-chunks-by-axis","title":"Set Chunks by Axis","text":"<p>Set chunk size for each axis occuring in a dataset. This will be applied to all variables in the dataset:</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)))\ndschunked = setchunks(ds, Dict(\"Dim_1\"=&gt;5, \"Dim_2\"=&gt;10, \"Dim_3\"=&gt;2))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:2)   (1:5, 11:20, 1:2)\n (6:10, 1:10, 1:2)  (6:10, 11:20, 1:2)\n\n[:, :, 2] =\n (1:5, 1:10, 3:4)   (1:5, 11:20, 3:4)\n (6:10, 1:10, 3:4)  (6:10, 11:20, 3:4)\n\n[:, :, 3] =\n (1:5, 1:10, 5:5)   (1:5, 11:20, 5:5)\n (6:10, 1:10, 5:5)  (6:10, 11:20, 5:5)\n</code></pre> <p>Saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked, path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nVariables: \n\nx\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Pointsy, \nz\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points,\n  Dim{:Dim_3} Sampled{Int64} Base.OneTo(5) ForwardOrdered Regular Points\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#set-chunking-by-variable","title":"Set chunking by Variable","text":"<p>The following will set the chunk size for each Variable separately and results in exactly the same chunking as the example above</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)))\ndschunked = setchunks(ds,(x = (5,10), y = Dict(\"Dim_1\"=&gt;5), z = (Dim_1 = 5, Dim_2 = 10, Dim_3 = 2)))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:2)   (1:5, 11:20, 1:2)\n (6:10, 1:10, 1:2)  (6:10, 11:20, 1:2)\n\n[:, :, 2] =\n (1:5, 1:10, 3:4)   (1:5, 11:20, 3:4)\n (6:10, 1:10, 3:4)  (6:10, 11:20, 3:4)\n\n[:, :, 3] =\n (1:5, 1:10, 5:5)   (1:5, 11:20, 5:5)\n (6:10, 1:10, 5:5)  (6:10, 11:20, 5:5)\n</code></pre> <p>saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points\nVariables: \n\nx\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Pointsy, \nz\n with dimensions: \n  Dim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points,\n  Dim{:Dim_3} Sampled{Int64} Base.OneTo(5) ForwardOrdered Regular Points\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/setchuncks/#set-chunking-for-all-variables","title":"Set chunking for all variables","text":"<pre><code>#The following code snippet only works when all member variables of the dataset have\n</code></pre> <p>the same shape and sets the output chunks for all arrays.</p> <pre><code>using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10,20)), z = YAXArray(rand(10,20)))\ndschunked = setchunks(ds,(5,10))\nCube(dschunked).chunks\n</code></pre> <pre><code>2\u00d72\u00d73 DiskArrays.GridChunks{3}:\n[:, :, 1] =\n (1:5, 1:10, 1:1)   (1:5, 11:20, 1:1)\n (6:10, 1:10, 1:1)  (6:10, 11:20, 1:1)\n\n[:, :, 2] =\n (1:5, 1:10, 2:2)   (1:5, 11:20, 2:2)\n (6:10, 1:10, 2:2)  (6:10, 11:20, 2:2)\n\n[:, :, 3] =\n (1:5, 1:10, 3:3)   (1:5, 11:20, 3:3)\n (6:10, 1:10, 3:3)  (6:10, 11:20, 3:3)\n</code></pre> <p>saving...</p> <pre><code>f = tempname()\nsavedataset(dschunked,path=f,driver=:zarr)\n</code></pre> <pre><code>YAXArray Dataset\nShared Axes: \nDim{:Dim_1} Sampled{Int64} Base.OneTo(10) ForwardOrdered Regular Points,\nDim{:Dim_2} Sampled{Int64} Base.OneTo(20) ForwardOrdered Regular Points\nVariables: \nx, y, z, \n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/contribute/contribute/","title":"Contribute to docs","text":""},{"location":"examples/generated/contribute/contribute/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>new file</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropriate level.</p> <p>add entry to docs</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/contribute/contribute/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR follow the next steps:</p> <p>build docs locally</p> <p>Install the following dependencies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Then simply go to your <code>docs</code> env and activate it, i.e.</p> <p><code>docs&gt; julia</code></p> <p><code>julia&gt; ]</code></p> <p><code>(docs) pkg&gt; activate .</code></p> <p>Next, run the scripts:</p> <p>Julia env: docs</p> <p>Generate files and build docs by running:</p> <ul> <li><code>include(\"genfiles.jl\")</code></li> <li><code>include(\"make.jl\")</code></li> </ul> <p>Now go to your <code>terminal</code> in the same path <code>docs&gt;</code> and run:</p> <p><code>mkdocs serve</code></p> <p>This should ouput <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"tutorials/tutorial/","title":"Tutorial","text":""},{"location":"tutorials/tutorial/#yaxarray-tutorial","title":"YAXArray tutorial","text":"<p>If you are interested in learning how to work with YAXArrays for different use cases you can follow along one of the following tutorials. </p> <ul> <li>Currently the overview tutorial is located at ESDLTutorials Repository</li> <li>You can find further tutorial videos at the EO College. Beware that the syntax in the video tutorials might be slightly changed.</li> <li>the other tutorials are still work in progress.</li> </ul> <p></p> <p></p>"},{"location":"tutorials/tutorial/#general-overview-of-the-functionality-of-yaxarrays","title":"General overview of the functionality of YAXArrays","text":"<p>This tutorial provides a broad overview about the features of YAXArrays.</p> <p></p> <p></p>"},{"location":"tutorials/tutorial/#table-style-iteration-over-yaxarrays","title":"Table-style iteration over YAXArrays","text":"<p>Work in progress</p> <p>Sometimes you want to combine the data that is represented in the data cube with other datasets, which are best described as a data frame.  In this tutorial you will learn how to use the Tables.jl interface to iterate over the data in the YAXArray.</p> <p></p> <p></p>"},{"location":"tutorials/tutorial/#combining-multiple-tiff-files-into-a-zarr-based-datacube","title":"Combining multiple tiff files into a zarr based datacube","text":""}]}