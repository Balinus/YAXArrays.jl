var documenterSearchIndex = {"docs":
[{"location":"man/yaxarrays/#The-YAXArray-Data-Type","page":"-","title":"The YAXArray Data Type","text":"","category":"section"},{"location":"api/#Public-API","page":"Docstring Reference","title":"Public API","text":"","category":"section"},{"location":"api/","page":"Docstring Reference","title":"Docstring Reference","text":"DocTestSetup= quote\nusing YAXArrays\nend","category":"page"},{"location":"api/","page":"Docstring Reference","title":"Docstring Reference","text":"Modules = [YAXArrays, YAXArrays.Cubes, YAXArrays.Cubes.Axes, YAXArrays.DAT, YAXArrays.DAT.SentinelMissings, YAXArrays.Datasets,YAXArrays.YAXTools]\nPrivate = false","category":"page"},{"location":"api/#Internal-API","page":"Docstring Reference","title":"Internal API","text":"","category":"section"},{"location":"api/","page":"Docstring Reference","title":"Docstring Reference","text":"Modules = [YAXArrays, YAXArrays.Cubes, YAXArrays.Cubes.Axes, YAXArrays.DAT, YAXArrays.DAT.SentinelMissings,YAXArrays.Datasets,YAXArrays.YAXTools]\nPublic = false","category":"page"},{"location":"man/datasets/#YAXArray-Datasets","page":"-","title":"YAXArray Datasets","text":"","category":"section"},{"location":"examples/Saving and rechunking/#Saving-and-and-Rechunking-Datasets-and-YAXArrays","page":"Saving and rechunking","title":"Saving and and Rechunking Datasets and YAXArrays","text":"","category":"section"},{"location":"examples/Saving and rechunking/#Saving","page":"Saving and rechunking","title":"Saving","text":"","category":"section"},{"location":"examples/Saving and rechunking/#Saving-a-YAXArray-to-Zarr","page":"Saving and rechunking","title":"Saving a YAXArray to Zarr","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"One can save any YAXArray using the savecube function. Simply add a path as an argument and the cube will be saved. ","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> using YAXArrays, Zarr\n\njulia> a = YAXArray(rand(10,20));\n\njulia> f = tempname();\n\njulia> savecube(a,f,driver=:zarr)\nYAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nTotal size: 1.56 KB","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"If the pathname ends with \".zarr\", the driver argument can be omitted. ","category":"page"},{"location":"examples/Saving and rechunking/#Saving-a-YAXArray-to-NetCDF","page":"Saving and rechunking","title":"Saving a YAXArray to NetCDF","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"Saving to NetCDF works exactly the same way. The driver argument can be omitted when the filename ends with \".nc\"","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> using YAXArrays, Zarr, NetCDF\n\njulia> a = YAXArray(rand(10,20));\n\njulia> f = tempname();\n\njulia> savecube(a,f,driver=:netcdf)\nYAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nTotal size: 1.56 KB","category":"page"},{"location":"examples/Saving and rechunking/#Saving-a-Dataset","page":"Saving and rechunking","title":"Saving a Dataset","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"Saving Datasets can be done using the savedataset function.","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> using YAXArrays, Zarr\n\njulia> ds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)));\n\njulia> f = tempname();\n\njulia> savedataset(ds,path=f,driver=:zarr)\nYAXArray Dataset\nDimensions: \n   Dim_2               Axis with 20 Elements from 1 to 20\n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: x y","category":"page"},{"location":"examples/Saving and rechunking/#Overwriting-a-Dataset","page":"Saving and rechunking","title":"Overwriting a Dataset","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"If a path already exists, an error will be thrown. Set overwrite=true to delete the existing dataset","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> savedataset(ds,path=f,driver=:zarr, overwrite=true)\nYAXArray Dataset\nDimensions: \n   Dim_2               Axis with 20 Elements from 1 to 20\n   Dim_1               Axis with 10 Elements from 1 to 10\nVariables: x y","category":"page"},{"location":"examples/Saving and rechunking/#Appending-to-a-Dataset","page":"Saving and rechunking","title":"Appending to a Dataset","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"New variables can be added to an existing dataset using the append=true keyword. ","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> ds2 = Dataset(z = YAXArray(rand(10,20,5)));\n\njulia> savedataset(ds2,path=f,backend=:zarr,append=true);\n\njulia> open_dataset(f, driver=:zarr)\nYAXArray Dataset\nDimensions: \n   Dim_2               Axis with 20 Elements from 1 to 20\n   Dim_1               Axis with 10 Elements from 1 to 10\n   Dim_3               Axis with 5 Elements from 1 to 5\nVariables: x z y ","category":"page"},{"location":"examples/Saving and rechunking/#Creating-a-Dataset-without-writing-the-actual-data","page":"Saving and rechunking","title":"Creating a Dataset without writing the actual data","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"Sometimes one merely wants to create a datacube  \"Skeleton\" on disk and gradually fill it with data. Here we create Dataset and write only the axis data and array metadata, while no actual array data is copied:","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> using YAXArrays, Zarr\n\njulia> a = YAXArray(zeros(Union{Missing, Int32},10,20))\nYAXArray with the following dimensions\nDim_1               Axis with 10 Elements from 1 to 10\nDim_2               Axis with 20 Elements from 1 to 20\nTotal size: 800.0 bytes\n\n\njulia> f = tempname();\n\njulia> r = savecube(a,f,driver=:zarr,skeleton_only=true);\n\njulia> all(ismissing,r[:,:])\ntrue","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"The skeleton_only argument is also available for savedataset. ","category":"page"},{"location":"examples/Saving and rechunking/#Rechunking","page":"Saving and rechunking","title":"Rechunking","text":"","category":"section"},{"location":"examples/Saving and rechunking/#Saving-a-YAXArray-with-user-defined-chunks","page":"Saving and rechunking","title":"Saving a YAXArray with user-defined chunks","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"To determine the chunk size of the array representation on disk, call the setchunks function prior to saving:","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"julia> using YAXArrays, Zarr, NetCDF\n\njulia> a = YAXArray(rand(10,20));\n\njulia> f = tempname();\n\njulia> a_chunked = setchunks(a,(5,10));\n\njulia> savecube(a_chunked,f,backend=:zarr);\n\njulia> Cube(f).chunks\n2Ã—2 DiskArrays.GridChunks{2}:\n (1:5, 1:10)   (1:5, 11:20)\n (6:10, 1:10)  (6:10, 11:20)","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"Alternatively chunk sizes can be given by dimension name, so the following results in the same chunks:","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"a_chunked = setchunks(a,(Dim_2=10, Dim_1=5));","category":"page"},{"location":"examples/Saving and rechunking/#Rechunking-Datasets","page":"Saving and rechunking","title":"Rechunking Datasets","text":"","category":"section"},{"location":"examples/Saving and rechunking/#Set-Chunks-by-Axis","page":"Saving and rechunking","title":"Set Chunks by Axis","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"Set chunk size for each axis occuring in a dataset. This will be applied to all variables in the dataset:","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)));\ndschunked = setchunks(ds,Dict(\"Dim_1\"=>5, \"Dim_2\"=>10, \"Dim_3\"=>2));\nf = tempname();\nsavedataset(dschunked,path=f,driver=:zarr)","category":"page"},{"location":"examples/Saving and rechunking/#Set-chunking-by-Variable","page":"Saving and rechunking","title":"Set chunking by Variable","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"The following will set the chunk size for each Variable separately and results in exactly the same chunkg as the example above","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10)), z = YAXArray(rand(10,20,5)));\ndschunked = setchunks(ds,(x = (5,10), y = Dict(\"Dim_1\"=>5), z = (Dim_1 = 5, Dim_2 = 10, Dim_3 = 2)));\nf = tempname();\nsavedataset(dschunked,path=f,driver=:zarr)","category":"page"},{"location":"examples/Saving and rechunking/#Set-chunking-for-all-variables","page":"Saving and rechunking","title":"Set chunking for all variables","text":"","category":"section"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"The following code snippet only works when all member variables of the dataset have the same shape and sets the output chunks for all arrays. ","category":"page"},{"location":"examples/Saving and rechunking/","page":"Saving and rechunking","title":"Saving and rechunking","text":"using YAXArrays, Zarr\nds = Dataset(x = YAXArray(rand(10,20)), y = YAXArray(rand(10,20)), z = YAXArray(rand(10,20)));\ndschunked = setchunks(ds,(5,10));\nf = tempname();\nsavedataset(dschunked,path=f,driver=:zarr)","category":"page"},{"location":"examples/Time Mean/#How-to-calculate-a-time-mean","page":"Time Mean","title":"How to calculate a time mean","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using ESDL\nc = Cube()\ncitaly = c[var = [\"air_temperature_2m\", \"evaporation\"], region=\"Italy\", time=2001:2003]\nmapslices(mean âˆ˜ skipmissing, c, dims=\"Time\")","category":"page"},{"location":"examples/Time Mean/#Distributed-calculations","page":"Time Mean","title":"Distributed calculations","text":"","category":"section"},{"location":"examples/Time Mean/#Local-machine","page":"Time Mean","title":"Local machine","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"It is possible to distribute the calculations over multiple process. The following code does a time mean over all grid points using multiple CPU over a local machine.","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using Distributed\naddprocs(2)\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using ESDL\n@everywhere using Statistics\n\n@everywhere function mymean(output, pixel)\n       output = mean(pixel)\nend\n\nc = Cube()\ntair = subsetcube(c,variable=\"air_temperature_2m\", time=2001:2016)\ntair_c = map(t->t-273.15, tair)\n\nindims = InDims(TimeAxis)\noutdims = OutDims()\n\nresultcube = mapCube(mymean, tair_c, indims=indims, outdims=outdims)","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"In the last example, mapCube was used to map the mymean function. mapslices is a convenient function that can replace mapCube, where you can omit defining an extra function with the output argument as an input (e.g. mymean). It is possible to simply use mapslice","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"resultcube = mapslices(mean âˆ˜ skipmissing, c, dims=\"time\")","category":"page"},{"location":"examples/Time Mean/#SLURM-cluster","page":"Time Mean","title":"SLURM cluster","text":"","category":"section"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"It is also possible to distribute easily the workload on a cluster, with little modification to the code. The following code does a time mean over all grid points using multiple CPU over a SLURM cluster. To do so, we use the ClusterManagers package.","category":"page"},{"location":"examples/Time Mean/","page":"Time Mean","title":"Time Mean","text":"using Distributed\nusing ClusterManagers\n\naddprocs(SlurmManager(10))\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using ESDL\n@everywhere using Statistics\n\ninpath=\"zg1000_AERday_CanESM5_esm-hist_r6i1p1f1_gn_18500101-20141231.nc\"\n\nc = Cube(inpath, \"zg1000\")\n\nresultcube = mapslices(mean âˆ˜ skipmissing, c, dims=\"time\")","category":"page"},{"location":"man/iterators/#Table-style-iteration-over-YAXArrays","page":"Table-style iteration over YAXArrays","title":"Table-style iteration over YAXArrays","text":"","category":"section"},{"location":"man/applying functions/#Mapping-functions-over-YAXArrays","page":"Mapping functions over YAXArrays","title":"Mapping functions over YAXArrays","text":"","category":"section"},{"location":"#YAXArrays.jl","page":"Home","title":"YAXArrays.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yet another xarray-like Julia package","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for operating on out-of-core labeled arrays, based on stores like NetCDF or Zarr.  ","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"open datasets from a variety of sources (NetCDF, Zarr, ArchGDAL)\ninteroperability with other named axis packages through YAXArrayBase\nefficient mapslices operations on huge multiple arrays, optimized for high-latency data access (object storage, compressed datasets) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The YAXArray tutorial provides a tutorial explaining how to get started using YAXArrays.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/tutorial.md\",\n    \"man/datasets.md\",\n    \"man/yaxarrays.md\",\n    \"man/applying function.md\",\n    \"man/iterators.md\",\n    \"man/chunking.md\",\n    \"man/performance.md\",\n    \"examples/examples.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!â€“ ","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"â€“>","category":"page"},{"location":"man/tutorial/#YAXArray-tutorial","page":"Tutorial","title":"YAXArray tutorial","text":"","category":"section"}]
}
